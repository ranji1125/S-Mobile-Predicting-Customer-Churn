{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## S-Mobile: Predicting Customer Churn\n",
    "\n",
    "* Team-lead GitHub userid: rsm-xyz123\n",
    "* Group name:\n",
    "* Team member names:\n",
    "    -\n",
    "    -\n",
    "    -\n",
    "    -"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Please complete this Jupyter notebook by answering the questions in `s-mobile.pdf` on Canvas. Create a Notebook and HTML file with all your results and comments and push both the Notebook and HTML file to GitLab when your team is done. Please also push your final notebook to GradeScope. All results MUST be reproducible (i.e., the TA and I must be able to recreate the HTML from the Jupyter Notebook file without changes or errors). This means that you should NOT use any python-packages that are not part of the rsm-msba-spark docker container.\n",
    "\n",
    "This is a group assignment for MGTA 455 and you will be using git and GitLab. If two people edit the same file at the same time you could get what is called a \"merge conflict\". git will not decide for you who's change to accept so the team-lead will have to determine which edits to use. To avoid merge conflicts, **always** \"pull\" changes to the repo before you start working on any files. Then, when you are done, save and commit your changes, and then push them to GitLab. Make \"pull first\" a habit!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Please complete this python notebook with your group by answering the questions in `s-mobile-msba.pdf`.\n",
    "\n",
    "Create a Notebook with all your results and comments and push the Notebook to GitHub when your team is done. Make sure to connect the GitHub repo to GradeScope before the due date. All results MUST be reproducible (i.e., the TA and I must be able to recreate your output from the Jupyter Notebook without changes or errors). This means that you should NOT use any python-packages that are not part of the RSM-MSBA docker container.\n",
    "\n",
    "> Note: Please do not install any packages as part of your Jupyter Notebook submission\n",
    "\n",
    "This is a group assignment and you will be using Git and GitHub. If two people edit the same file at the same time you could get what is called a \"merge conflict\". This is not something serious but you should realize that Git will not decide for you who's changes to accept. The team-lead will have to determine the edits to use. To avoid merge conflicts, **always** \"pull\" changes to the repo before you start working on any files. Then, when you are done, save and commit your changes, and then push them to GitHub. Make \"pull first\" a habit!\n",
    "\n",
    "If multiple people are going to work on the assignment at the same time I recommend you work in different notebooks. You can then `%run ...`  these \"sub\" notebooks from the main assignment file. You can seen an example of this in action below for the `model1.ipynb` notebook\n",
    "\n",
    "Some group work-flow tips:\n",
    "\n",
    "* Pull, edit, save, stage, commit, and push\n",
    "* Schedule who does what and when\n",
    "* Try to avoid working simultaneously on the same file\n",
    "* If you are going to work simultaneously, do it in different notebooks, e.g.,\n",
    "    - model1.ipynb, question1.ipynb, etc.\n",
    "* Use the `%run ... ` command to bring different pieces of code together into the main jupyter notebook\n",
    "* Put python functions in modules that you can import from your notebooks. See the example below for the `example` function defined in `utils/functions.py`\n",
    "\n",
    "A graphical depiction of the group work-flow is shown below:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](images/github-group-workflow.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import pyrsm as rsm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pyrsm in /home/jovyan/.rsm-msba/lib/python3.11/site-packages (0.9.24)\n",
      "Requirement already satisfied: shiny>=0.6.0 in /home/jovyan/.rsm-msba/lib/python3.11/site-packages (from pyrsm) (0.6.0)\n",
      "Requirement already satisfied: shinyswatch>=0.2.4 in /home/jovyan/.rsm-msba/lib/python3.11/site-packages (from pyrsm) (0.2.4)\n",
      "Requirement already satisfied: faicons>=0.2.1 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (0.2.1)\n",
      "Requirement already satisfied: numpy>=1.17.3 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (1.26.2)\n",
      "Requirement already satisfied: pandas>=2.1.4 in /home/jovyan/.rsm-msba/lib/python3.11/site-packages (from pyrsm) (2.2.0)\n",
      "Requirement already satisfied: polars>=0.20.2 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (0.20.2)\n",
      "Requirement already satisfied: duckdb>=0.8.1 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (0.9.2)\n",
      "Requirement already satisfied: ipykernel>=6.23.1 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (6.26.0)\n",
      "Requirement already satisfied: seaborn>=0.9.0 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (0.13.0)\n",
      "Requirement already satisfied: matplotlib>=3.1.1 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (3.8.2)\n",
      "Requirement already satisfied: statsmodels>=0.10.1 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (0.14.1)\n",
      "Requirement already satisfied: scipy>=1.4.1 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (1.11.3)\n",
      "Requirement already satisfied: scikit-learn>=1.0.2 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (1.3.2)\n",
      "Requirement already satisfied: IPython>=8.0.1 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (8.18.1)\n",
      "Requirement already satisfied: nest-asyncio>=1.5.6 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (1.5.8)\n",
      "Requirement already satisfied: black>=22.6.0 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (23.12.1)\n",
      "Requirement already satisfied: pyarrow>=14.0.1 in /opt/conda/lib/python3.11/site-packages (from pyrsm) (14.0.1)\n",
      "Requirement already satisfied: click>=8.0.0 in /home/jovyan/.rsm-msba/lib/python3.11/site-packages (from black>=22.6.0->pyrsm) (8.1.7)\n",
      "Requirement already satisfied: mypy-extensions>=0.4.3 in /opt/conda/lib/python3.11/site-packages (from black>=22.6.0->pyrsm) (1.0.0)\n",
      "Requirement already satisfied: packaging>=22.0 in /opt/conda/lib/python3.11/site-packages (from black>=22.6.0->pyrsm) (23.2)\n",
      "Requirement already satisfied: pathspec>=0.9.0 in /opt/conda/lib/python3.11/site-packages (from black>=22.6.0->pyrsm) (0.12.1)\n",
      "Requirement already satisfied: platformdirs>=2 in /opt/conda/lib/python3.11/site-packages (from black>=22.6.0->pyrsm) (4.1.0)\n",
      "Requirement already satisfied: htmltools in /opt/conda/lib/python3.11/site-packages (from faicons>=0.2.1->pyrsm) (0.5.1)\n",
      "Requirement already satisfied: comm>=0.1.1 in /opt/conda/lib/python3.11/site-packages (from ipykernel>=6.23.1->pyrsm) (0.1.4)\n",
      "Requirement already satisfied: debugpy>=1.6.5 in /opt/conda/lib/python3.11/site-packages (from ipykernel>=6.23.1->pyrsm) (1.8.0)\n",
      "Requirement already satisfied: jupyter-client>=6.1.12 in /opt/conda/lib/python3.11/site-packages (from ipykernel>=6.23.1->pyrsm) (8.6.0)\n",
      "Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /opt/conda/lib/python3.11/site-packages (from ipykernel>=6.23.1->pyrsm) (5.5.1)\n",
      "Requirement already satisfied: matplotlib-inline>=0.1 in /opt/conda/lib/python3.11/site-packages (from ipykernel>=6.23.1->pyrsm) (0.1.6)\n",
      "Requirement already satisfied: psutil in /opt/conda/lib/python3.11/site-packages (from ipykernel>=6.23.1->pyrsm) (5.9.7)\n",
      "Requirement already satisfied: pyzmq>=20 in /opt/conda/lib/python3.11/site-packages (from ipykernel>=6.23.1->pyrsm) (25.1.2)\n",
      "Requirement already satisfied: tornado>=6.1 in /opt/conda/lib/python3.11/site-packages (from ipykernel>=6.23.1->pyrsm) (6.3.3)\n",
      "Requirement already satisfied: traitlets>=5.4.0 in /opt/conda/lib/python3.11/site-packages (from ipykernel>=6.23.1->pyrsm) (5.14.0)\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.11/site-packages (from IPython>=8.0.1->pyrsm) (5.1.1)\n",
      "Requirement already satisfied: jedi>=0.16 in /opt/conda/lib/python3.11/site-packages (from IPython>=8.0.1->pyrsm) (0.19.1)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /opt/conda/lib/python3.11/site-packages (from IPython>=8.0.1->pyrsm) (3.0.42)\n",
      "Requirement already satisfied: pygments>=2.4.0 in /opt/conda/lib/python3.11/site-packages (from IPython>=8.0.1->pyrsm) (2.17.2)\n",
      "Requirement already satisfied: stack-data in /opt/conda/lib/python3.11/site-packages (from IPython>=8.0.1->pyrsm) (0.6.2)\n",
      "Requirement already satisfied: pexpect>4.3 in /opt/conda/lib/python3.11/site-packages (from IPython>=8.0.1->pyrsm) (4.8.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.11/site-packages (from matplotlib>=3.1.1->pyrsm) (1.2.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.11/site-packages (from matplotlib>=3.1.1->pyrsm) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.11/site-packages (from matplotlib>=3.1.1->pyrsm) (4.47.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /opt/conda/lib/python3.11/site-packages (from matplotlib>=3.1.1->pyrsm) (1.4.5)\n",
      "Requirement already satisfied: pillow>=8 in /opt/conda/lib/python3.11/site-packages (from matplotlib>=3.1.1->pyrsm) (10.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.11/site-packages (from matplotlib>=3.1.1->pyrsm) (3.1.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.11/site-packages (from matplotlib>=3.1.1->pyrsm) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.11/site-packages (from pandas>=2.1.4->pyrsm) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.11/site-packages (from pandas>=2.1.4->pyrsm) (2023.3)\n",
      "Requirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.11/site-packages (from scikit-learn>=1.0.2->pyrsm) (1.3.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.11/site-packages (from scikit-learn>=1.0.2->pyrsm) (3.2.0)\n",
      "Requirement already satisfied: typing-extensions>=4.0.1 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (4.9.0)\n",
      "Requirement already satisfied: uvicorn>=0.16.0 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (0.25.0)\n",
      "Requirement already satisfied: starlette>=0.17.1 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (0.34.0)\n",
      "Requirement already satisfied: websockets>=10.0 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (12.0)\n",
      "Requirement already satisfied: python-multipart in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (0.0.6)\n",
      "Requirement already satisfied: markdown-it-py>=1.1.0 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (3.0.0)\n",
      "Requirement already satisfied: mdit-py-plugins>=0.3.0 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (0.4.0)\n",
      "Requirement already satisfied: linkify-it-py>=1.0 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (2.0.2)\n",
      "Requirement already satisfied: appdirs>=1.4.4 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (1.4.4)\n",
      "Requirement already satisfied: asgiref>=3.5.2 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (3.7.2)\n",
      "Requirement already satisfied: watchfiles>=0.18.0 in /opt/conda/lib/python3.11/site-packages (from shiny>=0.6.0->pyrsm) (0.21.0)\n",
      "Requirement already satisfied: XStatic-bootswatch>=3.3.7.0 in /home/jovyan/.rsm-msba/lib/python3.11/site-packages (from shinyswatch>=0.2.4->pyrsm) (3.3.7.0)\n",
      "Requirement already satisfied: patsy>=0.5.4 in /opt/conda/lib/python3.11/site-packages (from statsmodels>=0.10.1->pyrsm) (0.5.4)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.3 in /opt/conda/lib/python3.11/site-packages (from jedi>=0.16->IPython>=8.0.1->pyrsm) (0.8.3)\n",
      "Requirement already satisfied: uc-micro-py in /opt/conda/lib/python3.11/site-packages (from linkify-it-py>=1.0->shiny>=0.6.0->pyrsm) (1.0.2)\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.11/site-packages (from markdown-it-py>=1.1.0->shiny>=0.6.0->pyrsm) (0.1.0)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.11/site-packages (from patsy>=0.5.4->statsmodels>=0.10.1->pyrsm) (1.16.0)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.11/site-packages (from pexpect>4.3->IPython>=8.0.1->pyrsm) (0.7.0)\n",
      "Requirement already satisfied: wcwidth in /opt/conda/lib/python3.11/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->IPython>=8.0.1->pyrsm) (0.2.12)\n",
      "Requirement already satisfied: anyio<5,>=3.4.0 in /opt/conda/lib/python3.11/site-packages (from starlette>=0.17.1->shiny>=0.6.0->pyrsm) (4.2.0)\n",
      "Requirement already satisfied: h11>=0.8 in /opt/conda/lib/python3.11/site-packages (from uvicorn>=0.16.0->shiny>=0.6.0->pyrsm) (0.14.0)\n",
      "Requirement already satisfied: executing>=1.2.0 in /opt/conda/lib/python3.11/site-packages (from stack-data->IPython>=8.0.1->pyrsm) (2.0.1)\n",
      "Requirement already satisfied: asttokens>=2.1.0 in /opt/conda/lib/python3.11/site-packages (from stack-data->IPython>=8.0.1->pyrsm) (2.4.1)\n",
      "Requirement already satisfied: pure-eval in /opt/conda/lib/python3.11/site-packages (from stack-data->IPython>=8.0.1->pyrsm) (0.2.2)\n",
      "Requirement already satisfied: idna>=2.8 in /opt/conda/lib/python3.11/site-packages (from anyio<5,>=3.4.0->starlette>=0.17.1->shiny>=0.6.0->pyrsm) (3.6)\n",
      "Requirement already satisfied: sniffio>=1.1 in /opt/conda/lib/python3.11/site-packages (from anyio<5,>=3.4.0->starlette>=0.17.1->shiny>=0.6.0->pyrsm) (1.3.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --user pyrsm --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.9.24'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rsm.__version__ # should be 0.9.20 or newer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "## load the data - this dataset must NOT be changed\n",
    "s_mobile = pd.read_parquet(\"data/s_mobile.parquet\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "## S-mobile\n",
       "\n",
       "Dataset used to investigate opportunities to decrease customer churn at S-mobile. The sample consists of three parts:\n",
       "\n",
       "1. A training sample with 27,300 observations and a 50% churn rate (\"training == 1\")\n",
       "2. A test sample with 11,700 observations and a 50% churn rate (\"training == 0\")\n",
       "3. A representative sample with 30,000 observations and a churn rate of 2%, i.e., the actual monthly churn rate for S-mobile (\"is.na(training)\" or \"representative == 1\")\n",
       "\n",
       "## Variables\n",
       "\n",
       "* customer: Customer ID\n",
       "* churn: Did consumer churn in the last 30 days? (yes or no)\n",
       "* changer: % change in revenue over the most recent 4 month period\n",
       "* changem: % change in minutes of use over the most recent 4 month period\n",
       "* revenue: Mean monthly revenue in SGD\n",
       "* mou: Mean monthly minutes of use\n",
       "* overage: Mean monthly overage minutes\n",
       "* roam: Mean number of roaming calls\n",
       "* conference: Mean number of conference calls\n",
       "* months: # of months the customer has had service with S-Mobile\n",
       "* uniqsubs: Number of individuals listed on the customer account\n",
       "* custcare: Mean number of calls to customer care \n",
       "* retcalls: Number of calls by the customer to the retention team\n",
       "* dropvce: Mean number of dropped voice calls \n",
       "* eqpdays: Number of days customer has owned current handset\n",
       "* refurb: Handset is refurbished (no or yes)\n",
       "* smartphone: Handset is a smartphone (no or yes)\n",
       "* creditr: High credit rating as opposed to medium or low (no or yes)\n",
       "* mcycle: Subscriber owns a motorcycle (no or yes)\n",
       "* car: Subscriber owns a car (no or yes)\n",
       "* travel: Subscriber has traveled internationally (no or yes)\n",
       "* region: Regions delineated by the 5 Community Development Council Districts (e.g., CS is Central Singapore)\n",
       "* occupation: Categorical variable with 4 occupation levels (professional, student, retired, or other)\n",
       "* training: 1 for training sample, 0 for test sample, NA for representative sample\n",
       "* representative: 1 for representative sample, 0 for training and test sample\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rsm.md(\"data/s_mobile_description.md\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want access to the full 1M row dataset, use the code below to download and use the data. Please do **not** include the 1M row dataset in your repo!\n",
    "\n",
    "The downside to using the dataset with 1M rows is, of course, that estimation time will increase substantially. I do NOT recommend you use this dataset to select your final model or for tuning hyper parameters. You can, however, use this larger dataset to re-estimate your chosen model and generate profit estimates for the representative sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer</th>\n",
       "      <th>churn</th>\n",
       "      <th>changer</th>\n",
       "      <th>changem</th>\n",
       "      <th>revenue</th>\n",
       "      <th>mou</th>\n",
       "      <th>overage</th>\n",
       "      <th>roam</th>\n",
       "      <th>conference</th>\n",
       "      <th>months</th>\n",
       "      <th>...</th>\n",
       "      <th>refurb</th>\n",
       "      <th>smartphone</th>\n",
       "      <th>highcreditr</th>\n",
       "      <th>mcycle</th>\n",
       "      <th>car</th>\n",
       "      <th>travel</th>\n",
       "      <th>region</th>\n",
       "      <th>occupation</th>\n",
       "      <th>training</th>\n",
       "      <th>representative</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>U88927415</td>\n",
       "      <td>no</td>\n",
       "      <td>-1</td>\n",
       "      <td>-8</td>\n",
       "      <td>31</td>\n",
       "      <td>118</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SW</td>\n",
       "      <td>other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>U94655060</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>87</td>\n",
       "      <td>412</td>\n",
       "      <td>104</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>CS</td>\n",
       "      <td>student</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>U22910834</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>138</td>\n",
       "      <td>1252</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>student</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>U55939985</td>\n",
       "      <td>no</td>\n",
       "      <td>-1</td>\n",
       "      <td>-15</td>\n",
       "      <td>58</td>\n",
       "      <td>69</td>\n",
       "      <td>42</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>NE</td>\n",
       "      <td>other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>U74897690</td>\n",
       "      <td>no</td>\n",
       "      <td>-9</td>\n",
       "      <td>-20</td>\n",
       "      <td>117</td>\n",
       "      <td>1002</td>\n",
       "      <td>175</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>other</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004995</th>\n",
       "      <td>U63357590</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>54</td>\n",
       "      <td>778</td>\n",
       "      <td>115</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>NW</td>\n",
       "      <td>other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004996</th>\n",
       "      <td>U10548621</td>\n",
       "      <td>no</td>\n",
       "      <td>-5</td>\n",
       "      <td>-20</td>\n",
       "      <td>31</td>\n",
       "      <td>176</td>\n",
       "      <td>40</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>CS</td>\n",
       "      <td>retired</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004997</th>\n",
       "      <td>U61718563</td>\n",
       "      <td>no</td>\n",
       "      <td>-3</td>\n",
       "      <td>-2</td>\n",
       "      <td>45</td>\n",
       "      <td>1731</td>\n",
       "      <td>105</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SW</td>\n",
       "      <td>other</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004998</th>\n",
       "      <td>U79998923</td>\n",
       "      <td>no</td>\n",
       "      <td>73</td>\n",
       "      <td>46</td>\n",
       "      <td>108</td>\n",
       "      <td>1156</td>\n",
       "      <td>144</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>CS</td>\n",
       "      <td>other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004999</th>\n",
       "      <td>U33767570</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>-28</td>\n",
       "      <td>60</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>other</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1005000 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          customer churn  changer  changem  revenue   mou  overage  roam  \\\n",
       "0        U88927415    no       -1       -8       31   118        1     0   \n",
       "1        U94655060    no        0       -2       87   412      104     0   \n",
       "2        U22910834    no        1       23      138  1252        0     3   \n",
       "3        U55939985    no       -1      -15       58    69       42     3   \n",
       "4        U74897690    no       -9      -20      117  1002      175     4   \n",
       "...            ...   ...      ...      ...      ...   ...      ...   ...   \n",
       "1004995  U63357590    no        2       34       54   778      115     1   \n",
       "1004996  U10548621    no       -5      -20       31   176       40     3   \n",
       "1004997  U61718563    no       -3       -2       45  1731      105     0   \n",
       "1004998  U79998923    no       73       46      108  1156      144    18   \n",
       "1004999  U33767570    no        0      -28       60    44        0     0   \n",
       "\n",
       "         conference  months  ...  refurb  smartphone  highcreditr  mcycle  \\\n",
       "0                 0      38  ...      no         yes           no      no   \n",
       "1                 0      10  ...      no         yes           no      no   \n",
       "2                 0      19  ...      no         yes           no      no   \n",
       "3                 0       8  ...      no         yes          yes      no   \n",
       "4                 0      11  ...     yes         yes           no      no   \n",
       "...             ...     ...  ...     ...         ...          ...     ...   \n",
       "1004995           1       7  ...      no         yes           no      no   \n",
       "1004996           0      35  ...      no          no           no      no   \n",
       "1004997           0      30  ...      no         yes           no      no   \n",
       "1004998           0      18  ...      no         yes           no      no   \n",
       "1004999           0      15  ...      no         yes           no     yes   \n",
       "\n",
       "         car travel region occupation training representative  \n",
       "0         no     no     SW      other      0.0              0  \n",
       "1         no    yes     CS    student      1.0              0  \n",
       "2         no     no     SE    student      1.0              0  \n",
       "3         no     no     NE      other      NaN              1  \n",
       "4         no     no     SE      other      1.0              0  \n",
       "...      ...    ...    ...        ...      ...            ...  \n",
       "1004995   no     no     NW      other      0.0              0  \n",
       "1004996   no     no     CS    retired      1.0              0  \n",
       "1004997   no     no     SW      other      1.0              0  \n",
       "1004998   no     no     CS      other      0.0              0  \n",
       "1004999   no     no     SE      other      1.0              0  \n",
       "\n",
       "[1005000 rows x 25 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_1M = pd.read_parquet(\"https://www.dropbox.com/scl/fi/upm68ytk5r7oz2xd61qau/s_mobile_1M.parquet?rlkey=0pap46l024yryr4h08mvexiha&dl=1\")\n",
    "s_mobile_1M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customer            object\n",
       "churn             category\n",
       "changer              int32\n",
       "changem              int32\n",
       "revenue              int32\n",
       "mou                  int32\n",
       "overage              int32\n",
       "roam                 int32\n",
       "conference           int32\n",
       "months               int32\n",
       "uniqsubs             int32\n",
       "custcare             int32\n",
       "retcalls           float64\n",
       "dropvce              int32\n",
       "eqpdays            float64\n",
       "refurb            category\n",
       "smartphone        category\n",
       "highcreditr       category\n",
       "mcycle            category\n",
       "car               category\n",
       "travel            category\n",
       "region            category\n",
       "occupation        category\n",
       "training           float64\n",
       "representative       int32\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "\n",
       "```python\n",
       "lr = rsm.model.logistic(\n",
       "    data=s_mobile.query(\"training == 1\"),\n",
       "    rvar=\"churn\",\n",
       "    lev=\"yes\",\n",
       "    evar=\"changer\",\n",
       ")\n",
       "print(lr.summary())\n",
       "```\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic regression (GLM)\n",
      "Data                 : Not provided\n",
      "Response variable    : churn\n",
      "Level                : yes\n",
      "Explanatory variables: changer\n",
      "Null hyp.: There is no effect of x on churn\n",
      "Alt. hyp.: There is an effect of x on churn\n",
      "\n",
      "              OR    OR%  coefficient  std.error  z.value p.value    \n",
      "Intercept  0.990  -1.0%        -0.01      0.013   -0.786   0.432    \n",
      "changer    1.001   0.1%         0.00      0.000    2.737   0.006  **\n",
      "\n",
      "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
      "\n",
      "Pseudo R-squared (McFadden): 0.0\n",
      "Pseudo R-squared (McFadden adjusted): 0.0\n",
      "Area under the RO Curve (AUC): 0.509\n",
      "Log-likelihood: -18919.161, AIC: 37842.322, BIC: 37858.752\n",
      "Chi-squared: 7.514, df(1), p.value 0.006 \n",
      "Nr obs: 27,300\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# run python code from another notebook\n",
    "rsm.md_notebook(\"./sub-notebooks/model1.ipynb\")\n",
    "%run ./sub-notebooks/model1.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>changer</th>\n",
       "      <td>8.661245</td>\n",
       "      <td>28.956823</td>\n",
       "      <td>-62.0</td>\n",
       "      <td>305.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>changem</th>\n",
       "      <td>15.211392</td>\n",
       "      <td>51.885577</td>\n",
       "      <td>-78.0</td>\n",
       "      <td>521.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>57.211136</td>\n",
       "      <td>43.25895</td>\n",
       "      <td>0.0</td>\n",
       "      <td>856.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mou</th>\n",
       "      <td>515.322308</td>\n",
       "      <td>525.458925</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7668.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>overage</th>\n",
       "      <td>66.274286</td>\n",
       "      <td>69.258068</td>\n",
       "      <td>0.0</td>\n",
       "      <td>283.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>roam</th>\n",
       "      <td>1.197253</td>\n",
       "      <td>7.254327</td>\n",
       "      <td>0.0</td>\n",
       "      <td>692.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>conference</th>\n",
       "      <td>0.26348</td>\n",
       "      <td>1.083898</td>\n",
       "      <td>0.0</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>months</th>\n",
       "      <td>18.781502</td>\n",
       "      <td>9.595614</td>\n",
       "      <td>6.0</td>\n",
       "      <td>61.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniqsubs</th>\n",
       "      <td>1.546227</td>\n",
       "      <td>0.891051</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>custcare</th>\n",
       "      <td>2.288132</td>\n",
       "      <td>4.19297</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>retcalls</th>\n",
       "      <td>0.042527</td>\n",
       "      <td>0.222183</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropvce</th>\n",
       "      <td>2.946337</td>\n",
       "      <td>4.404301</td>\n",
       "      <td>0.0</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eqpdays</th>\n",
       "      <td>538.632564</td>\n",
       "      <td>232.438835</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1982.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>training</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>representative</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>churn_no</th>\n",
       "      <td>0.5</td>\n",
       "      <td>0.500009</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>refurb_yes</th>\n",
       "      <td>0.143626</td>\n",
       "      <td>0.350717</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smartphone_yes</th>\n",
       "      <td>0.896923</td>\n",
       "      <td>0.304065</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>highcreditr_yes</th>\n",
       "      <td>0.136886</td>\n",
       "      <td>0.343734</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mcycle_yes</th>\n",
       "      <td>0.188205</td>\n",
       "      <td>0.390883</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>car_yes</th>\n",
       "      <td>0.092051</td>\n",
       "      <td>0.289104</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>travel_yes</th>\n",
       "      <td>0.055788</td>\n",
       "      <td>0.229515</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region_NE</th>\n",
       "      <td>0.188278</td>\n",
       "      <td>0.390941</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region_NW</th>\n",
       "      <td>0.191245</td>\n",
       "      <td>0.393289</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region_SE</th>\n",
       "      <td>0.191429</td>\n",
       "      <td>0.393433</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region_SW</th>\n",
       "      <td>0.189963</td>\n",
       "      <td>0.392279</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>occupation_professional</th>\n",
       "      <td>0.212088</td>\n",
       "      <td>0.408794</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>occupation_student</th>\n",
       "      <td>0.076154</td>\n",
       "      <td>0.265249</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>occupation_retired</th>\n",
       "      <td>0.083223</td>\n",
       "      <td>0.276225</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               mean         std    min     max\n",
       "changer                    8.661245   28.956823  -62.0   305.0\n",
       "changem                   15.211392   51.885577  -78.0   521.0\n",
       "revenue                   57.211136    43.25895    0.0   856.0\n",
       "mou                      515.322308  525.458925    0.0  7668.0\n",
       "overage                   66.274286   69.258068    0.0   283.0\n",
       "roam                       1.197253    7.254327    0.0   692.0\n",
       "conference                  0.26348    1.083898    0.0    56.0\n",
       "months                    18.781502    9.595614    6.0    61.0\n",
       "uniqsubs                   1.546227    0.891051    1.0    18.0\n",
       "custcare                   2.288132     4.19297    0.0    32.0\n",
       "retcalls                   0.042527    0.222183    0.0     4.0\n",
       "dropvce                    2.946337    4.404301    0.0    67.0\n",
       "eqpdays                  538.632564  232.438835   22.0  1982.0\n",
       "training                        1.0         0.0    1.0     1.0\n",
       "representative                  0.0         0.0    0.0     0.0\n",
       "churn_no                        0.5    0.500009  False    True\n",
       "refurb_yes                 0.143626    0.350717  False    True\n",
       "smartphone_yes             0.896923    0.304065  False    True\n",
       "highcreditr_yes            0.136886    0.343734  False    True\n",
       "mcycle_yes                 0.188205    0.390883  False    True\n",
       "car_yes                    0.092051    0.289104  False    True\n",
       "travel_yes                 0.055788    0.229515  False    True\n",
       "region_NE                  0.188278    0.390941  False    True\n",
       "region_NW                  0.191245    0.393289  False    True\n",
       "region_SE                  0.191429    0.393433  False    True\n",
       "region_SW                  0.189963    0.392279  False    True\n",
       "occupation_professional    0.212088    0.408794  False    True\n",
       "occupation_student         0.076154    0.265249  False    True\n",
       "occupation_retired         0.083223    0.276225  False    True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.get_dummies(\n",
    "    s_mobile.loc[s_mobile.training == 1, \"churn\":],\n",
    "    drop_first=True,\n",
    ").agg([\"mean\", \"std\", \"min\", \"max\"]).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>changer</th>\n",
       "      <td>8.310567</td>\n",
       "      <td>28.49632</td>\n",
       "      <td>-90.0</td>\n",
       "      <td>437.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>changem</th>\n",
       "      <td>17.254533</td>\n",
       "      <td>51.37539</td>\n",
       "      <td>-78.0</td>\n",
       "      <td>540.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>56.6348</td>\n",
       "      <td>43.339533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1223.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mou</th>\n",
       "      <td>540.767067</td>\n",
       "      <td>536.368824</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7359.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>overage</th>\n",
       "      <td>61.7234</td>\n",
       "      <td>67.846131</td>\n",
       "      <td>0.0</td>\n",
       "      <td>265.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>roam</th>\n",
       "      <td>1.187867</td>\n",
       "      <td>10.058579</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1112.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>conference</th>\n",
       "      <td>0.2964</td>\n",
       "      <td>1.284316</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>months</th>\n",
       "      <td>18.592767</td>\n",
       "      <td>9.928488</td>\n",
       "      <td>6.0</td>\n",
       "      <td>61.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniqsubs</th>\n",
       "      <td>1.501367</td>\n",
       "      <td>0.840013</td>\n",
       "      <td>1.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>custcare</th>\n",
       "      <td>2.514533</td>\n",
       "      <td>4.357846</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>retcalls</th>\n",
       "      <td>0.027333</td>\n",
       "      <td>0.176976</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropvce</th>\n",
       "      <td>3.029967</td>\n",
       "      <td>4.631089</td>\n",
       "      <td>0.0</td>\n",
       "      <td>98.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eqpdays</th>\n",
       "      <td>509.338867</td>\n",
       "      <td>224.1335</td>\n",
       "      <td>13.0</td>\n",
       "      <td>1786.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>training</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>representative</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>churn_no</th>\n",
       "      <td>0.98</td>\n",
       "      <td>0.140002</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>refurb_yes</th>\n",
       "      <td>0.132667</td>\n",
       "      <td>0.33922</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smartphone_yes</th>\n",
       "      <td>0.913567</td>\n",
       "      <td>0.281008</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>highcreditr_yes</th>\n",
       "      <td>0.183767</td>\n",
       "      <td>0.3873</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mcycle_yes</th>\n",
       "      <td>0.187067</td>\n",
       "      <td>0.389972</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>car_yes</th>\n",
       "      <td>0.089767</td>\n",
       "      <td>0.285852</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>travel_yes</th>\n",
       "      <td>0.0583</td>\n",
       "      <td>0.234314</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region_NE</th>\n",
       "      <td>0.196167</td>\n",
       "      <td>0.397103</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region_NW</th>\n",
       "      <td>0.201533</td>\n",
       "      <td>0.401152</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region_SE</th>\n",
       "      <td>0.202133</td>\n",
       "      <td>0.401598</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region_SW</th>\n",
       "      <td>0.200933</td>\n",
       "      <td>0.400705</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>occupation_professional</th>\n",
       "      <td>0.1736</td>\n",
       "      <td>0.378771</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>occupation_student</th>\n",
       "      <td>0.055133</td>\n",
       "      <td>0.228244</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>occupation_retired</th>\n",
       "      <td>0.1405</td>\n",
       "      <td>0.347511</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               mean         std    min     max\n",
       "changer                    8.310567    28.49632  -90.0   437.0\n",
       "changem                   17.254533    51.37539  -78.0   540.0\n",
       "revenue                     56.6348   43.339533    0.0  1223.0\n",
       "mou                      540.767067  536.368824    0.0  7359.0\n",
       "overage                     61.7234   67.846131    0.0   265.0\n",
       "roam                       1.187867   10.058579    0.0  1112.0\n",
       "conference                   0.2964    1.284316    0.0    66.0\n",
       "months                    18.592767    9.928488    6.0    61.0\n",
       "uniqsubs                   1.501367    0.840013    1.0    12.0\n",
       "custcare                   2.514533    4.357846    0.0    32.0\n",
       "retcalls                   0.027333    0.176976    0.0     3.0\n",
       "dropvce                    3.029967    4.631089    0.0    98.0\n",
       "eqpdays                  509.338867    224.1335   13.0  1786.0\n",
       "training                        NaN         NaN    NaN     NaN\n",
       "representative                  1.0         0.0    1.0     1.0\n",
       "churn_no                       0.98    0.140002  False    True\n",
       "refurb_yes                 0.132667     0.33922  False    True\n",
       "smartphone_yes             0.913567    0.281008  False    True\n",
       "highcreditr_yes            0.183767      0.3873  False    True\n",
       "mcycle_yes                 0.187067    0.389972  False    True\n",
       "car_yes                    0.089767    0.285852  False    True\n",
       "travel_yes                   0.0583    0.234314  False    True\n",
       "region_NE                  0.196167    0.397103  False    True\n",
       "region_NW                  0.201533    0.401152  False    True\n",
       "region_SE                  0.202133    0.401598  False    True\n",
       "region_SW                  0.200933    0.400705  False    True\n",
       "occupation_professional      0.1736    0.378771  False    True\n",
       "occupation_student         0.055133    0.228244  False    True\n",
       "occupation_retired           0.1405    0.347511  False    True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.get_dummies(\n",
    "    s_mobile.loc[s_mobile.representative == 1, \"churn\":],\n",
    "    drop_first=True\n",
    ").agg([\"mean\", \"std\", \"min\", \"max\"]).T.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "s_mobile[\"churn_yes\"] = rsm.ifelse(s_mobile[\"churn\"] == \"yes\", 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "class_weight_dict = {0: 49, 1: 1}\n",
    "s_mobile[\"cweight\"] = rsm.ifelse(\n",
    "    s_mobile.churn == \"yes\", class_weight_dict[1], class_weight_dict[0]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "You just accessed a function from your first python packages!\n",
      "Change the code in utils/function.py to whatever you need for this assignment\n",
      "Use 'from utils import functions' to get access to your code\n",
      "You can add modules to import from by adding additional .py files to the 'utils' directory\n",
      "Note: If you make changes to the content of this file you will have to restart the notebook kernel to get the updates\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# importing functions from a module/package\n",
    "from utils import functions\n",
    "\n",
    "functions.example()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question answers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1. Develop a model to predict customer churn**\n",
    "\n",
    "**- Feel free to use any technique you like to predict churn. However, one of your models must be a logistic regression**\n",
    "\n",
    "**- Build models using the training data and explain your modeling choices**\n",
    " \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['customer', 'churn', 'changer', 'changem', 'revenue', 'mou', 'overage',\n",
       "       'roam', 'conference', 'months', 'uniqsubs', 'custcare', 'retcalls',\n",
       "       'dropvce', 'eqpdays', 'refurb', 'smartphone', 'highcreditr', 'mcycle',\n",
       "       'car', 'travel', 'region', 'occupation', 'training', 'representative',\n",
       "       'churn_yes', 'cweight'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['changer',\n",
       " 'changem',\n",
       " 'revenue',\n",
       " 'mou',\n",
       " 'overage',\n",
       " 'roam',\n",
       " 'conference',\n",
       " 'months',\n",
       " 'uniqsubs',\n",
       " 'custcare',\n",
       " 'retcalls',\n",
       " 'dropvce',\n",
       " 'eqpdays',\n",
       " 'refurb',\n",
       " 'smartphone',\n",
       " 'highcreditr',\n",
       " 'mcycle',\n",
       " 'car',\n",
       " 'travel',\n",
       " 'region',\n",
       " 'occupation']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rvar = \"churn\"\n",
    "evar = s_mobile.columns.to_list()\n",
    "evar = evar[evar.index(rvar) + 1 :evar.index(\"training\")]\n",
    "evar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "idvar = \"customer\"\n",
    "rvar = \"churn\"\n",
    "evar = ['changer',\n",
    " 'changem',\n",
    " 'revenue',\n",
    " 'mou',\n",
    " 'overage',\n",
    " 'roam',\n",
    " 'conference',\n",
    " 'months',\n",
    " 'uniqsubs',\n",
    " 'custcare',\n",
    " 'retcalls',\n",
    " 'dropvce',\n",
    " 'eqpdays',\n",
    " 'refurb',\n",
    " 'smartphone',\n",
    " 'highcreditr',\n",
    " 'mcycle',\n",
    " 'car',\n",
    " 'travel',\n",
    " 'region',\n",
    " 'occupation']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Pseudo R-squared (McFadden): 0.085\n",
      "Pseudo R-squared (McFadden adjusted): 0.084\n",
      "Area under the RO Curve (AUC): 0.689\n",
      "Log-likelihood: -17311.321, AIC: 34676.643, BIC: 34898.438\n",
      "Chi-squared: 3223.193, df(26), p.value < 0.001 \n",
      "Nr obs: 27,300\n"
     ]
    }
   ],
   "source": [
    "lr = rsm.model.logistic(\n",
    "    data={\"s_mobile\": s_mobile[s_mobile.training == 1]},\n",
    "    rvar=\"churn\",\n",
    "    lev=\"yes\",\n",
    "    evar=evar,\n",
    ")\n",
    "lr.summary(main=False, fit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Pseudo R-squared (McFadden): 0.047\n",
      "Pseudo R-squared (McFadden adjusted): 0.046\n",
      "Area under the RO Curve (AUC): 0.688\n",
      "Log-likelihood: -63795.467, AIC: 127644.935, BIC: 127953.64\n",
      "Chi-squared: 6232.455, df(26), p.value < 0.001 \n",
      "Nr obs: 682,500\n"
     ]
    }
   ],
   "source": [
    "lrw = rsm.model.logistic(\n",
    "    data={\"s_mobile\": s_mobile[s_mobile.training == 1]},\n",
    "    rvar=\"churn\",\n",
    "    lev=\"yes\",\n",
    "    evar=evar,\n",
    "    weights=\"cweight\",\n",
    ")\n",
    "lrw.summary(main=False, fit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>OR</th>\n",
       "      <th>OR%</th>\n",
       "      <th>coefficient</th>\n",
       "      <th>std.error</th>\n",
       "      <th>z.value</th>\n",
       "      <th>p.value</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>refurb[T.yes]</td>\n",
       "      <td>1.318</td>\n",
       "      <td>31.831</td>\n",
       "      <td>0.276</td>\n",
       "      <td>0.025</td>\n",
       "      <td>11.018</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>smartphone[T.yes]</td>\n",
       "      <td>0.913</td>\n",
       "      <td>-8.700</td>\n",
       "      <td>-0.091</td>\n",
       "      <td>0.030</td>\n",
       "      <td>-3.043</td>\n",
       "      <td>0.002</td>\n",
       "      <td>**</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>highcreditr[T.yes]</td>\n",
       "      <td>0.483</td>\n",
       "      <td>-51.663</td>\n",
       "      <td>-0.727</td>\n",
       "      <td>0.031</td>\n",
       "      <td>-23.696</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>mcycle[T.yes]</td>\n",
       "      <td>0.883</td>\n",
       "      <td>-11.744</td>\n",
       "      <td>-0.125</td>\n",
       "      <td>0.029</td>\n",
       "      <td>-4.329</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>car[T.yes]</td>\n",
       "      <td>0.991</td>\n",
       "      <td>-0.924</td>\n",
       "      <td>-0.009</td>\n",
       "      <td>0.038</td>\n",
       "      <td>-0.241</td>\n",
       "      <td>0.809</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>travel[T.yes]</td>\n",
       "      <td>0.781</td>\n",
       "      <td>-21.887</td>\n",
       "      <td>-0.247</td>\n",
       "      <td>0.039</td>\n",
       "      <td>-6.278</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>region[T.NE]</td>\n",
       "      <td>0.644</td>\n",
       "      <td>-35.608</td>\n",
       "      <td>-0.440</td>\n",
       "      <td>0.026</td>\n",
       "      <td>-16.635</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>region[T.NW]</td>\n",
       "      <td>0.660</td>\n",
       "      <td>-34.020</td>\n",
       "      <td>-0.416</td>\n",
       "      <td>0.026</td>\n",
       "      <td>-15.868</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>region[T.SE]</td>\n",
       "      <td>0.651</td>\n",
       "      <td>-34.949</td>\n",
       "      <td>-0.430</td>\n",
       "      <td>0.026</td>\n",
       "      <td>-16.420</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>region[T.SW]</td>\n",
       "      <td>0.627</td>\n",
       "      <td>-37.311</td>\n",
       "      <td>-0.467</td>\n",
       "      <td>0.026</td>\n",
       "      <td>-17.667</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>occupation[T.professional]</td>\n",
       "      <td>1.416</td>\n",
       "      <td>41.561</td>\n",
       "      <td>0.348</td>\n",
       "      <td>0.022</td>\n",
       "      <td>15.970</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>occupation[T.student]</td>\n",
       "      <td>1.900</td>\n",
       "      <td>89.956</td>\n",
       "      <td>0.642</td>\n",
       "      <td>0.030</td>\n",
       "      <td>21.045</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>occupation[T.retired]</td>\n",
       "      <td>0.184</td>\n",
       "      <td>-81.555</td>\n",
       "      <td>-1.690</td>\n",
       "      <td>0.054</td>\n",
       "      <td>-31.301</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>changer</td>\n",
       "      <td>1.001</td>\n",
       "      <td>0.113</td>\n",
       "      <td>0.001</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3.395</td>\n",
       "      <td>0.001</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>changem</td>\n",
       "      <td>0.999</td>\n",
       "      <td>-0.146</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-7.089</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>revenue</td>\n",
       "      <td>0.999</td>\n",
       "      <td>-0.052</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-1.571</td>\n",
       "      <td>0.116</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>mou</td>\n",
       "      <td>1.000</td>\n",
       "      <td>-0.035</td>\n",
       "      <td>-0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-10.826</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>overage</td>\n",
       "      <td>1.004</td>\n",
       "      <td>0.428</td>\n",
       "      <td>0.004</td>\n",
       "      <td>0.000</td>\n",
       "      <td>25.709</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>roam</td>\n",
       "      <td>1.008</td>\n",
       "      <td>0.795</td>\n",
       "      <td>0.008</td>\n",
       "      <td>0.001</td>\n",
       "      <td>6.721</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>conference</td>\n",
       "      <td>0.984</td>\n",
       "      <td>-1.649</td>\n",
       "      <td>-0.017</td>\n",
       "      <td>0.010</td>\n",
       "      <td>-1.612</td>\n",
       "      <td>0.107</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>months</td>\n",
       "      <td>0.982</td>\n",
       "      <td>-1.757</td>\n",
       "      <td>-0.018</td>\n",
       "      <td>0.001</td>\n",
       "      <td>-15.489</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>uniqsubs</td>\n",
       "      <td>1.037</td>\n",
       "      <td>3.745</td>\n",
       "      <td>0.037</td>\n",
       "      <td>0.010</td>\n",
       "      <td>3.804</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>custcare</td>\n",
       "      <td>0.997</td>\n",
       "      <td>-0.291</td>\n",
       "      <td>-0.003</td>\n",
       "      <td>0.003</td>\n",
       "      <td>-1.137</td>\n",
       "      <td>0.256</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>retcalls</td>\n",
       "      <td>1.805</td>\n",
       "      <td>80.503</td>\n",
       "      <td>0.591</td>\n",
       "      <td>0.033</td>\n",
       "      <td>17.783</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>dropvce</td>\n",
       "      <td>1.014</td>\n",
       "      <td>1.428</td>\n",
       "      <td>0.014</td>\n",
       "      <td>0.003</td>\n",
       "      <td>5.635</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>eqpdays</td>\n",
       "      <td>1.001</td>\n",
       "      <td>0.136</td>\n",
       "      <td>0.001</td>\n",
       "      <td>0.000</td>\n",
       "      <td>27.235</td>\n",
       "      <td>0.000</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         index     OR     OR%  coefficient  std.error  \\\n",
       "1                refurb[T.yes]  1.318  31.831        0.276      0.025   \n",
       "2            smartphone[T.yes]  0.913  -8.700       -0.091      0.030   \n",
       "3           highcreditr[T.yes]  0.483 -51.663       -0.727      0.031   \n",
       "4                mcycle[T.yes]  0.883 -11.744       -0.125      0.029   \n",
       "5                   car[T.yes]  0.991  -0.924       -0.009      0.038   \n",
       "6                travel[T.yes]  0.781 -21.887       -0.247      0.039   \n",
       "7                 region[T.NE]  0.644 -35.608       -0.440      0.026   \n",
       "8                 region[T.NW]  0.660 -34.020       -0.416      0.026   \n",
       "9                 region[T.SE]  0.651 -34.949       -0.430      0.026   \n",
       "10                region[T.SW]  0.627 -37.311       -0.467      0.026   \n",
       "11  occupation[T.professional]  1.416  41.561        0.348      0.022   \n",
       "12       occupation[T.student]  1.900  89.956        0.642      0.030   \n",
       "13       occupation[T.retired]  0.184 -81.555       -1.690      0.054   \n",
       "14                     changer  1.001   0.113        0.001      0.000   \n",
       "15                     changem  0.999  -0.146       -0.001      0.000   \n",
       "16                     revenue  0.999  -0.052       -0.001      0.000   \n",
       "17                         mou  1.000  -0.035       -0.000      0.000   \n",
       "18                     overage  1.004   0.428        0.004      0.000   \n",
       "19                        roam  1.008   0.795        0.008      0.001   \n",
       "20                  conference  0.984  -1.649       -0.017      0.010   \n",
       "21                      months  0.982  -1.757       -0.018      0.001   \n",
       "22                    uniqsubs  1.037   3.745        0.037      0.010   \n",
       "23                    custcare  0.997  -0.291       -0.003      0.003   \n",
       "24                    retcalls  1.805  80.503        0.591      0.033   \n",
       "25                     dropvce  1.014   1.428        0.014      0.003   \n",
       "26                     eqpdays  1.001   0.136        0.001      0.000   \n",
       "\n",
       "    z.value  p.value       \n",
       "1    11.018    0.000  ***  \n",
       "2    -3.043    0.002   **  \n",
       "3   -23.696    0.000  ***  \n",
       "4    -4.329    0.000  ***  \n",
       "5    -0.241    0.809       \n",
       "6    -6.278    0.000  ***  \n",
       "7   -16.635    0.000  ***  \n",
       "8   -15.868    0.000  ***  \n",
       "9   -16.420    0.000  ***  \n",
       "10  -17.667    0.000  ***  \n",
       "11   15.970    0.000  ***  \n",
       "12   21.045    0.000  ***  \n",
       "13  -31.301    0.000  ***  \n",
       "14    3.395    0.001  ***  \n",
       "15   -7.089    0.000  ***  \n",
       "16   -1.571    0.116       \n",
       "17  -10.826    0.000  ***  \n",
       "18   25.709    0.000  ***  \n",
       "19    6.721    0.000  ***  \n",
       "20   -1.612    0.107       \n",
       "21  -15.489    0.000  ***  \n",
       "22    3.804    0.000  ***  \n",
       "23   -1.137    0.256       \n",
       "24   17.783    0.000  ***  \n",
       "25    5.635    0.000  ***  \n",
       "26   27.235    0.000  ***  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrw.coef[1:].round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer</th>\n",
       "      <th>churn</th>\n",
       "      <th>changer</th>\n",
       "      <th>changem</th>\n",
       "      <th>revenue</th>\n",
       "      <th>mou</th>\n",
       "      <th>overage</th>\n",
       "      <th>roam</th>\n",
       "      <th>conference</th>\n",
       "      <th>months</th>\n",
       "      <th>...</th>\n",
       "      <th>highcreditr</th>\n",
       "      <th>mcycle</th>\n",
       "      <th>car</th>\n",
       "      <th>travel</th>\n",
       "      <th>region</th>\n",
       "      <th>occupation</th>\n",
       "      <th>training</th>\n",
       "      <th>representative</th>\n",
       "      <th>churn_yes</th>\n",
       "      <th>cweight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>U86940794</td>\n",
       "      <td>yes</td>\n",
       "      <td>109</td>\n",
       "      <td>81</td>\n",
       "      <td>62</td>\n",
       "      <td>600</td>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>CS</td>\n",
       "      <td>other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>U56788559</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>54</td>\n",
       "      <td>146</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>U47928407</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>-9</td>\n",
       "      <td>39</td>\n",
       "      <td>1158</td>\n",
       "      <td>96</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>NW</td>\n",
       "      <td>professional</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>U75794640</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>-8</td>\n",
       "      <td>35</td>\n",
       "      <td>560</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>...</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>NW</td>\n",
       "      <td>retired</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>U41010771</td>\n",
       "      <td>no</td>\n",
       "      <td>-2</td>\n",
       "      <td>-8</td>\n",
       "      <td>100</td>\n",
       "      <td>1888</td>\n",
       "      <td>112</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>SW</td>\n",
       "      <td>other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68995</th>\n",
       "      <td>U97081813</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>-15</td>\n",
       "      <td>33</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>SW</td>\n",
       "      <td>other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68996</th>\n",
       "      <td>U24071089</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>95</td>\n",
       "      <td>30</td>\n",
       "      <td>78</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>other</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68997</th>\n",
       "      <td>U52895026</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>43</td>\n",
       "      <td>250</td>\n",
       "      <td>53</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>CS</td>\n",
       "      <td>student</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68998</th>\n",
       "      <td>U69840472</td>\n",
       "      <td>yes</td>\n",
       "      <td>-3</td>\n",
       "      <td>-29</td>\n",
       "      <td>41</td>\n",
       "      <td>288</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>CS</td>\n",
       "      <td>other</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68999</th>\n",
       "      <td>U80219178</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>55</td>\n",
       "      <td>698</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SW</td>\n",
       "      <td>other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>69000 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        customer churn  changer  changem  revenue   mou  overage  roam  \\\n",
       "0      U86940794   yes      109       81       62   600      141     0   \n",
       "1      U56788559    no        0        3       54   146        0     0   \n",
       "2      U47928407    no        0       -9       39  1158       96     0   \n",
       "3      U75794640    no        0       -8       35   560        0     0   \n",
       "4      U41010771    no       -2       -8      100  1888      112     9   \n",
       "...          ...   ...      ...      ...      ...   ...      ...   ...   \n",
       "68995  U97081813    no        0      -15       33    49        0     0   \n",
       "68996  U24071089    no        0       95       30    78        0     0   \n",
       "68997  U52895026   yes        0        5       43   250       53     0   \n",
       "68998  U69840472   yes       -3      -29       41   288        0     0   \n",
       "68999  U80219178    no        1       58       55   698        0     0   \n",
       "\n",
       "       conference  months  ...  highcreditr  mcycle  car  travel  region  \\\n",
       "0               0       8  ...           no      no   no      no      CS   \n",
       "1               0       8  ...          yes      no   no      no      SE   \n",
       "2               1       9  ...           no     yes   no     yes      NW   \n",
       "3               0      37  ...          yes     yes   no      no      NW   \n",
       "4               0      20  ...           no     yes  yes      no      SW   \n",
       "...           ...     ...  ...          ...     ...  ...     ...     ...   \n",
       "68995           0      19  ...           no     yes  yes      no      SW   \n",
       "68996           0      18  ...           no     yes  yes      no      SE   \n",
       "68997           0      25  ...           no      no   no      no      CS   \n",
       "68998           0      19  ...           no      no   no      no      CS   \n",
       "68999           1       7  ...           no      no   no      no      SW   \n",
       "\n",
       "         occupation training representative churn_yes cweight  \n",
       "0             other      0.0              0         1       1  \n",
       "1             other      0.0              0         0      49  \n",
       "2      professional      NaN              1         0      49  \n",
       "3           retired      1.0              0         0      49  \n",
       "4             other      NaN              1         0      49  \n",
       "...             ...      ...            ...       ...     ...  \n",
       "68995         other      NaN              1         0      49  \n",
       "68996         other      1.0              0         0      49  \n",
       "68997       student      0.0              0         1       1  \n",
       "68998         other      1.0              0         1       1  \n",
       "68999         other      NaN              1         0      49  \n",
       "\n",
       "[69000 rows x 27 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "s_mobile['pred'] = lrw.predict(s_mobile)['prediction']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.11/site-packages/seaborn/_base.py:948: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.11/site-packages/seaborn/_base.py:948: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dct = {\"train\": s_mobile[s_mobile['training'] == 1], \"test\": s_mobile[s_mobile['training'] == 0]}\n",
    "\n",
    "fig1 = rsm.gains_plot(dct, \"churn\", \"yes\", \"pred\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "import xgboost as xgb\n",
    "import pyrsm as rsm\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import roc_auc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer</th>\n",
       "      <th>churn</th>\n",
       "      <th>changer</th>\n",
       "      <th>changem</th>\n",
       "      <th>revenue</th>\n",
       "      <th>mou</th>\n",
       "      <th>overage</th>\n",
       "      <th>roam</th>\n",
       "      <th>conference</th>\n",
       "      <th>months</th>\n",
       "      <th>...</th>\n",
       "      <th>refurb</th>\n",
       "      <th>smartphone</th>\n",
       "      <th>highcreditr</th>\n",
       "      <th>mcycle</th>\n",
       "      <th>car</th>\n",
       "      <th>travel</th>\n",
       "      <th>region</th>\n",
       "      <th>occupation</th>\n",
       "      <th>training</th>\n",
       "      <th>representative</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>U88927415</td>\n",
       "      <td>no</td>\n",
       "      <td>-1</td>\n",
       "      <td>-8</td>\n",
       "      <td>31</td>\n",
       "      <td>118</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SW</td>\n",
       "      <td>other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>U94655060</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>87</td>\n",
       "      <td>412</td>\n",
       "      <td>104</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>CS</td>\n",
       "      <td>student</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>U22910834</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>138</td>\n",
       "      <td>1252</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>student</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>U55939985</td>\n",
       "      <td>no</td>\n",
       "      <td>-1</td>\n",
       "      <td>-15</td>\n",
       "      <td>58</td>\n",
       "      <td>69</td>\n",
       "      <td>42</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>NE</td>\n",
       "      <td>other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>U74897690</td>\n",
       "      <td>no</td>\n",
       "      <td>-9</td>\n",
       "      <td>-20</td>\n",
       "      <td>117</td>\n",
       "      <td>1002</td>\n",
       "      <td>175</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>other</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    customer churn  changer  changem  revenue   mou  overage  roam  \\\n",
       "0  U88927415    no       -1       -8       31   118        1     0   \n",
       "1  U94655060    no        0       -2       87   412      104     0   \n",
       "2  U22910834    no        1       23      138  1252        0     3   \n",
       "3  U55939985    no       -1      -15       58    69       42     3   \n",
       "4  U74897690    no       -9      -20      117  1002      175     4   \n",
       "\n",
       "   conference  months  ...  refurb  smartphone  highcreditr  mcycle  car  \\\n",
       "0           0      38  ...      no         yes           no      no   no   \n",
       "1           0      10  ...      no         yes           no      no   no   \n",
       "2           0      19  ...      no         yes           no      no   no   \n",
       "3           0       8  ...      no         yes          yes      no   no   \n",
       "4           0      11  ...     yes         yes           no      no   no   \n",
       "\n",
       "  travel region occupation training representative  \n",
       "0     no     SW      other      0.0              0  \n",
       "1    yes     CS    student      1.0              0  \n",
       "2     no     SE    student      1.0              0  \n",
       "3     no     NE      other      NaN              1  \n",
       "4     no     SE      other      1.0              0  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_1M.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1005000, 25)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_1M.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer</th>\n",
       "      <th>churn</th>\n",
       "      <th>changer</th>\n",
       "      <th>changem</th>\n",
       "      <th>revenue</th>\n",
       "      <th>mou</th>\n",
       "      <th>overage</th>\n",
       "      <th>roam</th>\n",
       "      <th>conference</th>\n",
       "      <th>months</th>\n",
       "      <th>...</th>\n",
       "      <th>refurb</th>\n",
       "      <th>smartphone</th>\n",
       "      <th>highcreditr</th>\n",
       "      <th>mcycle</th>\n",
       "      <th>car</th>\n",
       "      <th>travel</th>\n",
       "      <th>region</th>\n",
       "      <th>occupation</th>\n",
       "      <th>training</th>\n",
       "      <th>representative</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>U88927415</td>\n",
       "      <td>no</td>\n",
       "      <td>-1</td>\n",
       "      <td>-8</td>\n",
       "      <td>31</td>\n",
       "      <td>118</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SW</td>\n",
       "      <td>other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>U94655060</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>87</td>\n",
       "      <td>412</td>\n",
       "      <td>104</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>CS</td>\n",
       "      <td>student</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>U22910834</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>138</td>\n",
       "      <td>1252</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>student</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>U55939985</td>\n",
       "      <td>no</td>\n",
       "      <td>-1</td>\n",
       "      <td>-15</td>\n",
       "      <td>58</td>\n",
       "      <td>69</td>\n",
       "      <td>42</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>NE</td>\n",
       "      <td>other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>U74897690</td>\n",
       "      <td>no</td>\n",
       "      <td>-9</td>\n",
       "      <td>-20</td>\n",
       "      <td>117</td>\n",
       "      <td>1002</td>\n",
       "      <td>175</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>other</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004995</th>\n",
       "      <td>U63357590</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>54</td>\n",
       "      <td>778</td>\n",
       "      <td>115</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>NW</td>\n",
       "      <td>other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004996</th>\n",
       "      <td>U10548621</td>\n",
       "      <td>no</td>\n",
       "      <td>-5</td>\n",
       "      <td>-20</td>\n",
       "      <td>31</td>\n",
       "      <td>176</td>\n",
       "      <td>40</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>CS</td>\n",
       "      <td>retired</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004997</th>\n",
       "      <td>U61718563</td>\n",
       "      <td>no</td>\n",
       "      <td>-3</td>\n",
       "      <td>-2</td>\n",
       "      <td>45</td>\n",
       "      <td>1731</td>\n",
       "      <td>105</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SW</td>\n",
       "      <td>other</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004998</th>\n",
       "      <td>U79998923</td>\n",
       "      <td>no</td>\n",
       "      <td>73</td>\n",
       "      <td>46</td>\n",
       "      <td>108</td>\n",
       "      <td>1156</td>\n",
       "      <td>144</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>CS</td>\n",
       "      <td>other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004999</th>\n",
       "      <td>U33767570</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>-28</td>\n",
       "      <td>60</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>SE</td>\n",
       "      <td>other</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1005000 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          customer churn  changer  changem  revenue   mou  overage  roam  \\\n",
       "0        U88927415    no       -1       -8       31   118        1     0   \n",
       "1        U94655060    no        0       -2       87   412      104     0   \n",
       "2        U22910834    no        1       23      138  1252        0     3   \n",
       "3        U55939985    no       -1      -15       58    69       42     3   \n",
       "4        U74897690    no       -9      -20      117  1002      175     4   \n",
       "...            ...   ...      ...      ...      ...   ...      ...   ...   \n",
       "1004995  U63357590    no        2       34       54   778      115     1   \n",
       "1004996  U10548621    no       -5      -20       31   176       40     3   \n",
       "1004997  U61718563    no       -3       -2       45  1731      105     0   \n",
       "1004998  U79998923    no       73       46      108  1156      144    18   \n",
       "1004999  U33767570    no        0      -28       60    44        0     0   \n",
       "\n",
       "         conference  months  ...  refurb  smartphone  highcreditr  mcycle  \\\n",
       "0                 0      38  ...      no         yes           no      no   \n",
       "1                 0      10  ...      no         yes           no      no   \n",
       "2                 0      19  ...      no         yes           no      no   \n",
       "3                 0       8  ...      no         yes          yes      no   \n",
       "4                 0      11  ...     yes         yes           no      no   \n",
       "...             ...     ...  ...     ...         ...          ...     ...   \n",
       "1004995           1       7  ...      no         yes           no      no   \n",
       "1004996           0      35  ...      no          no           no      no   \n",
       "1004997           0      30  ...      no         yes           no      no   \n",
       "1004998           0      18  ...      no         yes           no      no   \n",
       "1004999           0      15  ...      no         yes           no     yes   \n",
       "\n",
       "         car travel region occupation training representative  \n",
       "0         no     no     SW      other      0.0              0  \n",
       "1         no    yes     CS    student      1.0              0  \n",
       "2         no     no     SE    student      1.0              0  \n",
       "3         no     no     NE      other      NaN              1  \n",
       "4         no     no     SE      other      1.0              0  \n",
       "...      ...    ...    ...        ...      ...            ...  \n",
       "1004995   no     no     NW      other      0.0              0  \n",
       "1004996   no     no     CS    retired      1.0              0  \n",
       "1004997   no     no     SW      other      1.0              0  \n",
       "1004998   no     no     CS      other      0.0              0  \n",
       "1004999   no     no     SE      other      1.0              0  \n",
       "\n",
       "[1005000 rows x 25 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_1M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "s_mobile_1M_train = s_mobile_1M.query(\"training == 1\")\n",
    "s_mobile_1M_test = s_mobile_1M.query(\"training == 0\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['customer', 'churn', 'changer', 'changem', 'revenue', 'mou', 'overage',\n",
       "       'roam', 'conference', 'months', 'uniqsubs', 'custcare', 'retcalls',\n",
       "       'dropvce', 'eqpdays', 'refurb', 'smartphone', 'highcreditr', 'mcycle',\n",
       "       'car', 'travel', 'region', 'occupation', 'training', 'representative'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_1M_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, y_train= s_mobile_1M_train.loc[:, \"changer\":\"occupation\"], s_mobile_1M_train.loc[:, \"churn\"].map({'yes': 1, 'no': 0}).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test, y_test= s_mobile_1M_test.loc[:, \"changer\":\"occupation\"], s_mobile_1M_test.loc[:, \"churn\"].map({'yes': 1, 'no': 0}).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# param_grid = {\n",
    "#      'max_depth': [3],\n",
    "#      'n_estimators': [50, 100, 200],\n",
    "#      'subsample': [0.5, 1],\n",
    "#      'alpha': [0.5, 1],\n",
    "#  }\n",
    "# model_xgb = xgb.XGBClassifier(objective='binary:logistic', seed=123,enable_categorical=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# grid_search_xgb = GridSearchCV(estimator=model_xgb, param_grid=param_grid, scoring='roc_auc', cv=5, verbose=5)\n",
    "# grid_search_xgb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(\"Best Parameters:\", grid_search_xgb.best_params_)\n",
    "# print(\"Best Score:\", grid_search_xgb.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = xgb.XGBClassifier(random_state=42,\n",
    "                        objective='binary:logistic',\n",
    "                        seed=123,\n",
    "                        enable_categorical=True,\n",
    "                        alpha = 1,\n",
    "                        max_depth = 2,\n",
    "                        n_estimators = 300,\n",
    "                        subsample = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(alpha=1, base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=True, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=2, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(alpha=1, base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=True, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=2, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(alpha=1, base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=True, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=2, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
       "              num_parallel_tree=None, ...)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "s_mobile_1M['pred_xgb'] = model.predict_proba(s_mobile_1M.loc[:, \"changer\":\"occupation\"])[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "s_mobile['pred_xgb'] = model.predict_proba(s_mobile.loc[:, \"changer\":\"occupation\"])[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC of the xgb model in the test set: 0.7649301882488696\n"
     ]
    }
   ],
   "source": [
    "y_true = s_mobile_1M[s_mobile_1M['training'] == 0]['churn'].map({'yes': 1, 'no': 0}).astype(int)\n",
    "y_pred = s_mobile_1M[s_mobile_1M['training'] == 0]['pred_xgb']\n",
    "\n",
    "# Calculate the AUC\n",
    "auc_xg_test = roc_auc_score(y_true, y_pred)\n",
    "print(f\"AUC of the xgb model in the test set: {auc_xg_test}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC of the xgb model in the train set: 0.7812873644857049\n"
     ]
    }
   ],
   "source": [
    "# Extract the true labels and predicted probabilities from the test set\n",
    "y_true = s_mobile_1M[s_mobile_1M['training'] == 1]['churn'].map({'yes': 1, 'no': 0}).astype(int)\n",
    "y_pred = s_mobile_1M[s_mobile_1M['training'] == 1]['pred_xgb']\n",
    "\n",
    "# Calculate the AUC\n",
    "auc_xg_train = roc_auc_score(y_true, y_pred)\n",
    "print(f\"AUC of the xgb model in the train set: {auc_xg_train}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC of the xgb model in the test sample set: 0.7649263496237855\n"
     ]
    }
   ],
   "source": [
    "y_true = s_mobile[s_mobile['training'] == 0]['churn'].map({'yes': 1, 'no': 0}).astype(int)\n",
    "y_pred = s_mobile[s_mobile['training'] == 0]['pred_xgb']\n",
    "\n",
    "# Calculate the AUC\n",
    "auc_xg_test = roc_auc_score(y_true, y_pred)\n",
    "print(f\"AUC of the xgb model in the test sample set: {auc_xg_test}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.11/site-packages/seaborn/_base.py:948: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.11/site-packages/seaborn/_base.py:948: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## gain chart\n",
    "dct = {\"train\": s_mobile_1M[s_mobile_1M['training'] == 1], \"test\": s_mobile_1M[s_mobile_1M['training'] == 0]}\n",
    "fig1 = rsm.gains_plot(dct, \"churn\", \"yes\", \"pred_xgb\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((69000, 25), (1005000, 25))"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_rf = pd.read_parquet(\"data/s_mobile.parquet\")\n",
    "s_mobile_rf_1M = pd.read_parquet(\"https://www.dropbox.com/scl/fi/upm68ytk5r7oz2xd61qau/s_mobile_1M.parquet?rlkey=0pap46l024yryr4h08mvexiha&dl=1\")\n",
    "s_mobile_rf.shape, s_mobile_rf_1M.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['changer',\n",
       " 'changem',\n",
       " 'revenue',\n",
       " 'mou',\n",
       " 'overage',\n",
       " 'roam',\n",
       " 'conference',\n",
       " 'months',\n",
       " 'uniqsubs',\n",
       " 'custcare',\n",
       " 'retcalls',\n",
       " 'dropvce',\n",
       " 'eqpdays',\n",
       " 'refurb',\n",
       " 'smartphone',\n",
       " 'highcreditr',\n",
       " 'mcycle',\n",
       " 'car',\n",
       " 'travel',\n",
       " 'region',\n",
       " 'occupation']"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "evar_rf = s_mobile_rf.drop(columns=['customer','churn','training','representative']).columns.tolist()\n",
    "evar_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((27300, 25), (11700, 25))"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use s_mobil\n",
    "train_rf = s_mobile_rf[s_mobile_rf['training'] == 1]\n",
    "test_rf = s_mobile_rf[s_mobile_rf['training'] == 0]\n",
    "train_rf.shape, test_rf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest\n",
      "Data                 : train_rf\n",
      "Response variable    : churn\n",
      "Level                : yes\n",
      "Explanatory variables: changer, changem, revenue, mou, overage, roam, conference, months, uniqsubs, custcare, retcalls, dropvce, eqpdays, refurb, smartphone, highcreditr, mcycle, car, travel, region, occupation\n",
      "OOB                  : True\n",
      "Model type           : classification\n",
      "Nr. of features      : (21, 28)\n",
      "Nr. of observations  : 27,300\n",
      "max_features         : sqrt (5)\n",
      "n_estimators         : 100\n",
      "min_samples_leaf     : 1\n",
      "random_state         : 1234\n",
      "AUC                  : 0.716\n",
      "\n",
      "Estimation data      :\n",
      " changer  changem  revenue  mou  overage  roam  conference  months  uniqsubs  custcare  retcalls  dropvce  eqpdays  refurb_yes  smartphone_yes  highcreditr_yes  mcycle_yes  car_yes  travel_yes  region_CS  region_NE  region_NW  region_SE  region_SW  occupation_other  occupation_professional  occupation_student  occupation_retired\n",
      "       0       -8       35  560        0     0           0      37         1         0       0.0        0    587.0       False            True             True        True    False       False      False      False       True      False      False             False                    False               False                True\n",
      "      11       37       72 1043      128     0           0      21         1        10       0.0        2    747.0       False            True            False       False    False       False      False      False       True      False      False              True                    False               False               False\n",
      "       0      -11       10    2        0     0           0      50         3         0       0.0        0   1535.0       False           False            False       False    False       False       True      False      False      False      False              True                    False               False               False\n",
      "       1       -5       54  431       74     0           0      11         2         4       0.0        8    471.0       False            True            False       False    False       False       True      False      False      False      False              True                    False               False               False\n",
      "      -5      -13       15  106        0     3           0      15         2         0       0.0        2    587.0       False            True            False       False    False       False      False      False      False      False       True              True                    False               False               False\n"
     ]
    }
   ],
   "source": [
    "rf_1 = rsm.model.rforest(\n",
    "    data={\"train_rf\":train_rf},\n",
    "    rvar=\"churn\",\n",
    "    lev=\"yes\",\n",
    "    evar=evar_rf\n",
    ")\n",
    "rf_1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# s_mobil \n",
    "X_train = train_rf[evar_rf]\n",
    "y_train = train_rf['churn']\n",
    "\n",
    "X_train_encoded = pd.get_dummies(evar_rf)\n",
    "y_train = y_train.map({'yes': 1, 'no': 0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.model_selection import GridSearchCV\n",
    "# from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# param_grid = {\n",
    "#     'n_estimators': [200, 300, 400, 500],\n",
    "#     'min_samples_leaf': [1, 2, 4],\n",
    "#     'max_features': ['sqrt', 'log2', None],\n",
    "# }\n",
    "\n",
    "\n",
    "# rf = RandomForestClassifier(random_state=1234, oob_score=True)\n",
    "\n",
    "\n",
    "# scorer = make_scorer(accuracy_score)\n",
    "\n",
    "\n",
    "# grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, scoring=scorer, cv=5, verbose=2)\n",
    "\n",
    "\n",
    "# grid_search.fit(X_train_encoded, y_train)\n",
    "\n",
    "\n",
    "# print(f\"Best parameters: {grid_search.best_params_}\")\n",
    "# print(f\"Best score: {grid_search.best_score_}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest\n",
      "Data                 : train_rf\n",
      "Response variable    : churn\n",
      "Level                : yes\n",
      "Explanatory variables: changer, changem, revenue, mou, overage, roam, conference, months, uniqsubs, custcare, retcalls, dropvce, eqpdays, refurb, smartphone, highcreditr, mcycle, car, travel, region, occupation\n",
      "OOB                  : True\n",
      "Model type           : classification\n",
      "Nr. of features      : (21, 28)\n",
      "Nr. of observations  : 27,300\n",
      "max_features         : sqrt (5)\n",
      "n_estimators         : 400\n",
      "min_samples_leaf     : 4\n",
      "random_state         : 1234\n",
      "AUC                  : 0.735\n",
      "\n",
      "Estimation data      :\n",
      " changer  changem  revenue  mou  overage  roam  conference  months  uniqsubs  custcare  retcalls  dropvce  eqpdays  refurb_yes  smartphone_yes  highcreditr_yes  mcycle_yes  car_yes  travel_yes  region_CS  region_NE  region_NW  region_SE  region_SW  occupation_other  occupation_professional  occupation_student  occupation_retired\n",
      "       0       -8       35  560        0     0           0      37         1         0       0.0        0    587.0       False            True             True        True    False       False      False      False       True      False      False             False                    False               False                True\n",
      "      11       37       72 1043      128     0           0      21         1        10       0.0        2    747.0       False            True            False       False    False       False      False      False       True      False      False              True                    False               False               False\n",
      "       0      -11       10    2        0     0           0      50         3         0       0.0        0   1535.0       False           False            False       False    False       False       True      False      False      False      False              True                    False               False               False\n",
      "       1       -5       54  431       74     0           0      11         2         4       0.0        8    471.0       False            True            False       False    False       False       True      False      False      False      False              True                    False               False               False\n",
      "      -5      -13       15  106        0     3           0      15         2         0       0.0        2    587.0       False            True            False       False    False       False      False      False      False      False       True              True                    False               False               False\n"
     ]
    }
   ],
   "source": [
    "# use s_mobil dataset:\n",
    "rf_2 = rsm.model.rforest(\n",
    "    data={\"train_rf\":train_rf},\n",
    "    rvar=\"churn\",\n",
    "    lev=\"yes\",\n",
    "    evar=evar_rf,\n",
    "    max_features = 'sqrt',\n",
    "    min_samples_leaf = 4,\n",
    "    n_estimators = 400\n",
    ")\n",
    "rf_2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.11/site-packages/seaborn/_base.py:948: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.11/site-packages/seaborn/_base.py:948: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkkAAAGwCAYAAAC99fF4AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8g+/7EAAAACXBIWXMAAA9hAAAPYQGoP6dpAACm70lEQVR4nOzdd3xN9xvA8c/Nzd6EJEJIECP2XrVqlqJaRVUVtYqSmvVDq61SWqXTaou21KhR1Spq1t5EECu2CJG97jq/Pw4hFSTc5N4kz/v1yis54577XJJ7nvsdz1ejKIqCEEIIIYTIwMbSAQghhBBCWCNJkoQQQgghMiFJkhBCCCFEJiRJEkIIIYTIhCRJQgghhBCZkCRJCCGEECITkiQJIYQQQmTC1tIB5FUmk4nr16/j5uaGRqOxdDhCCCGEyAJFUUhISMDPzw8bm8e3FUmS9JSuX7+Ov7+/pcMQQgghxFO4cuUKJUqUeOw5kiQ9JTc3N0D9R3Z3d7dwNEIIIYTIivj4ePz9/dPv448jSdJTutfF5u7uLkmSEEIIkcdkZaiMDNwWQgghhMiEJElCCCGEEJmQJEkIIYQQIhMyJimHGY1G9Hq9pcMQeZCdnR1ardbSYQghRIElSVIOURSFyMhIYmNjLR2KyMM8PT3x9fWVWlxCCGEBkiTlkHsJkre3N87OznKTE9miKArJyclERUUBUKxYMQtHJIQQBY8kSTnAaDSmJ0heXl6WDkfkUU5OTgBERUXh7e0tXW9CCJHLZOB2Drg3BsnZ2dnCkYi87t7vkIxrE0KI3CdJUg6SLjbxrOR3SAghLEeSJCGEEEKITFg0SdqxYwcdOnTAz88PjUbDmjVrMhxXFIVJkybh5+eHk5MTzZo1IywsLMM5aWlpvPPOOxQpUgQXFxc6duzI1atXMxx/4403cHd3p3z58mzZsiXD46dPn84777yTY69RCCFE/pCiM6AzmIhOTENnMJGsM1g6pCfKizEb05JQjDqUxFsoRh3GtCSLxWLRJCkpKYlq1arxzTffZHp8+vTpfPHFF3zzzTccOHAAX19fWrVqRUJCQvo5ISEhrF69mqVLl7Jz504SExN58cUXMRqNAMybN49Dhw6xZ88e+vfvz2uvvYaiKABERETw/fff88knn+T8ixUPCQgIYNasWc90jV27dlGlShXs7Ox46aWXHnleeHg4vr6+GX53zGnSpElUr149W4+pU6cOq1atypF4hBDmlaY3Mmf7BWp/solak/+h9iebmLv9Aml6o6VDe6S8GLOiT0Wz60s0nwWh+bys+n33lyj6VIvEo1HuZQwWptFoWL16dfqNTlEU/Pz8CAkJYezYsYDaKuTj48O0adMYOHAgcXFxFC1alJ9//plu3boBcP36dfz9/fnrr79o06YNgwcPxt3dnU8//ZSUlBScnZ2JioqiaNGitG3bloEDB9K5c+dsxxsfH4+HhwdxcXEPLXCbmppKREQEgYGBODo6PvW/SYrOgNbGhoRUPW6OdhhMJpzt88+ExICAAEJCQggJCXnqa9SrV49y5coxdepUXF1d8fT0zPS8Ll26UK1aNSZOnAjAwoULCQkJMVsdq8TERNLS0rI1m3Ht2rWMGjWK06dPY2OT+ecVc/0uCSGeXorOwJztF/hy89mHjg1vEcTApqVz9b1ZURRMChhNCiZFQVHAqKg/m0zqMa2Nhh93Rjwy5t4NA0iyslYlH0cT2j1fYbNj2kPHTE3HojQcjtbB5Zmf53H37/+y2jtuREQEkZGRtG7dOn2fg4MDTZs2Zffu3QwcOJBDhw6h1+sznOPn50flypXZvXs3bdq0oVq1avz888+kpKSwYcMGihUrRpEiRfjll19wdHTMcoKUlpZGWlpa+nZ8fLz5Xmxmz3f3E8CC3RHEpxhwd7KlT8NABjcrg4Od9UwF1+l02Nvb5/rz6vV67OzsOH/+PIMGDaJEiRKPPPfq1ausXbv2qVqtsvr6XF1dcXV1zda127dvT//+/dmwYQMvvPBCtmMTIi+zlg+BBqOJpDQjCWl6EtMMJKUZSEg1kJhmIDHVgMFkokstfxbsjsj08Qt2RzCoaRn6LTpAXIoek0KGZOVxiUyG8xQl8+Tn7s8m5f5jntS0UdjFnp1jmz825oFNS9Pii13cSdI96z/hM3NAR/MiccwO6Y5m/1wAjigVcCSNihr1Ndjsm4vSZFSux2a1SVJkZCQAPj4+Gfb7+Phw6dKl9HPs7e0pVKjQQ+fce3zfvn05fvw4wcHBFClShOXLlxMTE8MHH3zA1q1bmTBhAkuXLqVMmTL8+OOPFC9ePNN4pk6dyocffvjUr0dRFFKy2MRpMinM/zfjJ4D4FEP6dv/GgdjYZG3Wk5OdNsszpJo1a0blypUB+OWXX9Bqtbz99tt8/PHH6dcICAigX79+nDt3Lr3lb9GiRezevZv33nuPAwcOUKRIETp37szUqVNxcVGz/qioKN566y3++ecffH19mTx5cpZiukej0TB79mzWr1/PP//8Q5cuXfjpp58A9f+4b9++LFiwgN69ez/02OXLl1OtWrX0RGrbtm306dMn/boAH3zwAZMmTXrk6xs7diyrV6/m6tWr+Pr68vrrr/P+++9jZ2cHqN1ta9as4ejRowD07t2b2NhYnnvuOWbMmIFOp6N79+7MmjUr/TFarZZ27drx66+/SpIkCpRn/RCoKAqpepOa2NxLaO4mNfd+vpfoJN3dn/Cf4/fOf9L7cnkfN5qW8yY+JfNWl/gUA9FJaVy5k0L4zZzpzs+uoq4ORCfqHhvznSQdxT0dSUrL3dYkDxKpqLlIBS4RrImgguYSZbiGrXMFSGiOKSWOBbzMt7zGC/zLJ3ylPjA1FlLjwaVIrsZrtUnSPf+9wSuK8sSb/oPn2NnZ8e2332Y43rt3b4YNG8bRo0dZs2YNx44dY/r06QwbNoyVK1dmes1x48YxYsSI9O34+Hj8/f2z/DpS9EaC39/wxPOy+gnguWlbs/QJ4ORHbbL16WzRokW89dZb7Nu3j4MHDzJgwABKlSpF//7908/57LPPmDhxIhMmTAAgNDSUNm3a8PHHH/PDDz9w69Ythg4dytChQ1mwYAGg/ptfuXKFLVu2YG9vz7Bhw9KrSWfVBx98wNSpU5k5cyZarZZp06ZRvnx5PvroI7p164aHh0emj9uxYwe1a9dO327YsCGzZs3i/fffJzw8HCBDK9B/Xx+Am5sbCxcuxM/Pj9DQUPr374+bmxtjxox5ZLxbt26lWLFibN26lXPnztGtWzeqV6+e4d+ybt26TJ8+PVv/DkLkZZl1Xd37EKig0K5yMVYcuqq26DyY2PwnwTGazDtSxMHWBlcHW1wdbdXvDra4Odri4+5IUTcH3J1sM0063J1sKerqwKjW5TGYTGg0GrQ2Gmw0YKPRYHP3Z61Gg0Zz92ebjD/baO5+2XD/57uPV8+9f57m7rX++5h759loNGg1Ggwm5bExe7s58sc7jc36b5iBokDsZYg8DpGh6teN4xB/NfPzDToU16IkOfqyMrUlfVnFIJbdP+7oCY6P7xrLCVabJPn6+gJqa9GDSzJERUWlty75+vqi0+mIiYnJ0JoUFRVFw4YNM73uli1bOHnyJD/88AOjR4+mXbt2uLi40LVr10cOIAe1q8/BwcEcL+2xsvoJoKirQ440k/r7+zNz5kw0Gg3ly5cnNDSUmTNnZrixP//884wadb/Zs1evXvTo0SN9bFFQUBBfffUVTZs2Zfbs2Vy+fJn169ezd+9e6tWrB8APP/xAxYoVsxVbjx496Nu3b4Z9Go0GDw+P9N+XzFy8eJFatWqlb9vb2+Ph4YFGo8n0cf99fUCGhCkgIICRI0eybNmyxyZJhQoV4ptvvkGr1VKhQgXat2/P5s2bM/xbFi9enMuXL2MymR45LkmIvCpVb+TKnWQibidxMTqJqPg0RrYu/8gPgQt3X2RQ0zKsPnItS+9vGg242j+Q2DjeT25c7u53S99vd/e7Vv357nmuDra4ONhib/vov78UnYE+DQMzHd/Tp2EgRkWhVSWfTB5pOUaD8bExG0wm7M01d8ugg9vh9xOhe0lRWlzm5xcKAN8q4Fvt7vcqHLzjRLHYVIrV78Vv297FWZOW4SGmegNRDHq02twd3mG1SVJgYCC+vr5s2rSJGjVqAOr4kO3btzNtmjqoq1atWtjZ2bFp0ya6du0KwI0bNzhx4kSmn85TU1MZMmQIS5YsQavVYjQa02e66fX69BlxOcHJTsvJj9pk6VxbG5snfgJYPSTzJDCz582O+vXrZ2ipa9CgATNmzMBoNKYvi/FgqwzAoUOHOHfuHIsXL07fpygKJpOJiIgIzpw5g62tbYbHVahQ4ZGDrB/lv8+bVSkpKdka9JzZ8/z222/MmjWLc+fOkZiYiMFgeOKAv0qVKmVYSqRYsWKEhoZmOMfJyQmTyURaWlr6MiRC5CU6g4krMclcvJ2UngxdvK0mRtfjUjKMnynv48abDQMe+yEwLkXP4GZlSNUb7yY+duktOw8mQa4OtjjZabM89OBZONnbMrhZGQCrHyd6z4Mxrzl6FUdbW1INBl6qXuLZYk6Ng8gT9xOhyGMQdRpMmawKYGMH3hXBt6qaDBWrCj6VwPF+q7/RpPD9jovM2Xaang1KMuL5ETgC7JurdrE5emKqNxDNcyOwscv9ySsWTZISExM5d+5c+nZERARHjx6lcOHClCxZkpCQEKZMmUJQUBBBQUFMmTIFZ2dnevToAYCHhwdvvfUWI0eOxMvLi8KFCzNq1CiqVKlCy5YtH3q+jz76iPbt26cnXY0aNWL06NH06dOHb775hkaNGuXYa9VoNFnu9nrSpxZLz3K7N87oHpPJxMCBAxk2bNhD55YsWTK9S+tZq0f/93mzqkiRIsTExDz18+zdu5fu3bvz4Ycf0qZNGzw8PFi6dCkzZsx47HXujT26R6PRYDKZMuy7c+cOzs7OkiAJq2Ywmrgak0JEdBIXb6tfEdFqYnQtNuWxXV+uDrYEFHEmwMuF4GLueD+h68rLxYF+jUvn5Mt5Kg52WgY2Lc2Q5mUzDDa3xgTpHgc7LcOaFCfk+QBIiQMnD0wGPdqsxKwoEH/tgWTouNpKFHvpEU/mcT8Ruts6RJHyYPvolp/bCWn8b1UY+yNiGNg0kAFNA9HYaDA1HK4O0k6NB0d3FIPOIgkSWDhJOnjwIM2bN0/fvjfm580332ThwoWMGTOGlJQUBg8eTExMDPXq1WPjxo24ubmlP2bmzJnY2trStWtXUlJSaNGiBQsXLnxoMdATJ06wYsWK9IG1oE4L37ZtG40bN6Z8+fIsWbIkZ19wFlnyU8vevXsf2g4KCnrs4qo1a9YkLCyMsmXLZnq8YsWKGAwGDh48SN26dQG1bpG5pt8/SY0aNTh58mSGffb29lluOdy1axelSpVi/Pjx6fvuTR54VidOnKBmzZpmuZYouMwxU8xoUrgem3K3JSiJiNvJXIxWW4eu3EnG8JhEyMlOS0ARFwLvJkPqzy4EeLlQxNU+wwekrHwINFs3kJnd+zf1clWHXlhrnOkMqWh3f5mhVUZbbyA0HgG2DyQdRgNEn73bXXbsfmKUcifz63r430+E7rUSeZZU+z+zSG8w8cb3B9EZTMztVYN6pQunH0uf5n93kHZud7E9yKJJUrNmzXhcmSaNRsOkSZOYNGnSI89xdHTk66+/5uuvv37sc1WuXJmzZzP+UdrY2PDdd9/x3XffZSvu3GCpTy1XrlxhxIgRDBw4kMOHD/P1118/scVk7Nix1K9fnyFDhtC/f39cXFw4deoUmzZt4uuvv6Z8+fK0bduW/v37M2/ePGxtbQkJCcm11pM2bdrQr1+/DF2GAQEBJCYmsnnzZqpVq4azs/MjFyQuW7Ysly9fZunSpdSpU4c///yT1atXmyW2f//9N0MJCyGyKzszxUwmhcj41LstQRmTocvRyeiMpkc8izqwWU2AnNUk6IFkyNvNIcstxXmx6ypP0iXDrlmw/YGaQ6mx97erdIHd36gtRDdPgjHt4WtotFC0wgMJ0d0v58IPn5tFBqMJRQE7Wxv+1748wX5u6UmnNbLaMUnCMp9aevXqRUpKCnXr1kWr1fLOO+8wYMCAxz6matWqbN++nfHjx9O4cWMURaFMmTLpBT4BFixYQL9+/WjatCk+Pj5Mnjw5vbBjTmvXrh12dnb8888/tGmjjgtr2LAhgwYNolu3bkRHR6eXAMhMp06dePfddxk6dChpaWm0b9+eiRMnPjZ5z4pr166xe/dufvnll2e6jii4HjdTDKBTdT+WHbxyt4ssmUt3kkjVPzoRstfa4F/YKb0VKLDo/WTI193RbON/8mLXVZ6jtVVbkDKzby40Gg6n10FytLrP3vXhZKhoRTBjN1dUfBrv/XaCIB9XxrUvT+NyuTud/2lYTcXtvCY3Km7ntmbNmlG9evVnXirEGn333Xf8/vvvbNjw5DIMuWX06NHExcUxb968R56TV3+XRO7QGUzU/mTTI8f37B3X4qFyIbY2GvwLOxPg5ZyhWyywiAt+nk5oc2EgtMhhigKJUTCj3KPPeTcMTq0DN181ISoUCDk4w3bX2WjGrwrDVmvDtC6VqBVQ6MkPyiH5ouK2EOY0YMAAYmJiSEhIyDCmzZK8vb0fKjUgRFYoisKpyHgKOds/dqZYbLKetxoF4Oxgm95FVqKQE7ZaKx9LI55O7GU4thTC10PvdWptodTYh89z9ARXb6g/KMdDUhSFr/45z487L/FckBcfdw6msIvlxhhllyRJwuIWL17MwIEDMz1WqlQpwsLCnvk5bG1tMwy8tgajR4+2dAgiD1EUhbDr8fxx/Drrjt0gRW9k59jmj50pVsTVgSHPB1kgWpFrdElw6g84uhgidtzff/FfqDsAdmRSrLbeQHWwdi4MiNZoNCTpjIS0KsubDUvmSskGc5IkSaTbtm2bRZ63Y8eO6UUm/+u/0+iFKGjO3kzgj+M3WHfsOhduJ6Xvd7HXcuZmQp6dKSaegaLApd1wdAmcXAO6xPvHAptA9dchoAmUbqbOOHtgdhuZzW7LATvO3CYx1UC7qr78r335HH2unCRJkrA4Nzc3q+kCE8IaXIpOYt3xG/xx7DqnI++vB+Zga0OLit50qOpH8wreONppqeirjqmQmWIFQMwltTvt2BKIuXh/f6EANTGq1l2div+gRiHwQM0hjPocTZD0BhNfbT7PT7sv06ayN+2qPno1hLxAkiQhhLAC12NT+PP4DdYdv86xq/eXc7DTamharigdqvnRoqIPrg4Z37Zlplg+p0uCk2vV7rSL/97fb+8KlTpD9R5QssGjaxTZ3y1tcm9h2BzsYrsWk8LY305w6kYCo9oE0bNB1tc3tVaSJAkhhIXcSkjjr1A1MTpw8X5VeK2NhoZlvOhQ1Y82lXzxcH58t3OeK3IoHs9kgsv3utN+f6A7TXO/O63ii2D/dKsQ5JQpf4YTnahjYd9aVCmR+YLjeY0kSUIIkYtik3X8fSKSP45fZ8/5aO4VstZooE5AYTpU8+OFyr4UseICeyKHxFxUu9OOLsm4/EehwLvdad0e7k6zMJ3BRFR8GiUKO/F+xwo42Wlxd8o/Y0klSRJCiByWkKpn08mb/HHsOv+evZ1hiY/q/p50qOZH+yrF8PWQWlgFTloinFqrJkYZutPcoHJnNTnyr5etJT9yy5U7yYxZcYIUnZGVQ+rj457/fn8lSRJCiByQojOy+fRN1h27wZbwKHSG+5WuKxZzp0O1YnSo6od/4cyXwxH5mMkEl3bd707T35u1qIHSTdXEqMKL98cTWaGNYTf58PdTFHKxZ/qrlfNtEVJJkoTFBAQEEBISQkhIyFNfY9euXQwaNIjTp0/Tvn171qxZk+l54eHhNG3alLNnz+b6TLouXbrQsGHD9AWcRf6VZjCy48xt/jh2nX9O3SRZd38R5TJFXehQzY8Xq/pR1tvVglEKi7kTcX92Wuzl+/sLl1YHYFftDp7WP9j52y3nmbf9Im0qe/N+h4q4OubfVCL/vrL8QJesrr+TGgeOHmrxLyv+ZGEJI0aMoHr16qxfvx5X10ffeMaPH8+QIUPSE6SFCxcSEhJCbGys2WLZtm0bzZs3JyYmBk9Pz/T977//Ps2bN6dfv35PLIEv8h690cTu89H8cew6G8IiSUi9X9jRv7ATHaqqiVHFYm5ZXgRW5CNpiWpr0dElcGnn/f0O7ndnp70O/nWtsjvtUWoHFMLbzYEutYvn+99pSZKslSFVXcHZAkXAskOn02Fvn/sl5vV6PXZ2dpw/f55BgwZRokSJR5579epV1q5da7E16apWrUpAQACLFy/m7bfftkgMwryMJoX9EXf44/h1/j4RmWFtNF93R9pXLUaHan5UK+GR728iIhMmk5oQpXenJd89oFELPFZ/HSq0z1MfeteHRrL55C2mv1qZeqULU690YUuHlCtknmhuURS13kVWvtIS4N8vYPu0++vupMaq2/9+oR7P6rWysX5xs2bNGDp0KEOHDsXT0xMvLy8mTJjAg2sgBwQEMHnyZHr37o2Hhwf9+/cHYPfu3TRp0gQnJyf8/f0ZNmwYSUn3qwNHRUXRoUMHnJycCAwMZPHixdn659NoNMyZM4dOnTrh4uJCv3790Gg0REdH07dvXzQaDQsXLsz0scuXL6datWrpidS2bdvo06cPcXFxaDQaNBoNkyZNAtSkb8yYMRQvXhwXFxfq1auXoRL5pUuX6NChA4UKFcLFxYVKlSrx119/cfHiRZo3bw5AoUKF0Gg09O7dO/1xHTt25Ndff83WaxaWkaIzoDOYiE5MQ2cwkaxTW4YUReHw5Rg+/COMBlM389r8vSzZd5k7STq8XOx5o34plg9swO73nmfii8FU9/eUBCm/0SWDUQdJt9TvuuSMx+9cgK1T4MtqsKgDHPtVTZC8ysLzE+HdE9BrDVR9Nc8kSCk6Ix/+for3fgvDztYGndH05AflI9KSlFv0yTDF78nnOXtBSKjagpSZfXOh0XCYVQWSo598vf9dz1YtjUWLFvHWW2+xb98+Dh48yIABAyhVqlR6MgTw2WefMXHiRCZMmABAaGgobdq04eOPP+aHH37g1q1b6cnWggULAOjduzdXrlxhy5Yt2NvbM2zYMKKiorIcF8AHH3zA1KlTmTlzJlqtlmnTplG+fHk++ugjunXrhodH5nU5duzYQe3atdO3GzZsyKxZs3j//fcJDw8HSO+q69OnDxcvXmTp0qX4+fmxevVq2rZtS2hoKEFBQQwZMgSdTseOHTtwcXHh5MmTuLq64u/vz8qVK3nllVcIDw/H3d0dJyen9OesW7cuU6dOJS0tDQcHmdptrdL0RuZsv/BQ9eq3Ggcy6OdD7D5//2/O3dGWFyoX48VqxWhQ2ksWjc3vHtW6/9y7cHajuv/SrvvnO7hD5ZfVVqMSdfJUd9o9F24lMXp5KFdjUpjUqSIv1ShW4BJ/SZKsjasPJN3OfOVmUPcn31bPy0qSlE3+/v7MnDkTjUZD+fLlCQ0NZebMmRmSpOeffz7D6vW9evWiR48e6QOwg4KC+Oqrr2jatCmzZ8/m8uXLrF+/nr1796av0fbDDz9QsWLFbMXWo0cP+vbtm2GfRqPBw8MDX99Hl76/ePEitWrVSt+2t7fHw0PtBnnwcefPn+fXX3/l6tWr+PmpCe2oUaP4+++/WbBgAVOmTOHy5cu88sorVKlSBYDSpUunP75wYbX52dvbO8OYJIDixYuTlpZGZGQkpUqVytbrFrkjRWdgzvYLGdZBi08x8OXms5gUhd4NAzh2JZZWwT50qOZH46Ci2NtKYlQg6JLVBGn7tPv77rXuKybwq343QdJAmeb3u9PsnDK/Xh6x62w0JkVh8YA6BXaygSRJucXOWW3VyQqtnfopJbNEydET3IpBv3+y/rzZUL9+/QyfFBo0aMCMGTMwGo1oteoyBw+2ygAcOnSIc+fOZehCUxQFk8lEREQEZ86cwdbWNsPjKlSo8FAi8ST/fd6sSklJwdHxyeO4Dh8+jKIolCtXLsP+tLQ0vLy8ABg2bBhvv/02GzdupGXLlrzyyitUrVr1ide+16qUnJz8hDOFpWhtbFiwOyLTY4v2XOTA+JYcmtgKR1nuo+DR2j66dX//fBhxCtp+ChU7gkfx3I3NzJJ1Rnafi6ZlsDev1/enS+3iONkX3N95SZJyi0aT9W4vXbLajPvgp5Z76g28O8vNcuXoXVwyPrfJZGLgwIEMGzbsoXNLliyZ3qX1rM20/33erCpSpAgxMTFPPM9kMqHVajl06FB6QnjPve64fv360aZNG/788082btzI1KlTmTFjBu+8885jr33nzh0AihYt+lSvQeS8hFQ98SmGTI/FpxhITDWkL/shCpjUuMe37uuToX7en5Rx9mYio5eHcjM+jRolPfBydSjQCRJIkmSd7J3VWWyQ67Pb9u7d+9B2UFDQQ0nDg2rWrElYWBhly5bN9HjFihUxGAwcPHiQunXrAmrdInNOv3+cGjVqcPLkyQz77O3tMRqND51nNBqJioqicePGj7yev78/gwYNYtCgQYwbN4758+fzzjvvpM/y++91AU6cOEGJEiUoUqSIGV6RyAlujra4O9lmmii5O9ni5ph/lloQ2XBpDxSr9vjWfce8XdpDURRWH77Op3+doaSXM0sG1JEPBHdJh7q1snWERiEw+iyMPq9+bzQ8x6f/X7lyhREjRhAeHs6vv/7K119/zfDhwx/7mLFjx7Jnzx6GDBnC0aNHOXv2LGvXrk1vXSlfvjxt27alf//+7Nu3j0OHDtGvX78MA5tzUps2bdizZ0+G5CUgIIDExEQ2b97M7du3SU5Oply5crz++uv06tWLVatWERERwYEDB5g2bRp//fUXACEhIWzYsIGIiAgOHz7Mli1b0sdWlSpVCo1Gw7p167h16xaJiYnpz/fvv//SunXrXHm9IvtOXo9n17lo3mwQkOnxPg0DMZgK1qyeAu/mSVjcFRa0hQtboW7/zM+717qfh604cI0P157mxWq+/NK/NoFFrWvhXEuSJMma2TuD1h5ciqjfc6GLrVevXqSkpFC3bl2GDBnCO++8w4ABAx77mKpVq7J9+3bOnj1L48aNqVGjBhMnTqRYsWLp5yxYsAB/f3+aNm3Kyy+/zIABA/D29s7plwNAu3btsLOz459/7o/jatiwIYMGDaJbt24ULVqU6dOnp8fZq1cvRo4cSfny5enYsSP79u3D31+tgms0GhkyZAgVK1akbdu2lC9fnu+++w5QB2d/+OGHvPfee/j4+DB06FAAUlNTWb16dYbB78J6nLmZQM8f9jH5z1O89Vwgw1sE4e6kNrK7O9kyvEUQg5uVwdleGt4LhPjr8PtQmNMIzm4AG1s1YWo8EpqOVVuOQP3edKzaup9HpvP/V8rdivDtqvoyo1sV3u9YUcbc/YdGUbJRSEeki4+Px8PDg7i4uIeqKKemphIREUFgYGCWBgxbi2bNmlG9enWLFV3MSd999x2///47GzZsyPXn/vbbb/n999/ZuHFjth+bV3+X8opzUYl0n7eX24lpVCnuwZL+9dDaaLC1sSEhVY+box0Gk0kSpIIgNR52fQl7vgVDirovuBO0+AC8yqjb6asgxKtdbEa9RceHPi1FUVhx4BpztkfwU7/alCiUt2fhZdfj7t//JX/5okAYMGAAMTExJCQk5PrabXZ2dnz99de5+pziySJuJ9FjvpogVSzmzs9v1c0w7ujemAx7aXDP34x6OLQQtn2qllcB8K8PrT9Wlwt50L0WI5e7Ywu1ub/awLNKSDXw0dpTbAyLolud4hR1zXuvITdJkiQsbvHixQwcODDTY6VKlSIsLOyZn8PW1pbx48c/83WexpO6K0Xuu3InmR7z9xKVkEY5H1cW96uHp7PcLAoURYFTa+GfD+HOeXWfV1lo+aFa4ygfFk0Mj0xgxNJQYpN1fN61Mq0q+Vg6JKsnSZJI9+DyG7mpY8eO6UUm/8vOTmYUCfO6FpvCa/P3ciMulTJFXVjcrz6FXSRBKlAu74WNE+HqfnXbpSg0Gwc1e6l16vIpB1sbfD0cmNurBiUKF6wutqclSZKwODc3t1zvAhMFU2RcKj3m7+VqTAoBXs4s6V+fom4y1bnAuH0W/pkEp9ep23bO0PAd9cshf74Hxafombs9giHPlyGgiAs/9Kn15AeJdJIk5SCTTBkWz0h+h8wnKkFNkC5FJ+Nf2Ikl/evj4y6D4QuExCh1zNGhhaAYQWOjtho1Gwduj17SKK87fjWOsStOkJBq4IUqvlQunrfrOVmCJEk5wN7eHhsbG65fv07RokWxt7cvcIsCimejKAo6nY5bt25hY2OTXqhSPJ3biWm8Pn8fF24nUdzTiSX96uPnKd0N+Z4uSZ2ttutL0N2tW1buBWg5CbwrWDS0nKQoCj/tvsxX/5wn2M+NH/rUlN/3pyRJUg6wsbEhMDCQGzducP16FtdrEyITzs7OlCxZEhsbmWH1tGKSdPT8fh9noxLxdXdkSf96+BfOm3VtRBYZDXD0F9g6FRIj1X1+NdUZawHPWTa2XHDsShwzN52jV4OSvNOyDHZaef94WlIn6Sllpc6CoigYDIZMl6kQ4km0Wi22trbSCvkM4pL19Ph+L2HX4ynq5sCyAfUpXbRgrmZeICgKnNkA/3wAt06r+woFqLWOKnXOlzPWHnQ+KpHSRV3QaDRcuJVEaamcnSmpk2QlNBoNdnZ2MkNLCAuIT9XT68d9hF2Px8vFniX96kmClJ9dOwQb34dLO9Vtp0JqRezafcE2fw/ON5kUFuy6xLdbLjD1lUq0qewjCZKZSJIkhMh3EtMM9FlwgGNX4yjkbMfi/vUI8smfs5cKvDsRsOVjOLFS3bZ1hPpvq2tfOnlaMrJccSdJx4RVJ9l1Lpq3GpeiRcWilg4pX5EkSQiRryTrDPRdeIBDl2Jwd7Tl57fqUcFXZvXkO8l3YMdnsH8+mPSABqq9Bs+PB48Slo4uV1y9k0LvHw9hMJn47o3qNCrrZemQ8h1JkoQQ+Uaq3ki/RQfZH3EHNwc1Qapc3MPSYQlz0qfAvjnw70xIi1P3lWkBrT4E3yqWjS2XFfN0pH1VH16vXxJv9/zdpWgpkiQJIfKFVL2RAT8fYvf5aFzstSzsW5dq/p6WDkuYi8kIx5fDlskQf1Xd51sFWn0EZZ63bGy56HZCGu+vOUW/JgHULOXJu62DLB1SviZJkhAiz9MZTAxZfJgdZ27hZKdlQZ+61CpVyNJhCXM5txk2fQA3Q9Vt9xLQYiJU6QoFqDzGvgt3GLdSXcvSJBPTc4UkSUKIPE1vNPHOr4fZfDoKB1sbfnizNnUDC1s6LGEON46r0/nPb1G3HTygyUioOxDsCk61dKNJYe62CObtiKBuYCGmvFyJIrKcTq6QJEkIkWcZjCZClh1lQ9hN7LU2zO9Vm4Zli1g6LPGsYq/A1k/g2FJAARs7qDsAmowC54KXACelGfjj2A0GNy/NW40D0Nrk73pP1kSSJCFEnmQ0KYxacYw/j9/ATqthzhs1aVJOpj/nGbpk0NpCahw4eqhVsk0G+Pdz2DsHjGnqeZW7qF1rhQIsGq4l7D4XTRlvF3zcHVk1pD5O9lpLh1TgSJIkhMhzTCaFsSuPs+bodWxtNHzboybPV/CxdFgiqwypsGsW7JsLqbHg6An1BkDdQRC+Xk2QAhqrg7KL17RwsLnPYDTx7ZYL/LjzEm81LsWwlmUlQbIQSZKEEHmKoiiMX3OC3w5dRWuj4avXatC6Uv5dyT3f0SWrCdL2aff3pcbC9unqsiIvTAejHoJa5ftlRDITGZfK2N9OEHo1nuEty9C7USlLh1SgSZIkhMgzFEVh0towft1/GRsNfNG1Gu2qFLN0WCI7tLZqC1Jm9s+HpmNAa5+7MVmJVL2RnvMPYqOBH/rUpEZJT0uHVOBJkiSEyBMURWHyn6dYtOcSGg1M71KNTtWLWzoskV0psWrLUWZSYyE1HlwK1uB7vdEECjjaafmgYwWqlPDA01nW/LQGBafAhBAiz1IUhWl/h/PDzggApnauQpdaBWPpiXzDaICDC8HeRR2DlBlHT3AsWEvIXItJoc+Ph5i16RwAjcsVkQTJikiSJISwejP/Ocuc7ecB+LhTJbrXLWnhiES2RPwLcxvDuuFwYRvU7Z/5efUGqslUAbHl1C26zdlPdKKONlVk4oE1ku42IYRV+3rzWb7afBaAiS8G80aDAMsGJLIu7ipsnABhq9Vtp8JgSIPGo0Bj85/ZbQOh8Qiwzf9FIk0mhc83nGXx3is0r1CUj16qiLuTtB5ZI0mShBBWa+7288zYdAaAcS9U4K3nAi0ckcgSfSrs+Rr+/QL0yWpCVPstaP6/+8UgG4WoxSFT49UuNqO+QCRIADY2GvRGE2NeKEePeiXQFMBZfHmFJElCCKv0484Ipq4/DcCo1uUY2LSMhSMST6QocOZv+Ps9iLmo7ivZENpNVxejfZC9s/r93iDtAjCjbVPYTQwmhReq+DL+xQqWDkdkgSRJQgir8/Oei3y07iQAw1oEMfR5Wenc6t0+pyZH5zap227FoPVkqPxKgax39KA0vZEZG86y7MA1OlYvxgtVpK5XXiFJkhDCqizdf5mJv6srnQ9qWoZ3W0qCZNXSEmHHZ7DnWzDp1XXWGg5Vxx05uFo6Oou7FJ3M6OWhRNxOZvyL5Xm1tpStyEskSRJCWI3fDl1l3OpQAN56LpCxbcvLeA1rpSgQ+htsmggJN9R9Qa2h7afgJV2j93yy7jQpeiM/96tNhWJulg5HZJMkSUIIq/D70WuM/u0YigK9GpRiQvuKkiBZq8hQ+GsMXN6tbhcKVJOj8m0tG5eVSNUbuZWQhn9hZz7uHIyrgy0uDnK7zYvkf00IYXF/hd5gxHI1QXqtbkkmdagkCZI1Sr4DWz+Bgz+CYgI7Z2g8EhoMBbuCMTPtSSJuJTFqeSg2Gg3LBtXFx13+XfIySZKEEBa1MSySYb8ewWhS6FKrBJ+8VBkbG0mQrIrJCIcXweaPIeWOuq/Sy9D6Y/CQyuf3/HH0BpPXncbP05FPu8jvcX4gSZIQwmK2no5iyJLDGEwKL1X3Y9orVeXGYm0u74P1o+HGMXXbOxhemA6BjS0bl5WZseEsP+2+TMfqxRjXvjzO9lpLhyTMQJIkIYRF7Dhzi4G/HEJvVGhfpRifv1oNrSRI1iMhEjZ9AMeXqtuOHtB8vFoUUiu3jnsURUGj0dCwbGGCfFzpWL2YpUMSZmTVa7cZDAYmTJhAYGAgTk5OlC5dmo8++giTyZR+jqIoTJo0CT8/P5ycnGjWrBlhYWEZrjNixAgKFy5MyZIlWbp0aYZjy5cvp0OHDrnyeoQQqt3nbtP/p4PoDCZaB/swq3t1bLVW/XZUcBh0sOsr+Lr23QRJAzV7wTuH1aVDJEEC1HvPqkPXGb38BCaTQoMyXpIg5UNW/ds+bdo05syZw6JFi6hUqRIHDx6kT58+eHh4MHz4cACmT5/OF198wcKFCylXrhyTJ0+mVatWhIeH4+bmxh9//MGSJUvYuHEjZ8+epU+fPrRq1QovLy9iY2MZP348mzdvtvArFaLg2B9xh7cWHSTNYOL5Ct5806MmdpIgWYdz/8D69yBaXSuP4rXVatnFa1k2LiuTlGZg8rpw/joeycs1/TCaFOkmzqesOknas2cPnTp1on379gAEBATw66+/cvDgQUDN5GfNmsX48eN5+eWXAVi0aBE+Pj4sWbKEgQMHcurUKZo1a0bt2rWpXbs2ISEhXLhwAS8vL8aMGcPgwYMpWfLJK4qnpaWRlpaWvh0fH58Dr1iI/O3QpRj6LNhPit5Ik3JF+e71mtjbSoJkcTEX4e//Qfif6rZLUWj5IVR7DWzk/+dB4ZEJjF5+glsJaUx9pRLtqkr17PzMqn/7n3vuOTZv3syZM+oCl8eOHWPnzp20a9cOgIiICCIjI2ndunX6YxwcHGjatCm7d6v1O6pVq8bBgweJiYnh0KFDpKSkULZsWXbu3Mnhw4cZNmxYlmKZOnUqHh4e6V/+/v5mfrVC5D8pOgM6g4noxDR0BiOxyTp8PZxoWMaLeW/UwtFOBrdalC4ZtnwC39RVEySNFuoPgXcOQY3XJUHKxO5zd3C0s+HXgXUlQSoArLolaezYscTFxVGhQgW0Wi1Go5FPPvmE1157DYDIyEgAfHx8MjzOx8eHS5cuAdCmTRt69uxJnTp1cHJyYtGiRbi4uPD222+zcOFCZs+ezddff02RIkWYN28elSpVyjSWcePGMWLEiPTt+Ph4SZSEeIw0vZE52y+wYHcE8SkG3J1sebNBACvfboCDrY0kSJakKHDyd9g4AeKuqPsCm6qz1rxl4dX/Skw1sPt8NK0r+fBmw5L0qFcCB/n9LRCsOklatmwZv/zyC0uWLKFSpUocPXqUkJAQ/Pz8ePPNN9PP+2/RuXuzDe6ZNGkSkyZNyrDdsmVL7OzsmDx5MqGhoaxbt45evXpx6NChTGNxcHDAwcHBvC9QiHwqRWdgzvYLfLn5bPq++BQDX285h41Gw8CmpS0YXQEXdRrWj4GI7eq2hz+0+QQqdizwC9Fm5uT1eMasOEFssp66gYXxdLbDwUYSpILCqpOk0aNH895779G9e3cAqlSpwqVLl5g6dSpvvvkmvr5qU2dkZCTFit2fVRAVFfVQ69I9p0+fZvHixRw5coQff/yRJk2aULRoUbp27Urfvn2Jj4/H3d0951+cEPmY1saGBbsjMj22YHcEQ5qXzeWIBKlxsO1T2DcXFCNoHeC5EGgUAvbOlo7O6iiKwq/7rvLFxrME+bgy+43qeDrbWToskcususM5OTkZm//0iWu12vQSAIGBgfj6+rJp06b04zqdju3bt9OwYcOHrqcoCgMGDGDGjBm4urpiNBrR6/UA6d8fLC8ghHg6Cal64lMMmR6LTzGQkKrP5YgKMJMJjvwCX9eCvd+pCVKFF2Hofmj+P0mQHuGXPVeYtv4MXeuUYNFbtfEvLP9OBZFVtyR16NCBTz75hJIlS1KpUiWOHDnCF198Qd++fQG1my0kJIQpU6YQFBREUFAQU6ZMwdnZmR49ejx0vfnz5+Pt7U3Hjh0BaNSoEZMmTWLv3r2sX7+e4OBgPD09c/MlCpEvuTna4e5km2mi5O5ki5ujfCLPFdcOqQvRXlNnBOMVBC9Mg7ItLBuXFUtOM+DsYMtLNf0oVcSZJuWKWDokYUFWnSR9/fXXTJw4kcGDBxMVFYWfnx8DBw7k/fffTz9nzJgxpKSkMHjwYGJiYqhXrx4bN27Ezc0tw7Vu3rzJlClT0me9AdStW5eRI0fSvn17vL29WbRoUa69NiHys/hUPW82CODrLeceOtanYSAGkwl7627Izlt0yWqRx9Q4tTK2Lhl2fw3/zgAUsHeFpmOh3iCwtbd0tFZJURR+3nOFH3de5NcBdSnm6SgJkkCjKIpi6SDyovj4eDw8PIiLi5MxTEI8IM1gZNiSI0x5uQqLdl9k4Z6L6bPb+jQMZHCzMjIzyJwMqfDvF+pYo9RYcPSEuv3VhGjBC+BXE1p9CG4yXf1R4pL1TFxzku3ht+nVsCTDWpTBTup35VvZuX9bdUuSECLv+WLTGTacvMntJB0/vFmboc8HkZCqx83RDoPJJAmSOemSYdcs2D7t/r7UWNjxmfpzr7XgLktlPM6Ja/GMXHacFJ2Rr3pUo2l5aT0S90mqLIQwmz3no5m34wIAA5qUxtPZHntbG7xcHbC3tcHZXj6XmZXWVm1Bysz++eDilbvx5EFOdjYEFnFh+dv1JEESD5EkSQhhFnHJekYsP4qiQPc6/rSpJN07OS4lVm05ykxqLKTK8kmZuZOk49O/wknVGynj7cqcXjXw9XC0dFjCCkmSJIQwi4m/n+BGXCoBXs5MfDHY0uHkb4oCoavA3kUdg5QZR09wlPGS/3XoYgxdZ+/n79CbXIpOtnQ4wspJkiSEeGZrjlxj7bHraG00zOxWHRcH6VbLMalxsLIfrOwDF7ZB3QGZn1dvIBgzr1VVEBlNCvO2R9Bv4WFKeTmx/O16lPd1e/IDRYEm72RCiGdyNSaZiWtOADDs+SBqlCxk4Yjyscv71AQp7rK6GG1CJDQeqS4n8uDstnoDofEIsJUupHsOX4pl9tYL9G8SyICmAdhqpY1APJmUAHhKUgJACPXT+Wvz97I/4g41S3qyfGADufnkBKNBrXm0/VNQTFAoAF7+HvzrqMfT6yTFq11sRr3aFSc4ezORst4uaDQaLt5OJqCIVM4u6LJz/5Z3MyHEU5u74zz7I+7gYq9lZrfqkiDlhNjLsLA9bJuiJkhVu8PAf+8nSKAuLaK1B5ci6ndJkDCaFGZvvcCrs/ex9fRtAEmQRLZJd5sQ4qmcuBbHFxvPAPBBx0qU8pIbs9mdWAl/vAtpcWDvBi9+AVW7WjoqqxcVn8a4lSc4fCmWt5uVlqn94qlJkiSEyLYUnZFhS49gMCm8UNmXV2uVsHRI+UtaAqwfC0cXq9sl6sAr36vdbOKxLt5OovePh7C1sWF+75rUDpAxcuLpSZIkhMi2KX+d4sKtJHzcHZjSuQoajcbSIeUf1w6pg7PvXACNDTQepa67ppW368dRFAWNRkOJQk50ruHHGw1LUthF1qkTz0YGEAghsmXr6Sh+3nsJgM9frUYhuRGZh8kEO2fCD63VBMm9BPT+E54fLwnSE9yMS6X/oiMcvRyLrdaG4a3KSoIkzEL+8oQQWXY7MY3Rvx0DoG+jQBoHFbVwRPlE/HVYPRAidqjbwS9Bh1ngJF1FT/LvmdtMWH0SB1sbadEUZidJkhAiSxRF4b2Vx7mdqKO8jxtj2pa3dEj5w6l1sHYopMSAnQu0mw7VX1drH4lH0htNfLP5PAt3XaZJuSJ83DkYT2c7S4cl8hlJkoQQWfLr/iv8cyoKe60Ns7pXx9FOa+mQ8jZdMmz4HxxaoG4Xqw6v/ABFylo0rLwiMdXAxrAoRrQuS6+GJaUVSeQISZKEEE904VYiH687CcCYtuWpWEwKqD6TG8fVwdm3w9XtRsOh+QSwlXE0T7It/BaV/Nwp6ubAmqH1cZBkXeQgGbgthHgsvdFEyLKjpOiNNCrrRd9GgZYOKe8ymWDPd/B9CzVBcvWFN9ZAq48kQXoCvcHE9PVnGL7kOCsPXQOQBEnkOGlJEkI81lebz3L8ahweTnZ8/mo1bGykW+OpJEbBmrfh3D/qdvl20PEbcPGybFx5wNU7KYxZEUr4zUTGvFCOHvWkLpfIHZIkCSEe6cDFO3y79RwAUzpXoZiHk4UjyqPObITfB0PSLXXR2TafQO23ZHB2FiTrjLzx/QGc7W356a3aVCouXb0i90iSJITIVEKqnneXHcWkwMs1i9O+ajFLh5T36FPhn0mwb7a67V0JuvwA3hUtGlZekKY3YqPR4GyvZXLnSlT198DNUW5ZInfJb5wQIlMfrA3jakwKJQo58WHHSpYOJ++JOqUOzr55Qt2uNwhafgh2jpaNKw+4FJ3M6OWh1C9dmBFtgmgUJF2SwjIkSRJCPGTd8eusOnwNGw3M6lYdN0epP5NligIHf4AN48GQCs5F4KXZUK61pSPLE9aHRvLR2tMUcbOnXVVfS4cjCjhJkoQQGdyIS2H8arX1Y0jzstQOKGzhiPKQpGi1MGT4X+p2mRZqguTmY9m48gCjSeGTdadZeeg67ar4MKFDBVwc5BYlLEt+A4UQ6UwmhVErjhGXoqdqCQ+GtQiydEh5x4VtsGogJEaC1l7tWqs3CGyk0kpWaG002Gg0fNCxAp1r+klxSGEVJEkSQqT7cVcEu85F42SnZVa36thp5Qb/RAYdbJ0Mu74CFChSTq2cXayqpSPLE/44egM7WxvaVlZbj4SwJpIkCSEAOHUjnul/qxWgJ74YTOmirhaOKA+4fQ5WvgU3jqrbtfpAmylg72zRsPKCZJ2RqX+Gs/boDbrVKU7bytIlKayPJElCCFL1RkKWHkVnNNGyojev1fW3dEjWTVHgyC+wfizok8CpEHT8Gip2sHRkecK5qERGLz/B9dgUPu4cTMfqUl5CWCdJkoQQTP87nPCbCRRxtefTV6rKeJDHSYmBde9C2Gp1O6AxvDwP3P0sG1ceoSgKU9aFo9HAkgF1KOMtLZbCekmSJEQBt+PMLX7cFQHAZ12qUcTVwcIRWbFLu2Flf4i/Cja20Hy8ujitjawh9iRJaQaiE3WU9HJmapdKuDva4WQv/27CupklSYqNjcXT09MclxJC5KKYJB2jVhwD4I36pWhewdvCEVkpowG2T4N/PwfFBIVLwyvfQ/Falo4sTwiPTGD08hM422v5dWAdfNyloKbIG7I9dWXatGksW7Ysfbtr1654eXlRvHhxjh07ZtbghBA5R1EUxq0KJSohjTJFXfhfO1kqAwBdMhh16jprRh0kR8PqgbBjupogVX8dBu6QBCkLFEVh+YGr9Jx/EEc7Gz7tUlm6ckWeku2WpLlz5/LLL78AsGnTJjZt2sT69etZvnw5o0ePZuPGjWYPUghhfisOXeXvsEhsbTR82b2GdH2AWiF71yzYNxdSY8HRE+r2hxemwZ0L0GAIVOli4SDzjql/hrPswDVerV2c0W2DcLCT3zGRt2Q7Sbpx4wb+/urMl3Xr1tG1a1dat25NQEAA9erVM3uAQgjzuxSdxIdrwwAY0boclYt7WDgiK6BLVhOk7dPu70uNhR2fARro+Rs4yxpiWaEoChqNhqYVilIroBBtZHq/yKOy3d1WqFAhrly5AsDff/9Ny5YtAfWPwmg0mjc6IYTZGYwm3l12lCSdkbqBhRnYpIylQ7IOWlu1BSkz++eBg1vuxpMHKYrCkr1XGL38BIqi0KislyRIIk/LdkvSyy+/TI8ePQgKCiI6OpoXXngBgKNHj1K2bFmzByiEMK9vt57n8OVY3Bxs+aJrNbQ2MkYEgNQ4teUo02OxkBoPLkVyM6I8JT5Fzwe/n2LLqVu8Vq8EBpOCnVZ+t0Telu0kaebMmQQGBnL58mWmT5+Oq6ta4+LGjRsMHjzY7AEKIcznyOUYvtpyFoCPX6pMiUJSGRoAkwns3dQxSJklSo6e4Oiey0HlHaFX4xiz4gQJqQa+6F6FFhVllqTIH7KVJOn1egYMGMDEiRMpXbp0hmMhISHmjEsIYWZJaQbeXXYUo0mhYzU/XqpR3NIhWYe0BFg9CKr3UAdp7/js4XPqDVTLAGjtcz++PGDfhRgKu9jzfe+aFC/kZOlwhDCbbI1JsrOzY/Xq1TkVixAiB3287iQXo5Px83Dk406VLR2OdbhzAb5vBafXwdZP1MKQTceqLUegfm86FhqPkPXY/iMuWc/fJ24C0Pe5UizsW0sSJJHvZLu7rXPnzqxZs4YRI0bkRDxCiBywISySpQeuoNHAjK7V8XC2s3RIlnd+C6zoo3avufrCi1+qg7MbhUCTUeoYJEd3MOrBVoofPujo5VjG/naCNIOJhmUK4+5kh42MbRP5ULaTpLJly/Lxxx+ze/duatWqhYuLS4bjw4YNM1twQohnFxWfynsrjwMwoElpGpQp4NPYFQX2fgcbJ6jFIYvXhm6/gPvdRVbvtRjdG6QtXWzpTCaFhbsu8c2WC1Qp7s60Vyvj7iQJt8i/NIqiKNl5QGBg4KMvptFw4cKFZw4qL4iPj8fDw4O4uDjc3WVAp7BOiqLw5oID7Dhzi+Bi7qwe0hAH2wJc0E+fAn+EwPGl6nb116H9F2AnLUVZ8cO/F/nqn/P0ea4UQ54vjZ0221VkhLC47Ny/s92SFBER8dSBCSFy1097LrHjzC0cbG34snv1gp0gxV2DZa/D9SOg0UKbKeqAbFkm44kSUw24Otryau3iBPu5SWukKDCe+mOATqcjPDwcg8FgzniEEGZy9mYCU/46BcD/2lUkyKcAF0O8vA/mNVMTJKdC8MZqqD9IEqQnMJoU5m2P4MWvdnMzPhV3JztJkESBku0kKTk5mbfeegtnZ2cqVarE5cuXAXUs0qeffmr2AIUQ2ZdmMDJ86VHSDCaalitKrwalLB2S5RxaCAvbQ1IU+FSGAdugdFNLR2X1ohPTGPzzUb7beoFXaxfHy0XGZomCJ9tJ0rhx4zh27Bjbtm3D0fF+P37Lli1ZtmyZWYMTQjydLzad4eSNeAq72PPZq1UL5srrRj38ORL+GA4mPQR3gr4boFCApSOzeocvxfLq7P2cjUpkzhs1GPJ8GWxl/JEogLI9JmnNmjUsW7aM+vXrZ3jjDQ4O5vz582YNTgiRfXvORzNvhzqBYurLVfB2K4CDkhNvwYo34dIuQAPPj4fGo6R7LYvcHG2p5OfOBx0rUMTNwdLhCGEx2f5ocOvWLby9Hy45n5SUVDA/rQphReKS9YxYfhRFge51/GlTydfSIeW+G8dgfnM1QbJ3g9d+hSajJUF6gqj4NCb/cZpUvZEgH1e+fr2aJEiiwMt2klSnTh3+/PPP9O17idH8+fNp0KCB+SITQmSLoihM+P0EN+JSCfByZuKLwZYOKfeF/gY/tIG4K1C4DPTfDOVfsHRUVm/3uWi6ztnHtvBbXItJsXQ4QliNbHe3TZ06lbZt23Ly5EkMBgNffvklYWFh7Nmzh+3bt+dEjEKILPj96HX+OHYdrY2Gmd2q4+KQ7T/vvMtkhM0fwa5Z6nbZlvDKD+DkacmorJ7BaOK7rRf44d9LNChTmE9eroSXqwzQFuKebLckNWzYkF27dpGcnEyZMmXYuHEjPj4+7Nmzh1q1auVEjEKIJ7gak8zENScAGPZ8EDVKFrJwRLkoJRaWdLufIDUKgR7LJUHKggMXY1i46zLDWpThu57VJUES4j+yXXFbqKTitrAWRpPCa/P2sv/iHWqW9GT5wAYFZybSrXD49TW4cx5snaDTN1Cli6WjsnqnrsdToZgbGo2GK3eS8S8si/eKgiM79+9sv5M2a9aMn376iZQU6bcWwhrM3XGe/Rfv4GKvZVa3GgUnQQpfD/NbqAmShz+8tUESpCfQG03M3HiW7nMPsPNsNIAkSEI8RrbfTWvVqsWYMWPw9fWlf//+7N27NyfiEkJkwYlrcXyx8QwAkzpWoqRXAbjhKQrs+ExtQdIlQKlG0H8rFKtm6cis2vXYFPr+eIhf9lxhROuyNCorlbOFeJJsJ0kzZszg2rVr/PTTT9y6dYsmTZoQHBzM559/zs2bN3MiRiFEJlJ0RoYtPYLBpPBCZV+61Cph6ZByXlqiWv9oy2RAgTr9oNfv4FrU0pFZtbM3E+k2Zz+3E3Us6FuLNxuVwsZGSiII8SRP1S6v1Wrp1KkTa9as4dq1a/To0YOJEyfi7+/PSy+9xJYtW8wdpxDiP6b8dYoLt5LwcXdgSucq+b9OWcxF+LENnPwdbOygw5fQfgZo7SwdmdW6N+Q0oIgz3eqUYNmgulT197BwVELkHc80eGH//v28//77fP7553h7ezNu3Di8vb3p0KEDo0aNMleMQoj/2Hn2Fj/vvQTA569Wo1B+X1frwnaY1xxungAXb+i9Dmr1tnRUVu3qnRR6/3CI41fjsNPaMLRFGdydJKEUIjuynSRFRUUxY8YMKleuTOPGjbl16xZLly7l4sWLfPjhh8ybN4/ff/+dOXPmmCXAa9eu0bNnT7y8vHB2dqZ69eocOnQo/biiKEyaNAk/Pz+cnJxo1qwZYWFhGa4xYsQIChcuTMmSJVm6dGmGY8uXL6dDhw5miVWInJSiM6AzmLidkEbNUoWY90YtxrQpT+OgfNzVpCiwdw783BlS7oBfDXWB2pL1LR2ZVfvnZBTd5uzjdqIOO+lWE+KpZbvaXIkSJShTpgx9+/ald+/eFC368Bt03bp1qVOnzjMHFxMTQ6NGjWjevDnr16/H29ub8+fP4+npmX7O9OnT+eKLL1i4cCHlypVj8uTJtGrVivDwcNzc3Pjjjz9YsmQJGzdu5OzZs/Tp04dWrVrh5eVFbGws48ePZ/Pmzc8cqxA5KU1vZM72CyzYHUF8igF3J1vebBDAkOZlLR1aztGnwp8j4Ohidbtqd+gwC+ycLBqWNUvTG5mx8RzL9l+lVbA3H3SqiJtjASoqKoSZZbtO0r///kvjxo1zKp4M3nvvPXbt2sW///6b6XFFUfDz8yMkJISxY8cCkJaWho+PD9OmTWPgwIFMnz6dw4cPp7cg+fj4sG7dOurUqcOAAQOoWLEi77777hNjSUtLIy0tLX07Pj4ef39/qZMkclyKzsCc7Rf4cvPZh44NbxHEwKalcbbPZzfC+BuwrCdcOwgaG2g9GeoPlvXXnuBOko6e8w/Qu2EpXq1TPP+PUxPiKeRonaTcSpAA1q5dS+3atXn11Vfx9vamRo0azJ8/P/14REQEkZGRtG7dOn2fg4MDTZs2Zffu3QBUq1aNgwcPEhMTw6FDh0hJSaFs2bLs3LmTw4cPM2zYsCzFMnXqVDw8PNK//P39zftihXgErY0NC3ZHZHpswe4IbG3yWV2kKwdgXjM1QXL0hJ4rocEQSZAeY2PYTaIT0yjsYs+aoQ3oWreEJEhCmEG2310DAwMpXbr0I7/M6cKFC8yePZugoCA2bNjAoEGDGDZsGD/99BMAkZGRgNo69CAfH5/0Y23atKFnz57UqVOH3r17s2jRIlxcXHj77beZO3cus2fPpnz58jRq1OihsUwPGjduHHFxcelfV65cMetrFeJRElL1xKcYMj0Wn2IgIVWfyxHloCO/wMJ2kBgJRSvCgK1Q5nlLR2W1UvVGPlp7itHLT/DHUfU9z942nyXNQlhQttvoQ0JCMmzr9XqOHDnC33//zejRo80VFwAmk4natWszZcoUAGrUqEFYWBizZ8+mV69e6ef99xOToigZ9k2aNIlJkyZl2G7ZsiV2dnZMnjyZ0NBQ1q1bR69evTIMCn+Qg4MDDg4OZnx1QmSNm6Md7k62mSZK7k62uDnmgxlLRj1sGA/756rbFV6EznPAwc2ycVmxiFtJjF5xgsvRyXzQsQKda/pZOiQh8p1sJ0nDhw/PdP+3337LwYMHnzmgBxUrVozg4OAM+ypWrMjKlSsB8PX1BdQWpWLFiqWfExUV9VDr0j2nT59m8eLFHDlyhB9//JEmTZpQtGhRunbtSt++fYmPj5cxRsKqxKfqebNBAF9vOffQsT4NAzGYTNg/WzUPy0qKVgtEXrw79rDZ/6DJaMhv3YhmlJhqoNcPB/FysWfxgDoE+bhaOiQh8iWzvQu98MIL6cmLuTRq1Ijw8PAM+86cOUOpUqUAtevP19eXTZs2pR/X6XRs376dhg0bPnQ9RVEYMGAAM2bMwNXVFaPRiF6vdlXc+24ymcz6GoR4FnqjiYlrTtC7YQDDni+Lu5P6ucbdyZbhLYIY3KxM3h60HRkK85upCZK9K3RbDM3GSoL0CCk6I3qjCVdHW6Z1qcwSSZCEyFFme3f97bffKFy4sLkuB8C7775Lw4YNmTJlCl27dmX//v3MmzePefPmAWo3W0hICFOmTCEoKIigoCCmTJmCs7MzPXr0eOh68+fPx9vbm44dOwJqEjZp0iT27t3L+vXrCQ4OzlBeQAhLm73tPOtPRHIjLpWFfeow9PkgElL1uDnaYTCZcLDTWjrEpxe2GtYMBn0yFAqE134F74qWjspqnYtKZPTyEzSvUIRhLcvSUNZeEyLHZTtJqlGjRobxPoqiEBkZya1bt/juu+/MGlydOnVYvXo148aN46OPPiIwMJBZs2bx+uuvp58zZswYUlJSGDx4MDExMdSrV4+NGzfi5pZxLMPNmzeZMmVK+qw3UOs5jRw5kvbt2+Pt7c2iRYvMGr8QzyLsehxf3Z3236dRAJ7OalVtL1d1bFye7WIzmWDrZPh3hrpd5nl45QdwNu+HrPxCURTWHLnBp3+FU7yQE+2r+lo6JCEKjGzXSfrwww8zbNvY2FC0aFGaNWtGhQoVzBqcNctOnQUhsivNYKTTN7s4HZlA20q+zO5ZM39M6U6Ng1UD4Mzf6nbDd6DFJNDm4S7DHKQ3mvhgzSn+PB7JyzX9GPNCOZzs83DroRBWIDv372y/M33wwQdPHZgQImu+2nyW05EJFHaxZ3Lnynk3QdIlqwlQahw4uMO1Q3DnAtg6QsevoWpXS0do1WxtNLg4aJnySiVpQRLCAp7p45uiKGzdupWUlBQaNmxIoUKFzBWXEAXWkcsxzN52HoApnStTxDWPlp4wpMKuWbBvLqTGqoUh6/aHvn9D4k3wDn7CBQomRVFYeeg67k62tK7kw/gXC04LvRDWJsuDGmJjY3nzzTepUqUK/fv3Jz4+nsaNG9OyZUs6dOhAhQoVOH78eE7GKkS+l6o3MnLFMUwKdKruR9vKxZ78IGukS4Z/v4Dt09QECdTvOz5TkybPAAsGZ70SUw2M/e0EH/9xmrBr8ZYOR4gCL8tJ0qhRo9izZw/dunUjNDSUtm3bYjQa2bNnD/v27SM4OJjx48fnZKxC5Hufbwjnwq0kvN0c+LBjJUuH8/S0tmoylJl9c2UMUiZOXY/ntbn72Xk2mumvVubd1kGWDkmIAi/L71Tr169nyZIlNG3alD59+uDv78+WLVuoV68eANOmTUufWi+EyL79EXf4YZe6Rtunr1RJn82WJ6XE3W9B+q/UWEiNB5ciuRmRVVMUhSl/huPqaMt3b1THv7CzpUMSQpCNJOnmzZuUK1cOgOLFi+Po6JhhkdeSJUty69Yt80coRAGQlGZg1IpjKAp0rV2C5ytkXjE+T0iJBQcXdQxSZomSoyc4yoxQgPgUPbHJekp6OTOjW1U8ne1k7TUhrEiW/xpNJhNa7f2pp1qtNsOMmzw7+0YIK/Dp+tNcvpNMcU8nJr6Yhwc0x12DH9vC+a3qIO3M1BsIxswX7C1ITlyLp/vc/YxfFYaiKHi7O0iCJISVydbAgO+//x5XV7UEvsFgYOHChRQpojaZJyQkmD86IQqAnWdv8/PeSwBM71I17y5YG3UafnkZ4q/Bnm/h9d9AY5Nxdlu9gdB4hFoCoIBSFIXFe68wc9M5Kvi68WmXPFziQYh8LsvFJAMCArL0hxwREfHMQeUFUkxSmEN8qp62M3dwPS6VN+qX4uOXKls6pKdzeS8s6aYmQ0XKQc+V4FnygTpJ8WoXm1EP9i6Wjtai3l9zkt+P3KBXw5IMa1EGO2k9EiJX5UgxyYsXLz5rXEKI/5i87iTX41Ip5eXMey/k0Xo4p/+E3/qqdZFK1IUey+4vMWJ/dwDyvUHa2jw8GP0ZKYqCRqOhdSVvnq9YlGbli1o6JCHEE8g8XCEsZPOpmyw/eBWNBj5/tRouDnnwz/HgAvhzBCgmKNcWuiy4nxgJAEwmhUW7L3PyejzTX63Mc0Eyq0+IvELaeYWwgNhkHe+tCgXgrUaB1AnIY4u7Kgps+xTWhagJUo03oNtiSZD+IyZJxztLjjFr0zlKFHLClK2VMoUQlpYHP7oKkfd9sDaMWwlplCnqwqg25S0dTvaYjPDnSDi0QN1uMgaa/w9k8HEGhy/FMPa3MPQGE9/1rE6jIC9LhySEyCZJkoTIZetDb/D70evYaGBG1+o42uWhVd31KbCyH5xeB2ig/edQp5+lo7JKByJi8S/kxNQulfBxL7iz+YTIyyRJEiIX3U5MY/yaEwC83awM1f09LRtQdiTfgV9fgyt7QesAr3wPwVJl/0HRiWnsj4jhhSq+9GsSwFuNS2GrlVENQuRVT/XXe/78eSZMmMBrr71GVFQUAH///TdhYWFmDU6I/ERRFMavDuVOko4Kvm4Ma5GH1uaKuwoLXlATJEcP6LVGEqT/2B9xh66z9zNjwzmS0wxobTSSIAmRx2X7L3j79u1UqVKFffv2sWrVKhITEwE4fvw4H3zwgdkDFCK/+P3odTaE3cTWRsOMrtVwsM0j3WxRp+D7VnDrNLj5QZ+/oVRDS0dlNYwmhTlbLzBw0RFKF3Vh6cA6OOfFmYpCiIdkO0l67733mDx5Mps2bcLe/n7Nk+bNm7Nnzx6zBidEfnEzPpX3f1e72Ya3CKKSn4eFI8qiS3vgxzaQcB2KlIe3NoJPHl42JQfM3x7B3O0RDGwWyJxeNSji5mDpkIQQZpLtjzuhoaEsWbLkof1FixYlOjraLEEJkZ8oisLYlceJTzVQtYQHbzcrY+mQsubUOlj5llok0r8evLb0fpFIQXyKHncnO16r50+dwELUCihk6ZCEEGaW7ZYkT09Pbty48dD+I0eOULx4cbMEJUR+svzgFbaF38Le1oYZr1bLG+NUDvwAy99QE6Ty7aDX75Ig3WUwmvhm83k6frWH2wlpeDjbSYIkRD6V7XfrHj16MHbsWCIjI9FoNJhMJnbt2sWoUaPo1atXTsQoRJ51NSaZj9edAmBU63IE+bhZOKInUBTYOuV+Fe2ab0LXn8HOydKRWYWbcan0X3SEH3de4o0GJSnsUnCXWRGiIMh2d9snn3xC7969KV68OIqiEBwcjNFopEePHkyYMCEnYhQiTzKZFMb8dpzENAO1SxXiredKWzqkxzMa1OTo8CJ1u+l70Ow9KRJ51/6IO4xefgJ7Wxu+712TmqU8LR2SECKHZTtJsrOzY/HixXz00UccOXIEk8lEjRo1CArKQ9OZhcgFv+y7xO7z0Tja2fDZq9XQ2lhxsqFLVscfhf8FGhto9znUecvSUVkVTyc7agd4MuHFChSSFiQhCgSNoiiymtBTiI+Px8PDg7i4ONzd3S0djrAyF28n8cKX/5KiN/Jhx0q82TDA0iE9WvId+LU7XNmnFons8gNU7GDpqKzCjdhU5u+IYOwL5XDIS5XRhRCPlJ37d7ZbkkaMGJHpfo1Gg6OjI2XLlqVTp04ULiyDPEXBZDQpjFpxjBS9kQalvXijfilLh/RosVfgl1fgdrhaJPK1ZVCqgaWjsgrbTt9i4pqTuNjbEhmfRikvWbxXiIIm20nSkSNHOHz4MEajkfLly6MoCmfPnkWr1VKhQgW+++47Ro4cyc6dOwkOlnoqouD5cWcEBy/F4Opgy/QuVbGx1m62myfVBCnhOrgXh54rwbuipaOyOL3BxKx/zvHLnis0r1CEDzsF4+FsZ+mwhBAWkO3ZbZ06daJly5Zcv36dQ4cOcfjwYa5du0arVq147bXXuHbtGk2aNOHdd9/NiXiFsGpnbybw2cZwACa0r4h/YSttfbi4C35sqyZIRSuoRSIlQQJg74U7LN1/lTFtg5jZvaokSEIUYNkek1S8eHE2bdr0UCtRWFgYrVu35tq1axw+fJjWrVtz+/ZtswZrTWRMkvgvg9HEK7N3c+xqHM3KF2VB7zporHFm2Mm1sLIfGNOgZAPovkRqIAGhV+OoXNwdjUbD9dgU/Dyl7IEQ+VF27t/ZbkmKi4tLX9T2Qbdu3SI+Ph5QC07qdLrsXlqIPG3O9vMcuxqHu6Mtn75c1ToTpAPfw/JeaoJUvj28sbrAJ0g6g4mpf4bTc/5B9l2IAZAESQgBPMWYpE6dOtG3b19mzJhBnTrqJ+X9+/czatQoXnrpJQD2799PuXLlzB2rEFbr5PV4vtx8FoAPO1XC18PRwhH9h6LA1k9gx2fqdq3e0G4GaAv2QqyXo5MZs+IE56IS+V/78tQrLZWzhRD3Zfsdcu7cubz77rt0794dg8GgXsTWljfffJOZM2cCUKFCBb7//nvzRiqEldIZTIxYfhS9UaF1sA8vVbey5XmMBlgXAkd+Vreb/Q+ajinwRSJP3UjgrQWH8HKx5+f+dahYzMqroQshct1T10lKTEzkwoULKIpCmTJlcHV1NXdsVk3GJIl7ZmwM5+st5yjsYs+GkCYUtaZV4HXJ8FsfOPO3WiSy/RdQu4+lo7IoRVHQaDTojSa+33GRXg1L4uJQsFvUhChIcrRO0j2urq5UrVr1aR8uRL5w7Eos3207D8DklypbV4KUfAeWdIWrB8DWEbr8CBXaWzoqi7p4O4n/rQxj/IsVqFTcnbebW/lSMUIIi3qqJOnAgQOsWLGCy5cvPzRAe9WqVWYJTAhrl6o3MnLFMYwmhY7V/GhXpZilQ7ov9jL8/DJEnwVHT+ixDErWt3RUFrXu2A0mrwvHx90Be9tsz1kRQhRA2X6nWLp0KY0aNeLkyZOsXr0avV7PyZMn2bJlCx4eHjkRoxBW6YtNZzgXlUhRNwc+6lTJ0uHcdzMMfmitJkjuJaDvhgKdIKXojHyw5iTjV52kRcWi/DqgDkE+BWt4gBDi6WS7JWnKlCnMnDmTIUOG4ObmxpdffklgYCADBw6kWDEr+iQtRA46cPEO8/+9AMCnL1fB09lKFjy9uBN+7QFpcVC0olpF28PKBpLnsmSdgYMXY/nopYp0quFn6XCEEHlItluSzp8/T/v26rgGBwcHkpKS0Gg0vPvuu8ybN8/sAQphbZJ1BkatOIaiwKu1StCioo+lQ1KFrYGfO6sJUsmG0Hd9gU2QFEVh3bEbRCfq8HJ1YM079SVBEkJkW7aTpMKFC5OQkACo1bdPnDgBQGxsLMnJyeaNTggr9On601yKTsbPw5GJHaxkfcL982FFbzDqoMKL8MYqcCqYNX+S0wxMWK12r/194iYAdloZgySEyL5sd7c1btyYTZs2UaVKFbp27crw4cPZsmULmzZtokWLFjkRoxBWY9e52/y05xIA07pUxd3Rwut6KQps+Rj+naFu1+4L7T4HG61l47KQM5EJjFlxgsj4ND55OZgXq8kQACHE08t2kvTNN9+QmpoKwLhx47Czs2Pnzp28/PLLTJw40ewBCmEtElL1jPntOAA965ekcVBRywZkNMAfw+HoL+p28wnQZFSBLRIZn6Kn94+HKO7pxNKBdQgo4mLpkIQQedxTF5Ms6KSYZMEz9rfjLDt4hZKFnVk/vHHuFyDUJavLiKTGgaMHXDsEa4dB9Dl4cRbUejN347ESSWkGHGxtsNXasOd8NDVKeuJoVzBb0oQQT5ajxSS1Wi03btzA29s7w/7o6Gi8vb0xGo3ZvaQQVm/r6SiWHbyCRgOfdama+wmSIRV2zYJ9cyE1Vq19VLc/9FkPUSchsEnuxmMlTt1IYMzyUNpW8WHI82VoUMbL0iEJIfKRbL/TP6rhKS0tDXt7K5kGLYQZxSbrGLtS7Wbr2yiQeqVz+UasS1YTpO3T7u9LjVUXq9XYQKOQ3I3HCiiKwrL9V/l8w1nKervSQcYeCSFyQJaTpK+++goAjUbD999/n2GtNqPRyI4dO6hQoYL5IxTCwiatDSMqIY3SRV0Y3aZ87gegtVVbkDKzb646DqkA0RlMjFt5gn9O3uK1eiUY0TpIKmgLIXJElpOkmTNnAuonuDlz5qDV3u/zt7e3JyAggDlz5pg/QiEs6O8Tkaw5eh0bDcx4tZplxrqkxqktR5kei4XUeHApkpsRWZSdVkMhZ3tmdKtCy2DvJz9ACCGeUpaTpIiICACaN2/OqlWrKFSoYNZgEQVHdGIa41eHAjCoaRlqlLTQ77yDuzoGKbNEydETHPP/xAFFUVi89wq+Ho60DPZmQgdptRZC5Lxst1Fv3bpVEiSR7ymKwoQ1J4hO0lHB143hLYMsE0hkKFzYrg7Szky9gWopgHwsLllPyK/H+ezvs4RHJlg6HCFEAZLtgdtGo5GFCxeyefNmoqKiMJlMGY5v2bLFbMEJYSlrj11n/YlIbG00fP5qNRxsLdDNdv0o/PwSuBRVF6nV2GSc3VZvIDQeAbaOuR9bLjl2JY6xK06QpDPw5WtVaVbBwrWphBAFSraTpOHDh7Nw4ULat29P5cqV0RTQwnUi/7oZn8r7v4cB8M7zQVQu7pH7QVw7rCZIqXHgVRa0duostiaj1DFIju5g1OfrBElRFD79KxxvdwemdalFMc/8+1qFENYp20nS0qVLWb58Oe3atcuJeISwKEVRGLcqlLgUPVWKezC4eZncD+LqofsL1frXg9d/Awe3+8fvDdLW5s+SGzFJOhJSDZT0cuarHtXwdLaTtdeEEBaR7Xcee3t7ypYtmxOxCGFxKw5dZcvpKOy1NszoWi33b85X9qstSGlxULIB9FxZIAZm33P4Ugxd5+xn0u+nACjq5iAJkhDCYrL97jNy5Ei+/PLLRxaVFCKvuhabwkd/nARgROtylPNxe8IjzOzy3rstSPFQ6rmHW5DyMZNJ4fsdF+m38AglCjkx9ZVKlg5JCCGy3922c+dOtm7dyvr166lUqRJ2dhlXQV+1apXZghMityiKwtjfjpOYZqBmSU/6Ny6duwFc3AWLXwV9EgQ0hh7LwL7gLNA6bmUYG8Ju0q9xAIOaBWIrrUdCCCuQ7STJ09OTzp0750QsQljML/sus/PcbRztbJjRtTpam1yckBDxLyzpCvpkKN0Muv8K9s659/wWpCgKGo2GF6v58lLNYrL2mhDCqmQ7SVqwYEFOxCGExVyKTmLKn+oYmLFtKxBYJBdbcC5sgyXdwZACZVpA98Vg55R7z28hRpPC/O0RnL+VxPRXK9O4XMGpGC6EyDueqk3bYDDwzz//MHfuXBIS1OJu169fJzEx0azBCZHTjCaFj/44SYreSP3ShXmzQUDuPfm5zbCkm5ogBbWG7ksKRIJ0KyGNQT8dYc72CMoUdUGGNwohrFW2k6RLly5RpUoVOnXqxJAhQ7h16xYA06dPZ9SonF1oc+rUqWg0GkJCQtL3KYrCpEmT8PPzw8nJiWbNmhEWFpbhcSNGjKBw4cKULFmSpUuXZji2fPlyOnTokKNxC+uTojOgM5i4lZDG1z1q8P2btZnZtTo2udXNdvYf+PU1MKRCubbQ7Rewy/91gPacj6br7H1cuJXEvDdrMKh56dz7NxdCiGzKdpI0fPhwateuTUxMDE5O9z/1du7cmc2bN5s1uAcdOHCAefPmUbVq1Qz7p0+fzhdffME333zDgQMH8PX1pVWrVuktXH/88QdLlixh48aNTJs2jT59+hAdHQ1AbGws48eP59tvv82xuIX1SdMbmbP9ArU/2UT9qZupP3Uzx6/GUtgll+oOndkAS18DYxqUbw9dfwZbh9x5bgs7cimOcr5uLH+7HnUDC1s6HCGEeKxsJ0k7d+5kwoQJ2NtnvKGUKlWKa9eumS2wByUmJvL6668zf/78DOvGKYrCrFmzGD9+PC+//DKVK1dm0aJFJCcns2TJEgBOnTpFs2bNqF27Nq+99hru7u5cuHABgDFjxjB48GBKliyZI3EL65OiM/DdtvN8ufks8SnqmmfxKQa+2nyO77adJ1mXw+ugha+Hpa+DUQcVO0DXRWCbP4tC3nMzPpX1oZEADGwWyOye1fFyzd+vWQiRP2Q7STKZTBiNxof2X716FTe3nKnpMmTIENq3b0/Lli0z7I+IiCAyMpLWrVun73NwcKBp06bs3r0bgGrVqnHw4EFiYmI4dOgQKSkplC1blp07d3L48GGGDRuWpRjS0tKIj4/P8CXyHq2NDQt2R2R6bMHuCGxtcnDq+ak/YNkbYNJD8EvQZYG63Eg+tvPsbbrN3s9X/5wnRWdEa6OR7jUhRJ6R7TtCq1atmDVrVvq2RqMhMTGRDz74IEeWKlm6dCmHDx9m6tSpDx2LjFQ/nfr4+GTY7+Pjk36sTZs29OzZkzp16tC7d28WLVqEi4sLb7/9NnPnzmX27NmUL1+eRo0aPTSW6UFTp07Fw8Mj/cvf39+Mr1LkloRUfXoL0n/FpxhISNXnzBOf/B1W9FYTpMqvwCs/5OsESW80MXPjOYb8coxKxd1ZMqAOTvYWWCRYCCGeQbZLAMycOZPmzZsTHBxMamoqPXr04OzZsxQpUoRff/3VrMFduXKF4cOHs3HjRhwdHz2o9b+L7N6rvXLPpEmTmDRpUobtli1bYmdnx+TJkwkNDWXdunX06tWLQ4cOZfoc48aNY8SIEenb8fHxkijlQW6Odrg72WaaKLk72eLmmAOJy4lVsLIfKEao0hVemg3abP/p5Smzt17g5z2XebdVWXo1LCmtR0KIPEmjPMX6IikpKSxdupRDhw5hMpmoWbMmr7/+eoaB3OawZs0aOnfujFZ7/xOo0WhEo9FgY2NDeHg4ZcuW5fDhw9SoUSP9nE6dOuHp6cmiRYseuubp06fp0KEDR44c4ccff2Tnzp0sX76cpKQkXF1diYuLw939yWtlxcfH4+HhkeXzhXUIj0xg3fHrfL3l3EPHhrcIYmDT0jjbmzGBOb4CVg8AxQTVXoNO34JN/m1RiUvW4+FsR2yynsvRyVT197B0SEIIkUF27t9PdTdwcnKiT58+9OnT56kCzKoWLVoQGhqaYV+fPn2oUKECY8eOpXTp0vj6+rJp06b0JEmn07F9+3amTZv20PUURWHAgAHMmDEDV1dXjEYjer3avXLvu8lkytHXJCzn5PV4Riw/wuJ+9dFoYOHui8SnGHB3sqVPw0AGNyuDg50ZE5hjy2DNIDVBqt4TOn6VbxMkvcHEl/+cZ93xG6waUp/CLvZ4OkuCJITI27KdJE2dOhUfHx/69u2bYf+PP/7IrVu3GDt2rNmCc3Nzo3Llyhn2ubi44OXllb4/JCSEKVOmEBQURFBQEFOmTMHZ2ZkePXo8dL358+fj7e1Nx44dAWjUqBGTJk1i7969rF+/nuDgYDw9Pc0Wv7AeOoOJUSuOcToyka82n2XsCxUY2jyIhFQ9bo52GEwm8yZIR5fAmsGAAjV7wYtfQk4OCregqzEpjF1xgtORCbzbqiyFnPPvWCshRMGS7SRp7ty56dPrH1SpUiW6d+9u1iQpK8aMGUNKSgqDBw8mJiaGevXqsXHjxodm2t28eZMpU6akz3oDqFu3LiNHjqR9+/Z4e3tn2j0n8odvt57j5I14CjnbMfT5oPQuNS9XtT6R/dMVn8/c4Z9g7TBAgdp9od2MfJsg7TobzdjfTuDmaMuit2pTubh0PQsh8o9sj0lydHTk1KlTBAYGZth/4cKF9MHcBYGMSco7TlyL46Vvd2EwKXz9Wg06VPPLuSc7uADWhag/1+kP7T4DTf4dtHzqRgKLdl3if+3L4+4kLUhCCOuXnft3tj/e+vv7s2vXrof279q1Cz+/HLz5CPEU7nWzGUwK7ar48mLVYjn3ZAe+v58g1Xs73yZIl6OT+WDNSXQGExWLufFpl8qSIAkh8qVsd7f169ePkJAQ9Ho9zz//PACbN29mzJgxjBw50uwBCvEsvt5yltORCXi52PNxp8oPlYswm31zYf0Y9ecGQ6H15HyZIG04cZMP157Cy8WeqIQ0ShTK/wvyCiEKrmwnSWPGjOHOnTsMHjwYnU4HqF1wY8eOZdy4cWYPUIindfxqLN9tOw/A5Jcqp48/Mrs938GGu7/7jYZDyw/zXYKUqjfy+d9nWXHwGm0r+zCxQwVcHfN3rSchhMjWu5zRaGTnzp2MHTuWiRMncurUKZycnAgKCsLBoWAs0CnyhjSDkZHLj2E0KXSo5scLVXKom23317BxgvrzcyOgxfv5LkEC2H3uDmuP3mBihwq8Ussv51rkhBDCipht4HZBIwO3rdu0v08ze9t5irjas/HdphR2yYEFVXfOhH8mqT83GQPN/5fvEqRjV+KodrcgZGRcKr4ej658L4QQeUGODtyuUqUKFy5ceOrghMhpR6/EMnf7vW62KjmTIO347H6C1GwcPD8+XyVIKTojk34/Ra/vD3L4UgyAJEhCiAIn20nSJ598wqhRo1i3bh03btwgPj4+w5cQlpSqNzJy+VFMCrxU3Y+2lX3N/yTbpsGWyerPzSdAs/fM/xwWdD4qkdfnH2B9aCQfvlSRGiU9LR2SEEJYRLZHXrZt2xaAjh07ZhiXcG9RWaPRaL7ohMimmZvOcP5WEkXdHJjUsZJ5L64osHUK7Jiubrf4ABqPePxj8pjjV+Pov/Awfp5OLB5Qh7LerpYOSQghLCbbSdLWrVtzIg4hntmhS3eY96/aFTy1cxU8nc3YzaYosOVj+HeGut3qY2g0zHzXtzCTScHGRkNFXzfeahxAzwYlcbbPn+vMCSFEVmU7SWratGlOxCHEM0nRGRm14jiKAq/ULEHLYB/zXVxR1PFHu2ap222mQIMh5ru+hZ29mcj4VWF82KkiFf3cGdC0YE/KEEKIe55qQal///2Xnj170rBhQ65duwbAzz//zM6dO80anBBZ9fnGcCJuJ+Hj7sD7HYLNd2FFUaf430uQ2k7LNwmSoiisPHiN1+cdQFHASVqOhBAig2wnSStXrqRNmzY4OTlx+PBh0tLSAEhISGDKlClmD1CIJzlw8Q4/7ooA4NNXquJhriUyFAX+Hgd7vlG3230O9QeZ59oWlpRmYNzKMD764zQdqhfj5/61CSjiYumwhBDCqmQ7SZo8eTJz5sxh/vz52Nndvxk1bNiQw4cPmzU4IZ4kWWdg9IpjKAp0rV2C5uW9zXNhRVGXGdk3W91+cSbU7W+ea1uBZJ2RE9fi+bRLJSZ2qICjnbQiCSHEf2V7TFJ4eDhNmjR5aL+7uzuxsbHmiEmILJv+dzgXo5Mp5uHIhBfN1M1mMsFfo+DgD4AGOnwJtd40z7UtSFEUVh++QfMKRSjq5sCaofWx1T5Vj7sQQhQI2X6HLFasGOfOnXto/86dOyldurRZghIiK/ZeiGbh7osATHulKu6OZuhmM5lgXcj9BKnTN/kiQUpINTB6+Qk+XHuKLaduAUiCJIQQT5DtlqSBAwcyfPhwfvzxRzQaDdevX2fPnj2MGjWK999/PydiFOIhSWkGRv92DIDX6pakSbmiz35Rkwn+eAeO/AIaG3hpNlTr/uzXtbCwa/GMWXGCuBQ9M7pVoWWwmbokhRAin8t2kjRmzBji4uJo3rw5qampNGnSBAcHB0aNGsXQoUNzIkYhHvLp+tNcuZNCcU8nxrev+OwXNBnh96FwbImaIHWeB1VfffbrWtidJB19FxyijLcrc3vVoERhJ0uHJIQQeUa2F7i9Jzk5mZMnT2IymQgODsbVtWBV5pUFbi1n97nb9Ph+HwCL+9WjUdkiz3ZBkxHWvA3Hl4FGC6/Mh8qvmCFSy4lP0eNsr8VWa8O+C3eoWdITO1vpXhNCiBxZ4DY5OZkhQ4ZQvHhxvL296devHwEBAdStW7fAJUjCchLTDIz+7TgAPeuXfPoESZcMRh0k3VK/B3cE72Do8mOeT5COX42j25z9/PDvJQDqlS4sCZIQQjyFLHe3ffDBByxcuJDXX38dR0dHfv31V95++21WrFiRk/EJkcGUv05xLTaFEoWcGPfCU3azGVLV4pD75kJqLDh6qtP739oEDnk34TeZFH7ec5mv/jlPsJ8bHarnwOK+QghRgGQ5SVq1ahU//PAD3burA1l79uxJo0aNMBqNaLVSY0XkvB1nbrFk32UAPutSDReHbA+pU1uQds2C7dPu70uNhR2fqWORGoWAvbM5ws1VqXojo5aH8u+ZaHo3KsXQFqWxk9lrQgjxTLL8LnrlyhUaN26cvl23bl1sbW25fv16jgQmxIPiU/W8t1LtZuvdMIAGZbye7kJaW7UFKTP75qrH8yAHWxt83R355vVqvNu6rCRIQghhBlm+IxiNRuztM66qbmtri8FgMHtQQvzXJ+tOcT0ulVJezoxpW/7pL5Qap7YcZXosFlLjweUZB4LnEpNJYcGuSwQUcaZFRW8mdKhg6ZCEECJfyXKSpCgKvXv3xsHBIX1famoqgwYNwsXl/ppPq1atMm+EosDbFh7FsoNX0GjUbjZn+2do7bF3U8cgZZYoOXqCY96YqRidqGPC6jD2nL/DOy3KWDocIYTIl7J8t3nzzYerDvfs2dOswQjxX3Epet5bGQpAn4aB1A0s/PQX2zsHPP3VQdo7Pnv4eL2BYDSA1v7hY1bk4MUY3vvtBAaTwuw3qj9916MQQojHynKStGDBgpyMQ4hMfbzuJJHxqQQWcWF0m2foZju2DP4eC0XKQb/N6iDtB2e31RsIjUeAraO5Qs8RJpPC9PVnCCjiwtRXKlHUzeHJDxJCCPFU8uYoVVEgbD51k98OXUWjgc9frYqT/VPOogz/Wy0WCVDmeXBwU2exNRmljkFydAej3qoTpNsJaSTrjJT0cua7ntUp5GKP1kZj6bCEECJfkykwwirFJusYt0rtZuvfuDS1Sj1lN9vFXbDiTVCMULUbtJkKGo06zV9rrw7S1tqDvcuTr2Uh+y7coeuc/XzyZzgARdwcJEESQohcIC1Jwip9+MdJohLSKFPUhRGtyj3dRW4cg1+7q8Ujy70Anb4Fm7zzucBgNDF3ewTzd1ykXunCTHk52NIhCSFEgSJJkrA6G8MiWX3kGjYa+PzVajjaPUU32+1z8PPLkBYPpRrBqwtAa2f+YHPQqOWhbA+/zZDmpXmrcQA20nokhBC5SpIkYVViknT8b/UJAAY0KUONkoWyf5G4a/DzS5B8G3yrwmu/gp2TeQPNQSaTgo2Nhs41i/NGg5LUCniKfwMhhBDPTJIkYVU+WBvG7cQ0grxdCWkZlP0LJEXDz50h7gp4lYWeq8DRw/yB5gCD0cS3Wy5wPTaVT7tUomn5vFHUUggh8qu8M0BD5HvrQ2+w9th1tDaap+tmS0uAxa/A7XBwLw5vrAbXojkTrJlFxqXy1sLDLNp9mQrF3CwdjhBCCKQlSViJ6MQ0JqxRu9neblqGav6e2buAPhWW9oDrR8CpsJogeZY0f6A5YHv4bSauDsPJXsuPfWpSvaSnpUMSQgiBJEnCSrz/exjRSToq+LrxTouy2Xuw0QAr34KIHWDvCj1XQtFnKDyZy0KvxlGjpCcfvRSMh3PeGlwuhBD5mSRJwuLWHb/On6E3sL3bzeZgm41uNkWBP4bD6XVqvaPuS6B4zZwL1kyuxaRw7Eoc7ar68nbz0thoQKOR2WtCCGFNJEkSFnUrIY2Jd7vZBjcvS+Xi2RhkrSiwcQIc/UVdZqTLAijdNIciNZ8tp27x/pqTFHKxo2WwN/a2MjRQCCGskSRJwmIURWHCmlBikvVULObO0ObZ7Gbb+QXs+Ub9ueM3UPFF8wdpRjqDiZkbz7Jk31VaVCzKpE4VJUESQggrJkmSsJi1x66zIewmtjYaZrxaLXsJw8EfYfNH6s+tP4Ear+dMkGb01T/nWXHwGu+1K0f3uiWke00IIaycJEnCIqLiU3n/9zAAhrUIItjPPesPPrES1o1Qf248ChoOzYEIzScmSUchF3v6Ni5F+6o+VMzOaxVCCGEx0tYvcp2iKPxv9QniUvRULu7O283KZP3B5/6BVQMBBWr3hecn5FiczypNb+STdad5+du9xCXrKexiLwmSEELkIdKSJHLdmqPX+OfUTey0Gma8Wh07bRZz9cv7YNkbYNJDpZeh3edgpV1WF28nM2ZFKBG3kxnTNgh3J/lTE0KIvEbeuUWuuhmfygd3u9lCWpajvG8Wq0tHnoAlr4I+Gcq2hM5zweYpFr7NBVtP3+J/K8Mo6ubAL/1rZ/01CiGEsCqSJIlcoygK41aFEp9qoGoJDwY2KZ21B965AL+8DKlx4F8Puv4EtvY5G+wz8HF3oGWwN+PalcPZQf7EhBAir5IxSSLX/HboKltOR2GvtWHGq9WwzUo3W0KkumBt4k3wrgQ9loG9S84Hm00XbiUxcfVJ9AYTwX7ufNw5WBIkIYTI4yRJErniRlwKH/1xEoARrcsR5JOFLqjkO2qCFHMRCgXAG6vAqVCOxvk01h69wWtz93PiWhzRSTpLhyOEEMJM5KOuyHGKojB2ZSgJaQZqlPSkf+MsdLPpkmBJN4g6Ca6+8MYacPPN8VizI1lnZOqf4aw9eoNONYrxXrvyONtb5zgpIYQQ2SdJkshxyw9eYceZWzjY2vD5q9XQ2jxhRppBB8t6wtX94OgJb6yGwoG5Emt27Dp7m41hN5n8cjAdqhWzdDhCCCHMTJIkkaOuxabw8bpTAIxuU54yRV0f/wCTEVYPgPNbwM4ZXl8BPsG5EGnWKIrCkcux1CxViFaVfKjm74m3u4OlwxJCCJEDZEySyDGKojD2t+MkphmoXaoQfRo9oTVIUeDPkRC2GmzsoNsv4F83d4LNgqQ0A/9bGUafHw9z/GocgCRIQgiRj0lLksgxS/ZfZue52zja2TC9S9Und7Nt/ggOLQA08Mp8KNsiV+LMitM3Ehiz4gS3EtL4tEslqpbwsHRIQgghcpgkSSJHXLmTzCd/qt1sY9pUoPSTutl2fw07v1B/7jALKnXO2QCz4fClWAb+dITAIs4sHVSXUl7Olg5JCCFELpAkSZidyaQw5rfjJOuM1A0oTO+GAY9/wJFfYOPdNdhafAC1eud0iFliMinY2GioXNydQc0C6VnfHwc7mb0mhBAFhYxJEma3eN8l9lyIxslOy2evVsXmcd1sp/6Ate+oPzccBs+9mztBPkHYtXi6zN5HeGQC9rY2vNU4QBIkIYQoYCRJEmZ1OTqZKX+dBmBcuwqU8npMdewL2+C3vqCYoMYb0Oojiy9YqygKi/deodcPB3G0tcHFXhpbhRCioJI7gDAbk0nhw3VhpOiN1C9dmJ71Sj365GuHYOnrYNRBxQ7w4iyLJ0jxKXreX3OKradv0bO+P8NblcXeVj5HCCFEQWXVd4CpU6dSp04d3Nzc8Pb25qWXXiI8PDzDOYqiMGnSJPz8/HBycqJZs2aEhYVlOGfEiBEULlyYkiVLsnTp0gzHli9fTocOHXL8teRnKToDOoOJqIQ0vn6tBt+/WZuZXas/upst6jT80gV0iRDYFF75AbSWz9dTdEbO30pk1mtVGf1COUmQhBCigLPqu8D27dsZMmQIe/fuZdOmTRgMBlq3bk1SUlL6OdOnT+eLL77gm2++4cCBA/j6+tKqVSsSEhIA+OOPP1iyZAkbN25k2rRp9OnTh+joaABiY2MZP3483377rUVeX36QpjcyZ/sFan+yifpTN1N/6maOX42lsIt95g+Ivayux5ZyB4rXgu5LwNZytYYURWHZ/qvEJuvx8XBk9ZD6NK9Q1GLxCCGEsB4aRVEUSweRVbdu3cLb25vt27fTpEkTFEXBz8+PkJAQxo4dC0BaWho+Pj5MmzaNgQMHMn36dA4fPpzeguTj48O6deuoU6cOAwYMoGLFirz7bvYHC8fHx+Ph4UFcXBzu7u5mfZ15RYrOwJztF/hy89mHjg1vEcTApqVxfnBMT2IU/NgW7pyHohWgz3pwLpyLEWcUm6xn4uqT7Dhzm8mdg+lQXZYWEUKI/C4792+rbkn6r7g4tcpx4cLqjTUiIoLIyEhat26dfo6DgwNNmzZl9+7dAFSrVo2DBw8SExPDoUOHSElJoWzZsuzcuZPDhw8zbNiwLD13Wloa8fHxGb4KOq2NDQt2R2R6bMHuCGxtHvj1So2DX15WEySPkup6bBZMkI5cjqXr7H0cvxrH169XkwRJCCHEQ/JMkqQoCiNGjOC5556jcuXKAERGRgJq69CDfHx80o+1adOGnj17UqdOHXr37s2iRYtwcXHh7bffZu7cucyePZvy5cvTqFGjh8YyPWjq1Kl4eHikf/n7++fQK807ElL1xKcYMj0Wn2IgIVWvbuhTYEl3iAwFl6LQaw24++VeoP9xKyGNAYuOUMzTkeWD6tKkXBGLxSKEEMJ6WX60bBYNHTqU48ePs3PnzoeOaf4zK0pRlAz7Jk2axKRJkzJst2zZEjs7OyZPnkxoaCjr1q2jV69eHDp0KNPnHzduHCNGjEjfjo+PL/CJkpujHe5OtpkmSu5Otrg52oFRD8vfhMu7wcEdeq4CrzIWiFbtXnNztKWomwPf9axOjZIe2GrzzOcEIYQQuSxP3CHeeecd1q5dy9atWylRokT6fl9fX+B+i9I9UVFRD7Uu3XP69GkWL17Mxx9/zLZt22jSpAlFixala9euHD58+JHdaA4ODri7u2f4KuguRSfxZoOATI/1aRiIwWiANYPh7AawdYQey6BY1dwN8q6DF2Po8t0+Fu66BECdwEKSIAkhhHgsq75LKIrC0KFDWbVqFVu2bCEwMOMq8oGBgfj6+rJp06b0fTqdju3bt9OwYcNMrzdgwABmzJiBq6srRqMRvV7tErr33WQy5eAryj/ORSUwbOkRejcMYFiLsrg7qY2S7k62DG8RxOCmpXHePAFCl4ONLXT9CUo9/H+S04wmhbnbIui/8DClvJzoUE3GHgkhhMgaq+5uGzJkCEuWLOH333/Hzc0tvcXIw8MDJycnNBoNISEhTJkyhaCgIIKCgpgyZQrOzs706NHjoevNnz8fb29vOnbsCECjRo2YNGkSe/fuZf369QQHB+Pp6ZmbLzFPMhhNjFxxnFM3EpixMZwJLwYztHkQCal63BztMJhMOOz+HPbPBTTw0hwo1ybX40xOMxCy9Dj7I2IY0CSQgc0C0T5uiRQhhBDiAVadJM2ePRuAZs2aZdi/YMECevfuDcCYMWNISUlh8ODBxMTEUK9ePTZu3Iibm1uGx9y8eZMpU6akz3oDqFu3LiNHjqR9+/Z4e3uzaNGiHH09+cW8fy9w7Eosbo62DGtRLn2av5erWu/Ifu882DZVPbndZ1D1VYvE6WSvpWRhZ95qHEC90pabSSeEECJvylN1kqxJQa2TFB6ZQIevd6IzmpjxajVeqVUCdMlqxezUOHBwg3P/wD8fQpVXoemYXI3vXvdacHE3mpWXopBCCCEyys7926pbkoR10RtNjFpxDJ3RRMuK3rxcszgYUmHXLNg3F1JjwdET6vaHfv+os9lyUVR8GuNWnuDwpVhGtA7K1ecWQgiR/0iSJLJs7vbzhF6Lw8PJjimdq6DRp6gJ0vZp909KjYUdn4HGBhqFgL1zrsS261w041eFYWtjw/zeNakdUChXnlcIIUT+ZdWz24T1OHUjPn35kQ87VsLb3VHtYts3N/MH7Juba4vWGowmZmw4S3Axd5a/XVcSJCGEEGYhLUniifRGEyOXH0NvVGgd7EOn6nerZafGqS1HmUmNhdR4cMm5ataRcanojSb8Czsz/80aFHK2x0ZmrwkhhDATaUkST/Tt1nOcvBFPIWc7Pulc5X41c0cPdQxSZhw9wTHnxiTtOHObrrP3MW39GUCdWScJkhBCCHOSJEk8Vtj1OL7Zcg6AjzpVpqibw/2Dt86og7QzU28gGDNf1+1Z6O92rb2z+BjV/D2Z3LmS2Z9DCCGEAOluE4+hM6jdbAaTwguVfXmx6gPVqk/9AZs/gj7r1UHaD85uqzcQGo9QlyIxI0VReGfxMQ5ExDCyTRBvNPB/aN0+IYQQwlwkSRKP9M2Ws5yOTKCwiz0fv1T5fkJyKxxWDwJdIhz+WZ3F1mSUOgbJ0V1d1NbMCZLJpGBjo+G1ev4Mfr40VUt4mPX6QgghxH9JkiQyFXo1jm+3nQfg406VKXK3mjapcbD0dTVBCmgMDd+5P4vt3iBtrb3Z4tAZTMzadI6YZD1TXg6mafmcGwguhBBCPEjGJImHpBmMjFpxDKNJ4cWqxWh/r5vNZFJbkKLPgntx6LIgR6f5X72Twps/HGT5gatUKV5wqpoLIYSwDtKSJB7y1eazhN9MoIirPR91qnz/wL+fQ/hfoHWAbj+Da84t+7Ep7CaTfj+Fp7M9P/WrTbCfJElCCCFylyRJIoNjV2KZfbebbfJLVSjscrfr7MwG2DpF/fnFL6B4rRyNI+x6Ag3LevF+x4q4OcqvqRBCiNwndx+RLlVvZOSKY5gU6FTdj7aVfdUD0edhZX9AgTr9oEbPHHn+S9HJhF2Lp11VX95pUQYbDTJ7TQghhMVIkiTSzfznDOeiEinq5sCkDnfrD6UlqgO10+LAvz60mZojz70+NJKP1p6mmKcjrSp5Y6eV4XJCCCEsS5IkAcDhyzHM33EBgCmdq1DIxR4UBX4fDLdOgasvdF0EtuabuQZq69X09WdYeeg67ar6MuHF8pIgCSGEsAqSJAlS9epsNpMCL9coTqtgH/XAri/h5O9gYwddfwI3X7M/9xcbz7HuWCQfdKxI55rFpHtNCCGE1ZAkSTBjYzgXbiXh7ebAB/e62c5vgc0fqj+/MA1K1jPrc0YnpuHl6sDApoG8Wrs4QT6uZr2+EEII8aykX6OAO3jxDt/vjADg01eq4OFsBzEX4be+oJigxhtQu6/Zni9ZZ2Ti6pN0nb2fhFQDXq72kiAJIYSwStKSVICl6IyM/u04igKv1irB8xV8QJcMy3pCSgz41YR2n4OZusDORSUyevkJrsemMOHFCjK1XwghhFWTu1QB9tmGcCJuJ+Hr7siEF4PVgdp/DIfIUHAuohaMtDPPGmwbTtzk/TUnKVHIiaUD6xJY1MUs1xVCCCFyiiRJBdS+C9Es2P1AN5uTHeydDaHLQaNVZ7J5lDDb8/l5OtKhWjFGtQ3C0U5rtusKIYQQOUXGJBVAyTpDejdb9zr+NCvvDRH/wobx6gltPoGA5575ecIjExi/Kgy90USVEh5M6FBBEiQhhBB5hiRJBdC09ae5fCcZPw9HxrevCHFXYUVvUIxQtRvUG/RM11cUheUHrtJz/kHO3kwkNllvnsCFEEKIXCTdbQXMnvPRLNpzCYBpXaripjWqA7WTb4NvFXhx1jMN1E5MNfDh2lNsDIuiW53ijGwThIO0HgkhhMiDJEkqQJLSDIz+7RgAPeqVpHHZIrB2KFw/Ak6FoNtisHd+pufYceY2u89F81nXyrSu5GOOsIUQQgiLkCSpAJm6/hRXY1Io7unE/9pVhIM/wpFfQGMDXX6EQqWe6rqKonDgYgx1AwvzQhUf6pUuhJerg5mjF0IIIXKXjEkqIHadu80vey8D8FmXqrjePATrx6oHW3wAZZ5/quvGp+gZuSyU/guPcOpGAhqNRhIkIYQQ+YK0JBUACal6xvx2HIA36peiobce5r0BJj0EvwSNhj/VdUOvxjFmxQkSUg3M7F6VisXczBi1EEIIYVmSJBUAU/46zbXYFPwLO/Fe69Lw60uQeBO8g6HTt081UHvfhTsM/vkoFf3c+L53TYoXcjJ/4EIIIYQFSZKUz+04c4tf99/rZquGy5YJcGUfOHhAt1/AIXvrphlNClobDdX9PRjWsgw96vljZyu9tkIIIfIfubvlY/GpesauVLvZejcMoH7sX3DwB0ADr8wHrzLZut7Ry7G8/O1ezt5M/H97dx9X4/3/Afx1Op3O6T6Kim6UbkQiJd8wMWJfZs32G8aUYZZEaZsytszc34+5/+6LfRkNZWY2YiJM0Q1RSaS71foyKro7nfP+/dHXNUcHRbrb+/l49Niuz+dzXdf7endxvX2u61wHUokYfv2suUBijDHWavEVrhVbeDgVBcUVsDbWQZjLA+CnkJqOQZ8CDsPqvB2lkrD9TDYmbU+EkY6Ev5iWMcbY3wJf7Vqpk9eK8P3FPIhEwJoRHSGLfBNQVAGOI4BXPq7zdu4+qMK8qFScuX4Hk1+xxrRBtpCIubZmjDHW+nGR1AoVl8kR9r/bbFM8LdErbhZQkg8Y2wOjNgMadS9yKquVyL9bjo0TeqKfnfHLCpkxxhhrdnhKoBVacDgVf5RUwtZEF6Hi3UD2GUBLDxi7G5AZPHN9pZKw+7cclJTLYWYow4Hp/+ACiTHG2N8OzyS1MsdT/8CBxJrbbN/0ugHN05trOkZtBto5PnP9O/cr8WlkKuJu/gljfSleczaFWOP5v8uNMcYYa6m4SGpF7pVV4dOoFADA3F7VsDk3t6bjlY8Bp5HPXD/u5p/49MBVEIDNE1zxj85tX2K0jDHGWPPGRVIr8sWPqSgqrYSriQKT8uYB1eWAnXfNp9meobC4AgG7kuFmbYTFb3WDiT5/tQhjjLG/Ny6SWomjVwsRlZQPTZESOw22QuP3HKCNTc37kDTET1zvzv0qGOlIYGYow1ZfV/S0MuLba4wxxhj4we1W4e6DKsyNugIA+E+nYzD4PRaQ6NQ8qK3d5onrncu8g7c3nseu32reyO3WqQ0XSIwxxtj/8ExSKxB+6Cpu36/E5DbJ8Cz4tqbR52vAtJva8dUKJTadzMI3Z27Bs3NbjOxp3ojRMsYYYy0DF0kt3M8pBTh06Xc4ifPwqfzrmsa+MwDnt9WOv19RjcDdybicV4IZgzvj/X7W0ODZI8YYY6wWLpJasDv3KzHv4BUY4AG+018PcUUZYOMFDJ7/xHV0pWLYm+ohyNsOrlZGjRYrY4wx1tJwkdSCff7DVfz5oAIRelvQpiIXMLQC/m87IFb9tcoVSnx94gbcOrXBAAcTzH29SxNFzBhjjLUcXCS1UIcv/46fUgoQIomER/VFQFMGjPkPoKv6Zuzf75UjdN8VpP5eio5ttJsoWsYYY6zl4SKpBfpvaSU+O3gF3hoXMVMcWdM48iugQ0+VcSfT/4vPD6ZCT6qJ7ZPc4GJp2PjBMsYYYy0UF0ktDBFh3sEUtC2/ha+km2oaPT4EeoxVGSdXKLE2OhNu1m2w4E0nGGhLmiBaxhhjrOXiIqmFOXTpd5y9moWD0jXQQTlg1RcYtkjoz7tbDiKCZVsd/Pt9N7TVlUAk4k+vMcYYY/XFL5NsQYpKKzD/hxSskmyGneh3QL8DMHonIK6ZJTqeWoSxm+Ox5lgmAMBYT4sLJMYYY+w58UxSC0FEmBt1BeOqDmCY5CJIrAXRmP8Aeu1RKVdg1bFMRMTnwbtre4T7ODV1uIwxxliLx0VSC3EwOR/y9KP4SLIPACAavhKwcAcRIWBXzcsh545wxDu9O/LsEWOMMdYAuEhqAf4oqcC2H05gj+RraIgIcJsIuPmhWqGEplgDE/pawcxAhi7m+k0dKmOMMdZqcJHUzBERwvfHY5VyBQw1ykAde6NyyBIs+yENcoUSC9/qhoGO7Zo6TMYYY6zV4Qe3m7n9F3MxImsRnDRyUa3dDreG/AvvbU/BT5cL0cvaCETU1CEyxhhjrRIXSc1YQXE5sn9ahpHi81CINPGL+3a8+90tVCuU2D21N95y4+ePGGOMsZeFb7c1U0SEw4f2YxbtBkQAhi3GtWIzeHeVY84IR+hoiZs6RMYYY6xVazUzSRs3boSNjQ1kMhnc3NwQGxsr9K1cuRKmpqYwNTXFmjVrVNaLi4uDm5sbFApFY4eslqLyAUhRBbr/X0wZ8zZu/nM3Im0XQtxnKmZ52+HLUV25QGKMMcYaQauYSYqIiEBwcDA2btyIfv36YcuWLfjnP/+J1NRUFBcX4/PPP8fhw4dBRHj99dfh7e0NZ2dnyOVy+Pv7Y+vWrRCLm77wIHkFRGe/gih+C1B+D1GSkVim8IVN+954Q0nQFLeampYxxhhr9lpFkbR69WpMnjwZU6ZMAQCsXbsWR48exaZNm+Dq6goXFxe8+uqrAAAXFxekpaXB2dkZK1aswIABA9C7d++mDB9AzQyS6OxX0Di9DGUkw5cIwhG5F95CND62N4Koujsg1m3qMBljjLG/jRZfJFVVVSEhIQFhYWEq7UOHDsW5c+fg6+uLjIwM5OTkgIiQkZEBZ2dnZGZmYseOHUhISKjTfiorK1FZWSksl5SUNOhxaGhKamaQAKzA+4iBB5ZgDYaLYoGLRqBBIQ26P8YYY4w9XYu/f3P79m0oFAqYmpqqtJuamqKwsBBOTk5YvHgxvL29MXToUCxZsgROTk7w9/fH8uXLcfToUTg7O8PV1RWnT59+4n6WLFkCQ0ND4cfS0rJhD6S8GKi4BwCYjj3Yg49rCiSgpr2iYYsyxhhjjD1di59Jeujxj8ITkdDm7+8Pf39/oW/Hjh3Q19eHp6cnHB0dceHCBeTl5WHs2LHIysqCVCqttf05c+YgJOSv2ZySkpKGLZS0DQGZEVBxDyaiezDBvb/6ZEaAzKDh9sUYY4yxZ2rxRZKJiQnEYjEKCwtV2ouKimrNLgE1M08LFizA6dOnERcXBwcHB9jb28Pe3h5yuRwZGRno3r17rfWkUqna4qmhKKvlEPX5EBqnltXu6/MhqFoOsVjrpe2fMcYYY6pa/O02LS0tuLm5ITo6WqU9Ojoaffv2rTU+ODgYs2bNgoWFBRQKBeRyudBXXV3dZK8CEEt1IeofAqVXaM3MEQDIjKD0CoWofwjEUn5omzHGGGtMLX4mCQBCQkIwYcIEuLu7w9PTE1u3bkVOTo7KLTagpnC6fv06vv32WwCAh4cH0tPT8fPPPyM3NxdisRiOjo5NcQgAAJFEBmXfINCAj2ueQZIZgKqroCGRNVlMjDHG2N9VqyiSxowZgzt37mDBggUoKCiAs7Mzjhw5Amtra2FMeXk5AgMDERERAQ2Nmgm0jh07Yv369Xj//fchlUqxc+dOaGtrN9VhAMBfM0a6JjXLfIuNMcYYaxIi4m9IfS4lJSUwNDREcXExDAz4oWrGGGOsJajP9bvFP5PEGGOMMfYycJHEGGOMMaYGF0mMMcYYY2pwkcQYY4wxpgYXSYwxxhhjanCRxBhjjDGmBhdJjDHGGGNqcJHEGGOMMaYGF0mMMcYYY2q0iq8laQoPX1ReUlLSxJEwxhhjrK4eXrfr8oUjXCQ9p9LSUgCApaVlE0fCGGOMsfoqLS2FoaHhU8fwd7c9J6VSid9//x36+voQiUQNuu2SkhJYWloiNzeXvxfuJeI8Nw7Oc+PgPDcOznPjeJl5JiKUlpaiQ4cOwhfePwnPJD0nDQ0NWFhYvNR9GBgY8B/CRsB5bhyc58bBeW4cnOfG8bLy/KwZpIf4wW3GGGOMMTW4SGKMMcYYU4OLpGZIKpUiPDwcUqm0qUNp1TjPjYPz3Dg4z42D89w4mkue+cFtxhhjjDE1eCaJMcYYY0wNLpIYY4wxxtTgIokxxhhjTA0ukhhjjDHG1OAiqQls3LgRNjY2kMlkcHNzQ2xsrNC3cuVKmJqawtTUFGvWrFFZLy4uDm5ublAoFI0dcrO2ZMkS9O7dG/r6+mjfvj3efPNNXLt2TWUMEWH+/Pno0KEDtLW1MXDgQFy9elVlTEhICNq2bQsrKyvs3btXpe/777/HyJEjX/qxtCRLliyBSCRCcHCw0MZ5bjj5+fl47733YGxsDB0dHfTs2RMJCQlCP+f6xVVXV2PevHmwsbGBtrY2bG1tsWDBAiiVSmEM57n+Tp8+jZEjR6JDhw4QiUQ4ePCgSn9dclpZWYkZM2bAxMQEurq6eOONN5CXl6fSP2HCBBgYGMDR0RG//vqryvrLly/HjBkzXvxgiDWqvXv3kkQioW3btlFqaioFBQWRrq4uZWdn0+XLl0lbW5tOnDhBx48fJ5lMRikpKUREVFVVRT179qT4+PgmPoLmZ9iwYbR9+3a6cuUKJScn04gRI8jKyoru378vjFm6dCnp6+vTgQMHKCUlhcaMGUPm5uZUUlJCRESHDh0iU1NTunDhAn333Xckk8no9u3bRER09+5dsrOzo+zs7CY5vuYoPj6eOnXqRC4uLhQUFCS0c54bxp9//knW1tY0ceJEiouLo6ysLDp+/DhlZmYKYzjXL27hwoVkbGxMhw8fpqysLNq3bx/p6enR2rVrhTGc5/o7cuQIzZ07lw4cOEAAKCoqSqX/WTklIvL396eOHTtSdHQ0JSYm0qBBg6hHjx5UXV1NRETr1q0jJycnunLlCq1YsYLat29PSqWSiIhu3rxJ9vb2VFxc/MLHwkVSI/Pw8CB/f3+Vti5dulBYWBhFRERQnz59VMZ+//33RES0aNEimjlzZqPG2lIVFRURADp16hQRESmVSjIzM6OlS5cKYyoqKsjQ0JA2b95MRETLli2jMWPGCP3t27cXCtIPPviAVq9e3YhH0LyVlpaSvb09RUdHk5eXl1AkcZ4bTmhoKPXv3/+J/ZzrhjFixAiaNGmSSttbb71F7733HhFxnhvC40VSXXJ67949kkgktHfvXmFMfn4+aWho0C+//EJERNOmTaPQ0FAiIiorKyMAVFRUREQ1/3COjIxskPj5dlsjqqqqQkJCAoYOHarSPnToUJw7dw7du3dHRkYGcnJykJ2djYyMDDg7OyMzMxM7duzAwoULmyjylqW4uBgA0LZtWwBAVlYWCgsLVfIulUrh5eWFc+fOAQB69OiBixcv4u7du0hISEB5eTns7Oxw5swZJCYmYubMmY1/IM3U9OnTMWLECAwZMkSlnfPccA4dOgR3d3e88847aN++PVxdXbFt2zahn3PdMPr3748TJ04gIyMDAHDp0iWcOXMGw4cPB8B5fhnqktOEhATI5XKVMR06dICzs7NK3s+cOYPy8nIcPXoU5ubmMDExwa5duyCTyTBq1KiGCbhBSi1WJ/n5+QSAzp49q9K+aNEicnBwICKiTZs2kYODAzk4ONCmTZuIiGjw4MEUFRVF+/bto27dulHPnj2FWRKmSqlU0siRI1X+FX727FkCQPn5+SpjP/jgAxo6dKiwHB4eTp07dyZnZ2eKjIykyspKcnZ2posXL9L69evJwcGB+vbtS1euXGm042lu9uzZQ87OzlReXk5EpDKTxHluOFKplKRSKc2ZM4cSExNp8+bNJJPJaOfOnUTEuW4oSqWSwsLCSCQSkaamJolEIlq8eLHQz3l+cXhsJqkuOd29ezdpaWnV2pa3tzdNnTqViGoeQQkICKBOnTqRu7s7xcbG0p07d8jW1pays7Np7ty51LlzZxo6dCjl5eU9d/yaDVNqsfoQiUQqy0QktPn7+8Pf31/o27FjB/T19eHp6QlHR0dcuHABeXl5GDt2LLKyspr8le3NTWBgIC5fvowzZ87U6nta3gFg/vz5mD9/vsrykCFDIJFIsHDhQqSkpODw4cPw9fVVeYD27yI3NxdBQUE4duwYZDLZE8dxnl+cUqmEu7s7Fi9eDABwdXXF1atXsWnTJvj6+grjONcvJiIiArt27cJ3332Hbt26ITk5GcHBwejQoQP8/PyEcZznhvesnKrz6BiJRIINGzao9E+cOBEzZ85EcnIyDh48iEuXLmH58uWYOXMmDhw48Fxx8u22RmRiYgKxWIzCwkKV9qKiIpiamtYaf/v2bSxYsADr169HXFwcHBwcYG9vj0GDBkEulwtTxKzGjBkzcOjQIZw8eRIWFhZCu5mZGQDUOe8AkJ6ejt27d+PLL79ETEwMBgwYgHbt2mH06NFITExESUnJyzuQZiohIQFFRUVwc3ODpqYmNDU1cerUKaxbtw6amppCLjnPL87c3Bxdu3ZVaXNyckJOTg4APqcbyieffIKwsDCMHTsW3bt3x4QJEzBr1iwsWbIEAOf5ZahLTs3MzFBVVYW7d+8+cczjfv31V6SmpiIwMBAxMTEYPnw4dHV1MXr0aMTExDx3vFwkNSItLS24ubkhOjpapT06Ohp9+/atNT44OBizZs2ChYUFFAoF5HK50FddXc2vAvgfIkJgYCAiIyPx66+/wsbGRqXfxsYGZmZmKnmvqqrCqVOn1OadiDB16lSsWrUKenp6Krl/+N9HPyL8dzF48GCkpKQgOTlZ+HF3d8f48eORnJwMW1tbznMD6devX63XWGRkZMDa2hoAn9MNpaysDBoaqpdBsVgs5ILz3PDqklM3NzdIJBKVMQUFBbhy5YravFdUVGD69OnYsmULxGJxrby/0LXyuW/Usefy8BUA33zzDaWmplJwcDDp6urSrVu3VMYdO3aMPDw8SKFQEBFRXl4eyWQyOnLkCG3ZsoWMjY2prKysKQ6h2Zk2bRoZGhpSTEwMFRQUCD+P5mfp0qVkaGhIkZGRlJKSQu+++26tj5w+tGXLFnr77beF5bi4ODIwMKDffvuNPv/8c+ratWujHFdL8OgzSUSc54YSHx9PmpqatGjRIrp+/Trt3r2bdHR0aNeuXcIYzvWL8/Pzo44dOwqvAIiMjCQTExOaPXu2MIbzXH+lpaWUlJRESUlJBIBWr15NSUlJwqsQ6pJTf39/srCwoOPHj1NiYiK9+uqrKq8AeNScOXPoo48+EpYjIiLIysqKLl26RJMnT6bhw4c/97FwkdQENmzYQNbW1qSlpUW9evWq9RB2WVkZOTg4UFJSkkr7tm3byNTUlKysrOjw4cONGHHzBkDtz/bt24UxSqWSwsPDyczMjKRSKQ0YMEB4B9WjCgsLydrautZDhV988QW1bduWunTpQnFxcS/7kFqMx4skznPD+fHHH8nZ2ZmkUil16dKFtm7dqtLPuX5xJSUlFBQURFZWViSTycjW1pbmzp1LlZWVwhjOc/2dPHlS7d/Jfn5+RFS3nJaXl1NgYCC1bduWtLW16fXXX6ecnJxa+0pJSSE7OzuV9+IpFAqaNm0aGRgYUO/even69evPfSwiIqLnn4dijDHGGGud+JkkxhhjjDE1uEhijDHGGFODiyTGGGOMMTW4SGKMMcYYU4OLJMYYY4wxNbhIYowxxhhTg4skxhhjjDE1uEhijDHGGFODiyTGWIuydetWWFpaQkNDA2vXrm3qcJ7q1q1bEIlESE5Obhbb+bubOHEi3nzzzaYOg7UgXCQx9oImTpwIkUgEkUgEiUQCW1tbfPzxx3jw4EFTh/ZMnTp1avaFxqNKSkoQGBiI0NBQ5OfnY+rUqU0dUoNTdyG3tLREQUEBnJ2dG33fTa05xsT+PjSbOgDGWoPXXnsN27dvh1wuR2xsLKZMmYIHDx5g06ZN9d4WEUGhUEBTk/94Pi4nJwdyuRwjRoyAubl5U4fTaMRiMczMzJo6jDqTy+WQSCRNHQZjL4xnkhhrAFKpFGZmZrC0tMS4ceMwfvx4HDx4EEBN0bN8+XLY2tpCW1sbPXr0wP79+4V1Y2JiIBKJcPToUbi7u0MqlSI2NhZKpRLLli2DnZ0dpFIprKyssGjRImG9/Px8jBkzBm3atIGxsTF8fHxw69Ytof/hv8BXrlwJc3NzGBsbY/r06ZDL5QCAgQMHIjs7G7NmzRJmwgDgzp07ePfdd2FhYQEdHR10794de/bsUTne0tJSjB8/Hrq6ujA3N8eaNWswcOBABAcHC2Oqqqowe/ZsdOzYEbq6uujTpw9iYmKemsecnBz4+PhAT08PBgYGGD16NP744w8AwI4dO9C9e3cAgK2tLUQikcrxPvTw1tTevXvRt29fyGQydOvWrda+T506BQ8PD0ilUpibmyMsLAzV1dVC/8CBAxEYGIjAwEAYGRnB2NgY8+bNw6NfdykSiYTf80NGRkbYsWOH2uNTKBSYPHkybGxsoK2tDUdHR3z11VdC//z587Fz50788MMPwu8kJiZG7e22usQ/c+ZMzJ49G23btoWZmRnmz5//xNw/ad8AEBoaCgcHB+jo6MDW1hafffaZcB49XLdnz57497//DVtbW0ilUhAR0tPT0b9/f8hkMnTt2hXHjx+vlbOnncdPi+lZ579CoUBISIjwu5s9ezb4q0pZvT33V+MyxoiIyM/Pj3x8fFTaZsyYQcbGxkRE9Omnn1KXLl3ol19+oRs3btD27dtJKpVSTEwMEf31jdkuLi507NgxyszMpNu3b9Ps2bOpTZs2tGPHDsrMzKTY2Fjatm0bERE9ePCA7O3tadKkSXT58mVKTU2lcePGkaOjo/AN5n5+fmRgYED+/v6UlpZGP/74I+no6AjfJn/nzh2ysLCgBQsWUEFBARUUFBARUV5eHq1YsYKSkpLoxo0btG7dOhKLxXT+/Hnh+KZMmULW1tZ0/PhxSklJoVGjRpG+vj4FBQUJY8aNG0d9+/al06dPU2ZmJq1YsYKkUillZGSozaNSqSRXV1fq378/Xbx4kc6fP0+9evUiLy8vIiIqKyuj48ePEwCKj4+ngoICqq6urrWdrKwsAkAWFha0f/9+Sk1NpSlTppC+vj7dvn1bOEYdHR0KCAigtLQ0ioqKIhMTEwoPDxe24+XlRXp6ehQUFETp6em0a9culfwREQGgqKgolf0bGhrS9u3bVWJJSkoiIqKqqir6/PPPKT4+nm7evClsMyIigoiISktLafTo0fTaa68Jv5PKyspa26lr/AYGBjR//nzKyMignTt3kkgkomPHjqnN/5P2TUT05Zdf0tmzZykrK4sOHTpEpqamtGzZMmHd8PBw0tXVpWHDhlFiYiJdunSJqqurydHRkby9vSk5OZliY2PJw8NDJWfPOo+fFFNdzv9ly5aRoaGhcA5MnjyZ9PX1a/1ZZexpuEhi7AU9XiTFxcWRsbExjR49mu7fv08ymYzOnTunss7kyZPp3XffJaK/iqSDBw8K/SUlJSSVSoWi6HHffPMNOTo6klKpFNoqKytJW1ubjh49KsRlbW2tUki88847NGbMGGHZ2tqa1qxZ88xjHD58OH300UdCbBKJhPbt2yf037t3j3R0dIQiKTMzk0QiEeXn56tsZ/DgwTRnzhy1+zh27BiJxWLKyckR2q5evSoURURESUlJBICysrKeGOvDgmLp0qVCm1wuJwsLC+HC/umnn9bK34YNG0hPT48UCgUR1RQZTk5OKmNCQ0PJyclJWK5vkaROQEAAvf3228KyuqL78e3UNf7+/furbKd3794UGhr6xFjU7Vud5cuXk5ubm7AcHh5OEomEioqKhLaff/6ZNDU1heKbiCg6OlolZ3U9jx+PqS7rmZubqz0HuEhi9cEPPTDWAA4fPgw9PT1UV1dDLpfDx8cH69evR2pqKioqKuDt7a0yvqqqCq6uript7u7uwv+npaWhsrISgwcPVru/hIQEZGZmQl9fX6W9oqICN27cEJa7desGsVgsLJubmyMlJeWpx6JQKLB06VJEREQgPz8flZWVqKyshK6uLgDg5s2bkMvl8PDwENYxNDSEo6OjsJyYmAgigoODg8q2KysrYWxsrHa/aWlpsLS0hKWlpdDWtWtXGBkZIS0tDb17935q3I/z9PQU/l9TUxPu7u5IS0sT9uXp6SncYgSAfv364f79+8jLy4OVlRUA4B//+IfKGE9PT6xatQoKhUIlr/WxefNm/Otf/0J2djbKy8tRVVWFnj171msbdY3fxcVFZT1zc3MUFRXVO+b9+/dj7dq1yMzMxP3791FdXQ0DAwOVMdbW1mjXrp2wfO3aNVhaWqo8S/XoOQPU/Tx+3LPWKy4uRkFBgdpzgPiWG6sHLpIYawCDBg3Cpk2bIJFI0KFDB+Gh1aysLADATz/9hI4dO6qsI5VKVZYfFiEAoK2t/dT9KZVKuLm5Yffu3bX6Hr1QPf7wrEgkglKpfOq2V61ahTVr1mDt2rXo3r07dHV1ERwcjKqqKgAQLjKPXqAfbX8Yn1gsRkJCQq1iQk9PT+1+iajWNp/W/jwebkfdNp90XM/a3uMX3Uef1Xnc999/j1mzZmHVqlXw9PSEvr4+VqxYgbi4uDrv82GsdYn/eX7/jzt//jzGjh2LL774AsOGDYOhoSH27t2LVatWqYx79Px9UoyPq+t53FDrMVZfXCQx1gB0dXVhZ2dXq71r166QSqXIycmBl5dXnbdnb28PbW1tnDhxAlOmTKnV36tXL0RERKB9+/a1/kVfH1paWlAoFCptsbGx8PHxwXvvvQeg5oJ0/fp1ODk5AQA6d+4MiUSC+Ph4YdanpKQE169fF47R1dUVCoUCRUVFeOWVV+oUS9euXZGTk4Pc3Fxhu6mpqSguLhb2XR/nz5/HgAEDAADV1dVISEhAYGCgsK8DBw6oXMjPnTsHfX19lWL2/PnztbZpb28vFH7t2rVDQUGB0H/9+nWUlZU9MabY2Fj07dsXAQEBQtvjMybqfiePq2v89aVu32fPnoW1tTXmzp0rtGVnZz9zW126dEFOTg7++OMPmJqaAgAuXLigMqYu57G6mOqynrm5udpzoFevXs+MnbGH+NNtjL1E+vr6+PjjjzFr1izs3LkTN27cQFJSEjZs2ICdO3c+cT2ZTIbQ0FDMnj0b3377LW7cuIHz58/jm2++AQCMHz8eJiYm8PHxQWxsLLKysnDq1CkEBQUhLy+vzvF16tQJp0+fRn5+Pm7fvg0AsLOzQ3R0NM6dO4e0tDR8+OGHKCwsVDkmPz8/fPLJJzh58iSuXr2KSZMmQUNDQ7hgOzg4YPz48fD19UVkZCSysrJw4cIFLFu2DEeOHFEby5AhQ+Di4oLx48cjMTER8fHx8PX1hZeXl8qtyLrasGEDoqKikJ6ejunTp+Pu3buYNGkSACAgIAC5ubmYMWMG0tPT8cMPPyA8PBwhISHQ0Pjrr8Xc3FyEhITg2rVr2LNnD9avX4+goCCh/9VXX8XXX3+NxMREXLx4Ef7+/k/96LudnR0uXryIo0ePIiMjA5999lmtwqFTp064fPkyrl27htu3b6udmapr/PWlbt92dnbIycnB3r17cePGDaxbtw5RUVHP3Ja3tzc6d+4MPz8/XL58GWfPnhUKrYfnSV3OY3Ux1WW9oKAgLF26VDgHAgICcO/evefODfubaooHoRhrTZ71sKtSqaSvvvqKHB0dSSKRULt27WjYsGF06tQpIvrrwe27d++qrKdQKGjhwoVkbW1NEomErKysaPHixUJ/QUEB+fr6komJCUmlUrK1taUPPviAiouLnxhXUFCQ8GkxIqLffvuNXFxcSCqV0sO/Du7cuUM+Pj6kp6dH7du3p3nz5pGvr6/KtkpKSmjcuHGko6NDZmZmtHr1avLw8KCwsDBhzMNPcnXq1IkkEgmZmZnRqFGj6PLly0/MVXZ2Nr3xxhukq6tL+vr69M4771BhYaHQX58Ht7/77jvq06cPaWlpkZOTE504cUJlXExMDPXu3Zu0tLTIzMyMQkNDSS6XC/1eXl4UEBBA/v7+ZGBgQG3atKGwsDCVh4Xz8/Np6NChpKurS/b29nTkyJGnPrhdUVFBEydOJENDQzIyMqJp06ZRWFgY9ejRQ9hmUVEReXt7k56eHgGgkydPqn0AvC7xP/ppQyIiHx8f8vPze2Lu1O2biOiTTz4hY2Nj0tPTozFjxtCaNWvI0NBQWC88PFzlGB5KS0ujfv36kZaWFnXp0oV+/PFHAkC//PKLMOZZ5/GTYnrWenK5nIKCgsjAwICMjIwoJCSk1nnM2LOIiPgpNsbYi3nw4AE6duyIVatWYfLkyU0ay61bt2BjY4OkpKR6PxD9qIEDB6Jnz54t6o3kzd3Zs2fRv39/ZGZmonPnzk0dDmPPxM8kMcbqLSkpCenp6fDw8EBxcTEWLFgAAPDx8WniyFhzEhUVBT09Pdjb2yMzMxNBQUHo168fF0isxeAiiTH2XFauXIlr165BS0sLbm5uiI2NhYmJSVOHxZqR0tJSzJ49G7m5uTAxMcGQIUNqfSqOseaMb7cxxhhjjKnBn25jjDHGGFODiyTGGGOMMTW4SGKMMcYYU4OLJMYYY4wxNbhIYowxxhhTg4skxhhjjDE1uEhijDHGGFODiyTGGGOMMTX+H9HI0adl20c1AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# gains plots:\n",
    "s_mobile_rf['pred_rf'] = rf_2.predict(s_mobile_rf)['prediction']\n",
    "dct = {\"train\": s_mobile_rf[s_mobile_rf['training'] == 1], \"test\": s_mobile_rf[s_mobile_rf['training'] == 0]}\n",
    "\n",
    "fig1 = rsm.gains_plot(dct, \"churn\", \"yes\", \"pred_rf\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Use 1 million dataset:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((682500, 25), (292500, 25))"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use s_mobile_rf_1M\n",
    "train_rf_1M = s_mobile_rf_1M[s_mobile_rf_1M['training'] == 1]\n",
    "test_rf_1M = s_mobile_rf_1M[s_mobile_rf_1M['training'] == 0]\n",
    "train_rf_1M.shape, test_rf_1M.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest\n",
      "Data                 : train_rf_1M\n",
      "Response variable    : churn\n",
      "Level                : yes\n",
      "Explanatory variables: changer, changem, revenue, mou, overage, roam, conference, months, uniqsubs, custcare, retcalls, dropvce, eqpdays, refurb, smartphone, highcreditr, mcycle, car, travel, region, occupation\n",
      "OOB                  : True\n",
      "Model type           : classification\n",
      "Nr. of features      : (21, 28)\n",
      "Nr. of observations  : 682,500\n",
      "max_features         : sqrt (5)\n",
      "n_estimators         : 100\n",
      "min_samples_leaf     : 1\n",
      "random_state         : 1234\n",
      "AUC                  : 0.999\n",
      "\n",
      "Estimation data      :\n",
      " changer  changem  revenue  mou  overage  roam  conference  months  uniqsubs  custcare  retcalls  dropvce  eqpdays  refurb_yes  smartphone_yes  highcreditr_yes  mcycle_yes  car_yes  travel_yes  region_CS  region_NE  region_NW  region_SE  region_SW  occupation_other  occupation_professional  occupation_student  occupation_retired\n",
      "       0       -2       87  412      104     0           0      10         2         0       0.0        3    448.0       False            True            False       False    False        True       True      False      False      False      False             False                    False                True               False\n",
      "       1       23      138 1252        0     3           0      19         4         0       0.0        1    426.0       False            True            False       False    False       False      False      False      False       True      False             False                    False                True               False\n",
      "      -9      -20      117 1002      175     4           0      11         1        11       0.0        3    267.0        True            True            False       False    False       False      False      False      False       True      False              True                    False               False               False\n",
      "       0       27       57  462        8     2           0      15         1         0       0.0        4    594.0       False            True            False       False    False       False      False      False      False       True      False             False                     True               False               False\n",
      "       0       -4       52  651        0     0           1      15         2         0       0.0        6    591.0       False            True            False       False    False       False      False      False      False      False       True              True                    False               False               False\n"
     ]
    }
   ],
   "source": [
    "# use 1 million dataset:\n",
    "rf_1_1M = rsm.model.rforest(\n",
    "    data={\"train_rf_1M\":train_rf_1M},\n",
    "    rvar=\"churn\",\n",
    "    lev=\"yes\",\n",
    "    evar=evar_rf\n",
    ")\n",
    "rf_1_1M.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# s_mobil_1M\n",
    "X_train_1M = train_rf_1M[evar_rf]\n",
    "y_train_1M = train_rf_1M['churn']\n",
    "X_train_1M_encoded = pd.get_dummies(X_train_1M)\n",
    "y_train_1M = y_train_1M.map({'yes': 1, 'no': 0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.model_selection import GridSearchCV\n",
    "# from sklearn.ensemble import RandomForestClassifier\n",
    "# from sklearn.metrics import make_scorer, accuracy_score\n",
    "\n",
    "# param_grid = {\n",
    "#     'n_estimators': [200, 300, 400, 500],\n",
    "#     'min_samples_leaf': [1, 2, 4],\n",
    "#     'max_features': ['sqrt', 'log2', None],\n",
    "# }\n",
    "\n",
    "# rf = RandomForestClassifier(random_state=1234, oob_score=True)\n",
    "\n",
    "\n",
    "# scorer = make_scorer(accuracy_score)\n",
    "\n",
    "\n",
    "# grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, scoring=scorer, cv=5, verbose=2)\n",
    "\n",
    "\n",
    "# grid_search.fit(X_train_1M_encoded, y_train_1M)\n",
    "\n",
    "\n",
    "# print(f\"Best parameters: {grid_search.best_params_}\")\n",
    "# print(f\"Best score: {grid_search.best_score_}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest\n",
      "Data                 : train_rf_1M\n",
      "Response variable    : churn\n",
      "Level                : yes\n",
      "Explanatory variables: changer, changem, revenue, mou, overage, roam, conference, months, uniqsubs, custcare, retcalls, dropvce, eqpdays, refurb, smartphone, highcreditr, mcycle, car, travel, region, occupation\n",
      "OOB                  : True\n",
      "Model type           : classification\n",
      "Nr. of features      : (21, 28)\n",
      "Nr. of observations  : 682,500\n",
      "max_features         : sqrt (5)\n",
      "n_estimators         : 50\n",
      "min_samples_leaf     : 4\n",
      "random_state         : 1234\n",
      "AUC                  : 0.97\n",
      "\n",
      "Estimation data      :\n",
      " changer  changem  revenue  mou  overage  roam  conference  months  uniqsubs  custcare  retcalls  dropvce  eqpdays  refurb_yes  smartphone_yes  highcreditr_yes  mcycle_yes  car_yes  travel_yes  region_CS  region_NE  region_NW  region_SE  region_SW  occupation_other  occupation_professional  occupation_student  occupation_retired\n",
      "       0       -2       87  412      104     0           0      10         2         0       0.0        3    448.0       False            True            False       False    False        True       True      False      False      False      False             False                    False                True               False\n",
      "       1       23      138 1252        0     3           0      19         4         0       0.0        1    426.0       False            True            False       False    False       False      False      False      False       True      False             False                    False                True               False\n",
      "      -9      -20      117 1002      175     4           0      11         1        11       0.0        3    267.0        True            True            False       False    False       False      False      False      False       True      False              True                    False               False               False\n",
      "       0       27       57  462        8     2           0      15         1         0       0.0        4    594.0       False            True            False       False    False       False      False      False      False       True      False             False                     True               False               False\n",
      "       0       -4       52  651        0     0           1      15         2         0       0.0        6    591.0       False            True            False       False    False       False      False      False      False      False       True              True                    False               False               False\n"
     ]
    }
   ],
   "source": [
    "# use 1 million dataset: s_mobile_rf_1M\n",
    "rf_2_1M = rsm.model.rforest(\n",
    "    data={\"train_rf_1M\":train_rf_1M},\n",
    "    rvar=\"churn\",\n",
    "    lev=\"yes\",\n",
    "    evar=evar_rf,\n",
    "    max_features = 'sqrt',\n",
    "    min_samples_leaf = 4,\n",
    "    n_estimators = 50\n",
    ")\n",
    "rf_2_1M.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.11/site-packages/seaborn/_base.py:948: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.11/site-packages/seaborn/_base.py:948: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# gains plot:\n",
    "s_mobile_rf_1M['pred_rf_1M'] = rf_2_1M.predict(s_mobile_rf_1M)['prediction']\n",
    "\n",
    "dct = {\"train\": s_mobile_rf_1M[s_mobile_rf_1M['training'] == 1], \"test\": s_mobile_rf_1M[s_mobile_rf_1M['training'] == 0]}\n",
    "\n",
    "fig1 = rsm.gains_plot(dct, \"churn\", \"yes\", \"pred_rf_1M\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "s_mobile_1M['churn_yes'] = np.where(s_mobile_1M['churn'] == \"yes\", 1, 0) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = s_mobile_1M[s_mobile_1M['training'] == 1]\n",
    "test = s_mobile_1M[s_mobile_1M['training'] == 0]\n",
    "rep = s_mobile_1M[s_mobile_1M['training'].isnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Explore**\n",
    "\n",
    "Show descriptive statistics in the training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['changer',\n",
       " 'changem',\n",
       " 'revenue',\n",
       " 'mou',\n",
       " 'overage',\n",
       " 'roam',\n",
       " 'conference',\n",
       " 'months',\n",
       " 'uniqsubs',\n",
       " 'custcare',\n",
       " 'retcalls',\n",
       " 'dropvce',\n",
       " 'eqpdays',\n",
       " 'refurb',\n",
       " 'smartphone',\n",
       " 'highcreditr',\n",
       " 'mcycle',\n",
       " 'car',\n",
       " 'travel',\n",
       " 'region',\n",
       " 'occupation']"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "evar = s_mobile_1M.columns.to_list()\n",
    "evar = evar[evar.index(\"changer\"):evar.index(\"occupation\")+1]\n",
    "evar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# nn1 = rsm.model.mlp(\n",
    "#     data = {\"s_mobile_train\": s_mobile_1M[s_mobile_1M['training'] == 1]},\n",
    "#     rvar = \"churn\", lev = \"yes\",\n",
    "#     evar = evar,\n",
    "#     hidden_layer_sizes = (1,),\n",
    "#     mod_type = \"classification\",\n",
    "# )\n",
    "\n",
    "# nn1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "## GridSearchCV\n",
    "\n",
    "#hls = [(10,5),(10,10),(20,20),(15,10,5),(5,5,5,),(2,2,4,3)]\n",
    "\n",
    "#param_grid = {'hidden_layer_sizes': hls}\n",
    "#scoring = {'AUC': 'roc_auc'}\n",
    "\n",
    "#nn1_cv = GridSearchCV(\n",
    "#    nn1.fitted, param_grid, scoring=scoring, cv=5, n_jobs = 4, refit = 'AUC', verbose = 5\n",
    "#)\n",
    "\n",
    "#nn1.data_onehot.mean().round(3)\n",
    "#nn1_cv.fit(nn1.data_onehot, nn1.data.churn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#nn1.data_onehot.head()\n",
    "#pd.DataFrame(nn1_cv.cv_results_).iloc[:, 5:].sort_values(\"rank_test_AUC\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# nn2 = rsm.model.mlp(\n",
    "#     data = {\"s_mobile_train\": s_mobile_1M[s_mobile_1M['training'] == 1]},\n",
    "#     rvar = \"churn\", lev = \"yes\",\n",
    "#     evar = evar,\n",
    "#     hidden_layer_sizes = (5,5,5),\n",
    "#     mod_type = \"classification\"\n",
    "# )\n",
    "\n",
    "# nn2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# s_mobile_1M[\"pred_nn2\"] = nn2.predict(s_mobile_1M)[\"prediction\"] # predicting for the full dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dct = {\"train\": s_mobile_1M[s_mobile_1M['training'] == 1], \"test\": s_mobile_1M[s_mobile_1M['training'] == 0]}\n",
    "# fig = rsm.gains_plot(dct, \"churn\", \"yes\", \"pred_nn2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We got a non overfitting neural network model with (5,5,5), and the AUC is 0.728. However, our XGBoost model is better than Neural Network model. So we decided to choose XGBoost model as our final model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Model    AUC\n",
      "0              XGBoost  0.761\n",
      "1  Logistic Regression  0.698\n",
      "2        Random Forest  0.737\n",
      "3       Neural Network  0.719\n"
     ]
    }
   ],
   "source": [
    "# auc for each model of representative dataset\n",
    "model_names = ['XGBoost', 'Logistic Regression', 'Random Forest', 'Neural Network']\n",
    "auc_values = [0.761, 0.698, 0.737, 0.719] \n",
    "\n",
    "df_models_auc = pd.DataFrame({\n",
    "    'Model': model_names,\n",
    "    'AUC': auc_values\n",
    "})\n",
    "\n",
    "\n",
    "print(df_models_auc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Choose XGBoost model as our final model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2. Use your model to describe the main drivers of churn and report on the key factors that predict customer churn and their relative importance.**\n",
    "\n",
    "**• Briefly discuss 5 key drivers of churn from your analysis in this step using Variable Importance (Permutation Importance) and Prediction or Partial Dependence plots**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.inspection import permutation_importance\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Assuming `model` is your trained XGBoost model and you have your test set ready (X_test, y_test)\n",
    "\n",
    "# Perform permutation importance\n",
    "results = permutation_importance(model, X_test, y_test, n_repeats=5, random_state=42, n_jobs=-1)\n",
    "\n",
    "# Sort the features by their importance scores\n",
    "sorted_idx = results.importances_mean.argsort()\n",
    "\n",
    "# Plot histogram\n",
    "plt.figure(figsize=(12, 8))\n",
    "plt.barh(range(len(sorted_idx)), results.importances_mean[sorted_idx], color='b', xerr=results.importances_std[sorted_idx])\n",
    "plt.yticks(range(len(sorted_idx)), X_test.columns[sorted_idx])\n",
    "plt.xlabel('Permutation Importance')\n",
    "plt.title('Permutation Importance (test set)')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x2000 with 14 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.inspection import PartialDependenceDisplay\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "features = ['eqpdays', 'months', 'overage', 'revenue', 'mou','retcalls','changem']\n",
    "fig = plt.figure(figsize=(15, 20))  # Adjust the figure size \n",
    "\n",
    "for i, feature in enumerate(features):\n",
    "    ax = fig.add_subplot(4, 2, i+1 )  # Adjust the grid definition as needed\n",
    "    PartialDependenceDisplay.from_estimator(model, s_mobile.loc[:, \"changer\":\"occupation\"], features=[feature], ax=ax)\n",
    "plt.tight_layout()  # Adjust the spacing to fit the titles and labels\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Key drivers : eqdays, months, overage, revenue, mou"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "eqpdays (Number of days customer has owned current handset):\n",
    "\n",
    "The PDP indicates an increasing trend in the model's prediction as the number of days the customer has owned their handset increases. This could suggest that customers with older handsets might be more likely to churn, perhaps due to a desire for newer technology or better offers from competitors targeting users with older handsets.\n",
    "months (# of months the customer has had service with S-Mobile):\n",
    "\n",
    "There is a sharp decrease in the partial dependence when the number of months is low, which levels off as the number of months increases. This could imply that newer customers are at a higher risk of churning, and the risk decreases and stabilizes as they stay longer with the service.\n",
    "overage (Mean monthly overage minutes):\n",
    "\n",
    "The model prediction fluctuates with overage minutes, showing several peaks. This might indicate that certain thresholds of overage lead to higher predictions of churn. Perhaps small amounts of overage are common, but as overage increases, it might signal customer dissatisfaction or a plan that doesn't fit the customer's needs, increasing the risk of churn.\n",
    "revenue (Mean monthly revenue in SGD):\n",
    "\n",
    "The PDP for revenue shows a sharp decrease initially and then flattens out. This might suggest that very low revenue customers have a different churn risk than the majority, but once revenue reaches a certain point, it has less influence on the churn prediction.\n",
    "mou (Mean monthly minutes of use):\n",
    "\n",
    "The plot for minutes of use is relatively flat across the range of values, suggesting that within the observed range of usage, there isn't a strong relationship between usage minutes and the likelihood of churn according to the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3. Use insights on churn drivers to develop actions/offers/incentives**\n",
    "\n",
    "**• Consider each variable type, e.g., “Equipment characteristic”, “Customer usage”, etc. (see the data table at the end of this case)**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Equipment Usage Time (Eqpdays):**\n",
    "- Action: Offer upgrade incentives for customers with older phones.\n",
    "- Incentive: Establish a loyalty program that awards points based on the length of time a customer has used their device, which can be used to purchase accessories or services.\n",
    "\n",
    "**Overage Usage (Overage):**\n",
    "- Action: Provide customized plans for customers who frequently exceed their usage limits.\n",
    "- Incentive: Offer an overage protection package allowing customers to acquire additional minutes or data at a lower cost.\n",
    "\n",
    "\n",
    "**Retention Calls (Retcalls):**\n",
    "- Action: Improve customer service quality to reduce the likelihood of retention calls.\n",
    "- Incentive: Offer exclusive services or discounts to customers who have made retention calls, to enhance their satisfaction.\n",
    "\n",
    "**Customer Occupation(occupation):**\n",
    "- Action: Customize services for different occupations.\n",
    "- Incentive: Launch a rewards program offering tailored benefits: discounts for professionals on business services, data deals for students, support bonuses for retired individuals, and flexible plans for others.\n",
    "\n",
    "**% change in minutes of use(changem):**\n",
    "- Action: Address changing usage patterns.\n",
    "- Incentive: For increasing usage, offer a free month on a higher plan tier. For decreasing usage, provide a plan cost review and temporary discounts to better match current needs.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4.Quantify the impact of these actions/offers/incentives on the probability of churn**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## eqpdays (Number of days customer has owned current handset):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>churn_yes</th>\n",
       "      <th>p_eqbdays</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>19209.0000</td>\n",
       "      <td>19209.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.0244</td>\n",
       "      <td>0.0151</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        churn_yes   p_eqbdays\n",
       "count  19209.0000  19209.0000\n",
       "mean       0.0244      0.0151"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile[\"churn_yes\"] = s_mobile[\"churn\"].map({\"yes\": 1, \"no\": 0}).astype(int)\n",
    "s_mobile_rep = s_mobile.query(\"representative == 1\").copy()\n",
    "s_mobile_temp = s_mobile_rep.copy()\n",
    "s_mobile_temp['eqpdays'] = 0\n",
    "predicted_probs = model.predict_proba(s_mobile_temp.loc[:, \"changer\":\"occupation\"])[:, 1]\n",
    "s_mobile_rep['p_eqbdays'] = predicted_probs\n",
    "s_mobile_rep.loc[s_mobile_rep.eqpdays > 400, [\"churn_yes\", \"p_eqbdays\"]].agg(\n",
    "   [\"count\", \"mean\"] \n",
    ").round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## overage (mean monthly overage minutes):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>churn_yes</th>\n",
       "      <th>p_overage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4075.0000</td>\n",
       "      <td>4075.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.0243</td>\n",
       "      <td>0.0127</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       churn_yes  p_overage\n",
       "count  4075.0000  4075.0000\n",
       "mean      0.0243     0.0127"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_temp_2 = s_mobile_rep.copy()\n",
    "s_mobile_temp_2['overage'] = 0\n",
    "predicted_probs = model.predict_proba(s_mobile_temp_2.loc[:, \"changer\":\"occupation\"])[:, 1]\n",
    "s_mobile_rep['p_overage'] = predicted_probs\n",
    "s_mobile_rep.loc[s_mobile_rep.overage > 150, [\"churn_yes\", \"p_overage\"]].agg(\n",
    "   [\"count\", \"mean\"] \n",
    ").round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## occupation (occupation of customer):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "occupation\n",
      "other    30000\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>churn_yes</th>\n",
       "      <th>p_occupation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3904.0000</td>\n",
       "      <td>3904.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.0471</td>\n",
       "      <td>0.0403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       churn_yes  p_occupation\n",
       "count  3904.0000     3904.0000\n",
       "mean      0.0471        0.0403"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_temp_3 = s_mobile_rep.copy()\n",
    "s_mobile_temp_3['occupation'] = 'other'\n",
    "s_mobile_temp_3['occupation'] = s_mobile_temp_3['occupation'].astype('category')\n",
    "print(s_mobile_temp_3['occupation'].value_counts())\n",
    "predicted_probs = model.predict_proba(s_mobile_temp_3.loc[:, \"changer\":\"occupation\"])[:, 1]\n",
    "s_mobile_rep['p_occupation'] = predicted_probs\n",
    "s_mobile_rep.loc[(s_mobile_rep.occupation != 'other') & (s_mobile_rep.pred_xgb > 0.02), [\"churn_yes\", \"p_occupation\"]].agg([\"count\", \"mean\"]).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## retcalls(number of retention calls):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>churn_yes</th>\n",
       "      <th>p_retcalls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>506.0000</td>\n",
       "      <td>506.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.0435</td>\n",
       "      <td>0.0301</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       churn_yes  p_retcalls\n",
       "count   506.0000    506.0000\n",
       "mean      0.0435      0.0301"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_temp_4 = s_mobile_rep.copy()\n",
    "s_mobile_temp_4['retcalls'] = 0\n",
    "predicted_probs = model.predict_proba(s_mobile_temp_4.loc[:, \"changer\":\"occupation\"])[:, 1]\n",
    "s_mobile_rep['p_retcalls'] = predicted_probs\n",
    "s_mobile_rep.loc[(s_mobile_rep.retcalls > 0) & (s_mobile_rep.pred_xgb > 0.02), [\"churn_yes\", \"p_retcalls\"]].agg([\"count\", \"mean\"]).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## changem(change in minutes of user):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>churn_yes</th>\n",
       "      <th>p_changem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>14905.0000</td>\n",
       "      <td>14905.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.0221</td>\n",
       "      <td>0.0196</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        churn_yes   p_changem\n",
       "count  14905.0000  14905.0000\n",
       "mean       0.0221      0.0196"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_mobile_temp_5 = s_mobile_rep.copy()\n",
    "s_mobile_temp_5['changem'] = 0\n",
    "predicted_probs = model.predict_proba(s_mobile_temp_5.loc[:, \"changer\":\"occupation\"])[:, 1]\n",
    "s_mobile_rep['p_changem'] = predicted_probs\n",
    "s_mobile_rep.loc[s_mobile_rep.changem < 0, [\"churn_yes\", \"p_changem\"]].agg(\n",
    "   [\"count\", \"mean\"] \n",
    ").round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**5.Decide which actions/offers/incentives to target to which customers** \n",
    "\n",
    "  **For each action/offer/incentive specify the criteria used to select customers. Will you apply the action/offer/incentive to all customers, or a subset? Motivate your approach**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Equipment Usage Time (Eqpdays):**\n",
    "- Action: Offer upgrade incentives for customers with older phones.\n",
    "- Traget: Main target would be the customers who owned the current handset for more than 400 days.\n",
    "- Rationale: Older handsets may lead to diminished user experience and higher device malfunction rates. Offering upgrades to these customers can improve satisfaction and loyalty, as newer devices often come with enhanced features and better performance. This targeted approach ensures resources are focused on customers most likely to appreciate and take advantage of the upgrade offer.\n",
    "\n",
    "**Overage Usage (Overage):**\n",
    "- Action: Provide customized plans for customers who frequently exceed their usage limits.\n",
    "- Target : Main target would be the customers who have overage minutes more than 150 minutes.\n",
    "- Rationale: Exceeding usage limits can lead to unexpected charges and customer dissatisfaction. Customized plans can help align service offerings with actual usage patterns, improving customer satisfaction and retention. This targeted strategy prevents dissatisfaction due to overage charges and demonstrates the company's flexibility and customer-centric approach.\n",
    "\n",
    "**Retention Calls (Retcalls):**\n",
    "- Action: Improve customer service quality to reduce the likelihood of retention calls.\n",
    "- Target : Main target would be the customers who have made retention calls more 1 time and also have a churn rate greater than 0.2 which is the average churn rate across the dataset. \n",
    "- Rationale: Multiple retention calls indicate significant dissatisfaction or service issues. Focusing on customers with a high churn probability ensures efforts are concentrated on those most at risk of leaving. Improving service for these customers can directly address their concerns, potentially converting dissatisfied customers into loyal ones.\n",
    "\n",
    "**Customer Occupation(occupation):**\n",
    "- Action: Customize services for different occupations.\n",
    "- Target : Main target would be the customers who had declare their occupation and also have a churn rate greater than 0.2 which is the average churn rate across the dataset.\n",
    "- Rationale: Occupation-based customization allows for more relevant and engaging service offerings, acknowledging the diverse needs of different professional groups. Targeting those with a higher churn probability ensures that the offer reaches those who are at risk and might be looking for services that better suit their lifestyle or work requirements.\n",
    "\n",
    "**% change in minutes of use(changem):**\n",
    "- Action: Address changing usage patterns.\n",
    "- Target : Main target would be the customers who decreased their usage minutes.\n",
    "- Rationale: A decrease in usage could indicate dissatisfaction or changing needs that are not being met by current plans. Addressing these customers' needs with flexible plans or incentives can re-engage them, potentially reversing negative usage trends. Focusing on this group allows for early intervention before dissatisfaction leads to churn.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**6.Evaluate the economics (CLV):**\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pyrsm as rsm\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Retcalls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "revenue = pd.DataFrame(\n",
    "    {\n",
    "        \"month\": rsm.months_abb(),\n",
    "        \"revenue\": [\n",
    "            23,\n",
    "            26,\n",
    "            25,\n",
    "            28,\n",
    "            24,\n",
    "            24,\n",
    "            25,\n",
    "            27,\n",
    "            22,\n",
    "            25,\n",
    "            28,\n",
    "            26,\n",
    "        ],\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "annual_growth = 0.08\n",
    "annual_discount_rate = 0.1\n",
    "monthly_discount_rate = (1 + annual_discount_rate) ** (1 / 12) - 1\n",
    "monthly_churn = 0.0435\n",
    "annual_churn = 1 - (1 - monthly_churn) ** 12\n",
    "cost_service = 0.30\n",
    "marketing_cost = 0.01\n",
    "nr_years = 5\n",
    "nr_months = 5 * 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>active</th>\n",
       "      <th>CLV_retcall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>15.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>95.65</td>\n",
       "      <td>32.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>91.49</td>\n",
       "      <td>48.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>87.51</td>\n",
       "      <td>64.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>83.7</td>\n",
       "      <td>77.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>80.06</td>\n",
       "      <td>90.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>76.58</td>\n",
       "      <td>102.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>73.25</td>\n",
       "      <td>115.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>70.06</td>\n",
       "      <td>125.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>67.01</td>\n",
       "      <td>136.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>64.1</td>\n",
       "      <td>147.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>61.31</td>\n",
       "      <td>157.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>58.64</td>\n",
       "      <td>166.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>56.09</td>\n",
       "      <td>176.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>53.65</td>\n",
       "      <td>185.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>51.32</td>\n",
       "      <td>194.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>49.09</td>\n",
       "      <td>202.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>46.95</td>\n",
       "      <td>209.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>44.91</td>\n",
       "      <td>216.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>42.96</td>\n",
       "      <td>224.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>41.09</td>\n",
       "      <td>229.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>39.3</td>\n",
       "      <td>236.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>37.59</td>\n",
       "      <td>242.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>35.95</td>\n",
       "      <td>248.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>34.39</td>\n",
       "      <td>253.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>32.89</td>\n",
       "      <td>259.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>31.46</td>\n",
       "      <td>264.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>30.09</td>\n",
       "      <td>269.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>28.79</td>\n",
       "      <td>274.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>27.53</td>\n",
       "      <td>278.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>31</td>\n",
       "      <td>26.34</td>\n",
       "      <td>282.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32</td>\n",
       "      <td>25.19</td>\n",
       "      <td>286.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>33</td>\n",
       "      <td>24.09</td>\n",
       "      <td>290.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>23.05</td>\n",
       "      <td>293.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>35</td>\n",
       "      <td>22.04</td>\n",
       "      <td>297.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>36</td>\n",
       "      <td>21.09</td>\n",
       "      <td>300.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>37</td>\n",
       "      <td>20.17</td>\n",
       "      <td>303.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>38</td>\n",
       "      <td>19.29</td>\n",
       "      <td>306.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>39</td>\n",
       "      <td>18.45</td>\n",
       "      <td>309.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>40</td>\n",
       "      <td>17.65</td>\n",
       "      <td>312.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>41</td>\n",
       "      <td>16.88</td>\n",
       "      <td>315.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42</td>\n",
       "      <td>16.15</td>\n",
       "      <td>317.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>15.44</td>\n",
       "      <td>320.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44</td>\n",
       "      <td>14.77</td>\n",
       "      <td>322.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45</td>\n",
       "      <td>14.13</td>\n",
       "      <td>324.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46</td>\n",
       "      <td>13.52</td>\n",
       "      <td>326.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>47</td>\n",
       "      <td>12.93</td>\n",
       "      <td>328.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48</td>\n",
       "      <td>12.36</td>\n",
       "      <td>330.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>49</td>\n",
       "      <td>11.83</td>\n",
       "      <td>332.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>50</td>\n",
       "      <td>11.31</td>\n",
       "      <td>334.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>51</td>\n",
       "      <td>10.82</td>\n",
       "      <td>335.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>52</td>\n",
       "      <td>10.35</td>\n",
       "      <td>337.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>53</td>\n",
       "      <td>9.9</td>\n",
       "      <td>339.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>54</td>\n",
       "      <td>9.47</td>\n",
       "      <td>340.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>55</td>\n",
       "      <td>9.06</td>\n",
       "      <td>342.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>56</td>\n",
       "      <td>8.66</td>\n",
       "      <td>343.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>57</td>\n",
       "      <td>8.29</td>\n",
       "      <td>344.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>58</td>\n",
       "      <td>7.93</td>\n",
       "      <td>345.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>59</td>\n",
       "      <td>7.58</td>\n",
       "      <td>346.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>7.25</td>\n",
       "      <td>348.02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    time active  CLV_retcall\n",
       "0      1  100.0        15.74\n",
       "1      2  95.65        32.63\n",
       "2      3  91.49        48.04\n",
       "3      4  87.51        64.42\n",
       "4      5   83.7        77.74\n",
       "5      6  80.06        90.38\n",
       "6      7  76.58       102.88\n",
       "7      8  73.25       115.69\n",
       "8      9  70.06       125.59\n",
       "9     10  67.01       136.27\n",
       "10    11   64.1       147.61\n",
       "11    12  61.31       157.61\n",
       "12    13  58.64       166.68\n",
       "13    14  56.09       176.40\n",
       "14    15  53.65       185.27\n",
       "15    16  51.32       194.70\n",
       "16    17  49.09       202.37\n",
       "17    18  46.95       209.65\n",
       "18    19  44.91       216.85\n",
       "19    20  42.96       224.22\n",
       "20    21  41.09       229.92\n",
       "21    22   39.3       236.07\n",
       "22    23  37.59       242.60\n",
       "23    24  35.95       248.36\n",
       "24    25  34.39       253.58\n",
       "25    26  32.89       259.18\n",
       "26    27  31.46       264.29\n",
       "27    28  30.09       269.72\n",
       "28    29  28.79       274.13\n",
       "29    30  27.53       278.32\n",
       "30    31  26.34       282.47\n",
       "31    32  25.19       286.71\n",
       "32    33  24.09       290.00\n",
       "33    34  23.05       293.53\n",
       "34    35  22.04       297.30\n",
       "35    36  21.09       300.61\n",
       "36    37  20.17       303.62\n",
       "37    38  19.29       306.84\n",
       "38    39  18.45       309.78\n",
       "39    40  17.65       312.91\n",
       "40    41  16.88       315.45\n",
       "41    42  16.15       317.86\n",
       "42    43  15.44       320.25\n",
       "43    44  14.77       322.69\n",
       "44    45  14.13       324.58\n",
       "45    46  13.52       326.62\n",
       "46    47  12.93       328.79\n",
       "47    48  12.36       330.70\n",
       "48    49  11.83       332.43\n",
       "49    50  11.31       334.28\n",
       "50    51  10.82       335.98\n",
       "51    52  10.35       337.78\n",
       "52    53    9.9       339.24\n",
       "53    54   9.47       340.63\n",
       "54    55   9.06       342.00\n",
       "55    56   8.66       343.41\n",
       "56    57   8.29       344.50\n",
       "57    58   7.93       345.67\n",
       "58    59   7.58       346.92\n",
       "59    60   7.25       348.02"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time = np.array(range(0, nr_months)) + 1\n",
    "growth = np.power(1 + annual_growth, range(0, nr_years))\n",
    "growth = np.repeat(growth, 12, axis=0)\n",
    "revenues = np.repeat(revenue[[\"revenue\"]].values, nr_years, axis=1)\n",
    "revenues = np.reshape(revenues, nr_months, order=\"F\") * growth\n",
    "service = cost_service * revenues\n",
    "marketing = revenues * marketing_cost\n",
    "profit = revenues - service - marketing\n",
    "\n",
    "active = np.ones(nr_months)\n",
    "active[1:] = (1 - monthly_churn) ** (time[1:] - 1)\n",
    "\n",
    "exp_profit = active * profit\n",
    "PV_exp_profit = exp_profit / np.power(1 + monthly_discount_rate, time)\n",
    "CLV = np.cumsum(PV_exp_profit)\n",
    "\n",
    "s_mobile = pd.DataFrame({\"time\": time, \"active\": (100 * active).round(2).astype(str), \"CLV_retcall\": CLV})\n",
    "s_mobile.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "annual_growth = 0.08\n",
    "annual_discount_rate = 0.1\n",
    "monthly_discount_rate = (1 + annual_discount_rate) ** (1 / 12) - 1\n",
    "monthly_churn = 0.0301\n",
    "annual_churn = 1 - (1 - monthly_churn) ** 12\n",
    "cost_service = 0.35 #costimise servies lead to increase 5% in the cost\n",
    "marketing_cost = 0.01 \n",
    "nr_years = 5\n",
    "nr_months = 5 * 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>active</th>\n",
       "      <th>CLV_retcall_improve</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>14.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>96.99</td>\n",
       "      <td>30.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>94.07</td>\n",
       "      <td>45.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>91.24</td>\n",
       "      <td>61.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>88.49</td>\n",
       "      <td>74.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>85.83</td>\n",
       "      <td>86.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>83.25</td>\n",
       "      <td>99.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>80.74</td>\n",
       "      <td>112.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>78.31</td>\n",
       "      <td>122.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>75.95</td>\n",
       "      <td>133.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>73.67</td>\n",
       "      <td>145.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>71.45</td>\n",
       "      <td>156.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>69.3</td>\n",
       "      <td>166.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>67.21</td>\n",
       "      <td>177.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>65.19</td>\n",
       "      <td>187.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>63.23</td>\n",
       "      <td>198.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>61.32</td>\n",
       "      <td>207.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>59.48</td>\n",
       "      <td>215.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>57.69</td>\n",
       "      <td>224.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>55.95</td>\n",
       "      <td>233.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>54.27</td>\n",
       "      <td>240.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>52.63</td>\n",
       "      <td>247.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>51.05</td>\n",
       "      <td>256.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>49.51</td>\n",
       "      <td>263.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>48.02</td>\n",
       "      <td>270.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>46.58</td>\n",
       "      <td>277.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>45.18</td>\n",
       "      <td>284.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>43.82</td>\n",
       "      <td>291.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>42.5</td>\n",
       "      <td>297.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>41.22</td>\n",
       "      <td>303.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>31</td>\n",
       "      <td>39.98</td>\n",
       "      <td>309.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32</td>\n",
       "      <td>38.77</td>\n",
       "      <td>315.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>33</td>\n",
       "      <td>37.61</td>\n",
       "      <td>320.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>36.47</td>\n",
       "      <td>325.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>35</td>\n",
       "      <td>35.38</td>\n",
       "      <td>330.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>36</td>\n",
       "      <td>34.31</td>\n",
       "      <td>335.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>37</td>\n",
       "      <td>33.28</td>\n",
       "      <td>340.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>38</td>\n",
       "      <td>32.28</td>\n",
       "      <td>345.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>39</td>\n",
       "      <td>31.31</td>\n",
       "      <td>350.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>40</td>\n",
       "      <td>30.36</td>\n",
       "      <td>355.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>41</td>\n",
       "      <td>29.45</td>\n",
       "      <td>359.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42</td>\n",
       "      <td>28.56</td>\n",
       "      <td>363.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>27.7</td>\n",
       "      <td>367.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44</td>\n",
       "      <td>26.87</td>\n",
       "      <td>371.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45</td>\n",
       "      <td>26.06</td>\n",
       "      <td>374.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46</td>\n",
       "      <td>25.28</td>\n",
       "      <td>378.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>47</td>\n",
       "      <td>24.52</td>\n",
       "      <td>381.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48</td>\n",
       "      <td>23.78</td>\n",
       "      <td>385.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>49</td>\n",
       "      <td>23.06</td>\n",
       "      <td>388.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>50</td>\n",
       "      <td>22.37</td>\n",
       "      <td>391.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>51</td>\n",
       "      <td>21.69</td>\n",
       "      <td>395.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>52</td>\n",
       "      <td>21.04</td>\n",
       "      <td>398.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>53</td>\n",
       "      <td>20.41</td>\n",
       "      <td>401.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>54</td>\n",
       "      <td>19.79</td>\n",
       "      <td>403.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>55</td>\n",
       "      <td>19.2</td>\n",
       "      <td>406.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>56</td>\n",
       "      <td>18.62</td>\n",
       "      <td>409.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>57</td>\n",
       "      <td>18.06</td>\n",
       "      <td>411.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>58</td>\n",
       "      <td>17.52</td>\n",
       "      <td>414.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>59</td>\n",
       "      <td>16.99</td>\n",
       "      <td>416.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>16.48</td>\n",
       "      <td>418.91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    time active  CLV_retcall_improve\n",
       "0      1  100.0                14.60\n",
       "1      2  96.99                30.49\n",
       "2      3  94.07                45.19\n",
       "3      4  91.24                61.02\n",
       "4      5  88.49                74.09\n",
       "5      6  85.83                86.66\n",
       "6      7  83.25                99.26\n",
       "7      8  80.74               112.35\n",
       "8      9  78.31               122.61\n",
       "9     10  75.95               133.84\n",
       "10    11  73.67               145.94\n",
       "11    12  71.45               156.74\n",
       "12    13   69.3               166.68\n",
       "13    14  67.21               177.49\n",
       "14    15  65.19               187.49\n",
       "15    16  63.23               198.26\n",
       "16    17  61.32               207.15\n",
       "17    18  59.48               215.70\n",
       "18    19  57.69               224.28\n",
       "19    20  55.95               233.18\n",
       "20    21  54.27               240.17\n",
       "21    22  52.63               247.81\n",
       "22    23  51.05               256.04\n",
       "23    24  49.51               263.39\n",
       "24    25  48.02               270.15\n",
       "25    26  46.58               277.50\n",
       "26    27  45.18               284.31\n",
       "27    28  43.82               291.64\n",
       "28    29   42.5               297.69\n",
       "29    30  41.22               303.51\n",
       "30    31  39.98               309.34\n",
       "31    32  38.77               315.40\n",
       "32    33  37.61               320.15\n",
       "33    34  36.47               325.35\n",
       "34    35  35.38               330.95\n",
       "35    36  34.31               335.95\n",
       "36    37  33.28               340.55\n",
       "37    38  32.28               345.55\n",
       "38    39  31.31               350.18\n",
       "39    40  30.36               355.17\n",
       "40    41  29.45               359.29\n",
       "41    42  28.56               363.24\n",
       "42    43   27.7               367.21\n",
       "43    44  26.87               371.34\n",
       "44    45  26.06               374.57\n",
       "45    46  25.28               378.11\n",
       "46    47  24.52               381.92\n",
       "47    48  23.78               385.32\n",
       "48    49  23.06               388.45\n",
       "49    50  22.37               391.85\n",
       "50    51  21.69               395.00\n",
       "51    52  21.04               398.40\n",
       "52    53  20.41               401.20\n",
       "53    54  19.79               403.89\n",
       "54    55   19.2               406.59\n",
       "55    56  18.62               409.40\n",
       "56    57  18.06               411.60\n",
       "57    58  17.52               414.00\n",
       "58    59  16.99               416.59\n",
       "59    60  16.48               418.91"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time = np.array(range(0, nr_months)) + 1\n",
    "growth = np.power(1 + annual_growth, range(0, nr_years))\n",
    "growth = np.repeat(growth, 12, axis=0)\n",
    "revenues = np.repeat(revenue[[\"revenue\"]].values, nr_years, axis=1)\n",
    "revenues = np.reshape(revenues, nr_months, order=\"F\") * growth\n",
    "service = cost_service * revenues\n",
    "marketing = revenues * marketing_cost\n",
    "profit = revenues - service - marketing\n",
    "\n",
    "active = np.ones(nr_months)\n",
    "active[1:] = (1 - monthly_churn) ** (time[1:] - 1)\n",
    "\n",
    "exp_profit = active * profit\n",
    "PV_exp_profit = exp_profit / np.power(1 + monthly_discount_rate, time)\n",
    "CLV = np.cumsum(PV_exp_profit)\n",
    "\n",
    "s_mobile = pd.DataFrame({\"time\": time, \"active\": (100 * active).round(2).astype(str), \"CLV_retcall_improve\": CLV})\n",
    "s_mobile.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>incentive</th>\n",
       "      <th>CLV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>no</td>\n",
       "      <td>176098.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>yes</td>\n",
       "      <td>225215.54</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  incentive        CLV\n",
       "0        no  176098.12\n",
       "1       yes  225215.54"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "retcall_comparison = pd.DataFrame({\n",
    "    'incentive': ['no', 'yes'],\n",
    "    \"CLV\": [348.02*506,445.09*506]\n",
    "})\n",
    "retcall_comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(retcall_comparison['incentive'], retcall_comparison['CLV'], color=['blue', 'orange'])\n",
    "plt.title('CLV Comparison with and without Incentive(Retcall)')\n",
    "plt.xlabel('Incentive')\n",
    "plt.ylabel('Customer Lifetime Value (CLV)')\n",
    "plt.xticks(['no', 'yes'], ['No Incentive', 'With Incentive'])\n",
    "plt.ylim(0, max(retcall_comparison['CLV']) + 50) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Eqpdays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "revenue = pd.DataFrame({\n",
    "    \"month\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n",
    "    \"revenue\": [23, 26, 25, 28, 24, 24, 25, 27, 22, 25, 28, 26],\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "annual_growth = 0.08\n",
    "annual_discount_rate = 0.1\n",
    "monthly_discount_rate = (1 + annual_discount_rate) ** (1 / 12) - 1\n",
    "monthly_churn = 0.0244\n",
    "annual_churn = 1 - (1 - monthly_churn) ** 12\n",
    "cost_service = 0.30\n",
    "marketing_cost = 0.01\n",
    "nr_years = 5\n",
    "nr_months = 5 * 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>active</th>\n",
       "      <th>CLV_eqpdays</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>15.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>97.56</td>\n",
       "      <td>32.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>95.18</td>\n",
       "      <td>49.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>92.86</td>\n",
       "      <td>66.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>90.59</td>\n",
       "      <td>80.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>88.38</td>\n",
       "      <td>94.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>86.22</td>\n",
       "      <td>108.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>84.12</td>\n",
       "      <td>123.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>82.07</td>\n",
       "      <td>135.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>80.07</td>\n",
       "      <td>147.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>78.11</td>\n",
       "      <td>161.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>76.21</td>\n",
       "      <td>174.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>74.35</td>\n",
       "      <td>185.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>72.53</td>\n",
       "      <td>198.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>70.76</td>\n",
       "      <td>209.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>69.04</td>\n",
       "      <td>222.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>67.35</td>\n",
       "      <td>233.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>65.71</td>\n",
       "      <td>243.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>64.11</td>\n",
       "      <td>253.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>62.54</td>\n",
       "      <td>264.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>61.01</td>\n",
       "      <td>272.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>59.53</td>\n",
       "      <td>282.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>58.07</td>\n",
       "      <td>292.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>56.66</td>\n",
       "      <td>301.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>55.27</td>\n",
       "      <td>309.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>53.93</td>\n",
       "      <td>318.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>52.61</td>\n",
       "      <td>327.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>51.33</td>\n",
       "      <td>336.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>50.07</td>\n",
       "      <td>344.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>48.85</td>\n",
       "      <td>351.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>31</td>\n",
       "      <td>47.66</td>\n",
       "      <td>359.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32</td>\n",
       "      <td>46.5</td>\n",
       "      <td>367.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>33</td>\n",
       "      <td>45.36</td>\n",
       "      <td>373.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>44.26</td>\n",
       "      <td>380.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>35</td>\n",
       "      <td>43.18</td>\n",
       "      <td>387.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>36</td>\n",
       "      <td>42.12</td>\n",
       "      <td>394.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>37</td>\n",
       "      <td>41.09</td>\n",
       "      <td>400.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>38</td>\n",
       "      <td>40.09</td>\n",
       "      <td>406.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>39</td>\n",
       "      <td>39.11</td>\n",
       "      <td>413.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>40</td>\n",
       "      <td>38.16</td>\n",
       "      <td>419.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>41</td>\n",
       "      <td>37.23</td>\n",
       "      <td>425.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42</td>\n",
       "      <td>36.32</td>\n",
       "      <td>430.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>35.43</td>\n",
       "      <td>436.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44</td>\n",
       "      <td>34.57</td>\n",
       "      <td>442.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45</td>\n",
       "      <td>33.73</td>\n",
       "      <td>446.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46</td>\n",
       "      <td>32.9</td>\n",
       "      <td>451.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>47</td>\n",
       "      <td>32.1</td>\n",
       "      <td>456.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48</td>\n",
       "      <td>31.32</td>\n",
       "      <td>461.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>49</td>\n",
       "      <td>30.55</td>\n",
       "      <td>466.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>50</td>\n",
       "      <td>29.81</td>\n",
       "      <td>471.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>51</td>\n",
       "      <td>29.08</td>\n",
       "      <td>475.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>52</td>\n",
       "      <td>28.37</td>\n",
       "      <td>480.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>53</td>\n",
       "      <td>27.68</td>\n",
       "      <td>484.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>54</td>\n",
       "      <td>27.0</td>\n",
       "      <td>488.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>55</td>\n",
       "      <td>26.34</td>\n",
       "      <td>492.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>56</td>\n",
       "      <td>25.7</td>\n",
       "      <td>496.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>57</td>\n",
       "      <td>25.07</td>\n",
       "      <td>500.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>58</td>\n",
       "      <td>24.46</td>\n",
       "      <td>503.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>59</td>\n",
       "      <td>23.87</td>\n",
       "      <td>507.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>23.28</td>\n",
       "      <td>511.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    time active  CLV_eqpdays\n",
       "0      1  100.0        15.74\n",
       "1      2  97.56        32.97\n",
       "2      3  95.18        49.00\n",
       "3      4  92.86        66.38\n",
       "4      5  90.59        80.80\n",
       "5      6  88.38        94.75\n",
       "6      7  86.22       108.82\n",
       "7      8  84.12       123.53\n",
       "8      9  82.07       135.13\n",
       "9     10  80.07       147.89\n",
       "10    11  78.11       161.71\n",
       "11    12  76.21       174.14\n",
       "12    13  74.35       185.64\n",
       "13    14  72.53       198.21\n",
       "14    15  70.76       209.91\n",
       "15    16  69.04       222.60\n",
       "16    17  67.35       233.12\n",
       "17    18  65.71       243.31\n",
       "18    19  64.11       253.58\n",
       "19    20  62.54       264.31\n",
       "20    21  61.01       272.78\n",
       "21    22  59.53       282.09\n",
       "22    23  58.07       292.19\n",
       "23    24  56.66       301.26\n",
       "24    25  55.27       309.65\n",
       "25    26  53.93       318.83\n",
       "26    27  52.61       327.37\n",
       "27    28  51.33       336.63\n",
       "28    29  50.07       344.31\n",
       "29    30  48.85       351.75\n",
       "30    31  47.66       359.24\n",
       "31    32   46.5       367.08\n",
       "32    33  45.36       373.26\n",
       "33    34  44.26       380.06\n",
       "34    35  43.18       387.42\n",
       "35    36  42.12       394.05\n",
       "36    37  41.09       400.17\n",
       "37    38  40.09       406.87\n",
       "38    39  39.11       413.11\n",
       "39    40  38.16       419.86\n",
       "40    41  37.23       425.47\n",
       "41    42  36.32       430.90\n",
       "42    43  35.43       436.37\n",
       "43    44  34.57       442.09\n",
       "44    45  33.73       446.60\n",
       "45    46   32.9       451.56\n",
       "46    47   32.1       456.94\n",
       "47    48  31.32       461.78\n",
       "48    49  30.55       466.25\n",
       "49    50  29.81       471.14\n",
       "50    51  29.08       475.69\n",
       "51    52  28.37       480.62\n",
       "52    53  27.68       484.72\n",
       "53    54   27.0       488.68\n",
       "54    55  26.34       492.67\n",
       "55    56   25.7       496.85\n",
       "56    57  25.07       500.14\n",
       "57    58  24.46       503.76\n",
       "58    59  23.87       507.69\n",
       "59    60  23.28       511.22"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time = np.array(range(0, nr_months)) + 1\n",
    "growth = np.power(1 + annual_growth, range(0, nr_years))\n",
    "growth = np.repeat(growth, 12, axis=0)\n",
    "revenues = np.repeat(revenue[[\"revenue\"]].values, nr_years, axis=1)\n",
    "revenues = np.reshape(revenues, nr_months, order=\"F\") * growth\n",
    "service = cost_service * revenues\n",
    "marketing = revenues * marketing_cost\n",
    "profit = revenues - service - marketing\n",
    "\n",
    "active = np.ones(nr_months)\n",
    "active[1:] = (1 - monthly_churn) ** (time[1:] - 1)\n",
    "\n",
    "exp_profit = active * profit\n",
    "PV_exp_profit = exp_profit / np.power(1 + monthly_discount_rate, time)\n",
    "CLV = np.cumsum(PV_exp_profit)\n",
    "\n",
    "s_mobile = pd.DataFrame({\"time\": time, \"active\": (100 * active).round(2).astype(str), \"CLV_eqpdays\": CLV})\n",
    "s_mobile.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "annual_growth = 0.08\n",
    "annual_discount_rate = 0.1\n",
    "monthly_discount_rate = (1 + annual_discount_rate) ** (1 / 12) - 1\n",
    "monthly_churn = 0.0151\n",
    "annual_churn = 1 - (1 - monthly_churn) ** 12\n",
    "cost_service = 0.30\n",
    "marketing_cost = 0.01\n",
    "nr_years = 5\n",
    "nr_months = 5 * 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>active</th>\n",
       "      <th>CLV_eqpdays</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>-52.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>98.49</td>\n",
       "      <td>-35.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>97.0</td>\n",
       "      <td>-18.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>95.54</td>\n",
       "      <td>-1.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>94.1</td>\n",
       "      <td>13.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>92.67</td>\n",
       "      <td>28.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>91.28</td>\n",
       "      <td>43.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>89.9</td>\n",
       "      <td>59.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>88.54</td>\n",
       "      <td>71.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>87.2</td>\n",
       "      <td>85.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>85.89</td>\n",
       "      <td>100.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>84.59</td>\n",
       "      <td>114.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>83.31</td>\n",
       "      <td>127.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>82.05</td>\n",
       "      <td>141.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>80.81</td>\n",
       "      <td>155.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>79.59</td>\n",
       "      <td>169.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>78.39</td>\n",
       "      <td>181.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>77.21</td>\n",
       "      <td>193.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>76.04</td>\n",
       "      <td>206.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>74.89</td>\n",
       "      <td>218.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>73.76</td>\n",
       "      <td>229.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>72.65</td>\n",
       "      <td>240.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>71.55</td>\n",
       "      <td>252.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>70.47</td>\n",
       "      <td>264.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>69.41</td>\n",
       "      <td>274.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>68.36</td>\n",
       "      <td>286.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>67.33</td>\n",
       "      <td>297.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>66.31</td>\n",
       "      <td>309.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>65.31</td>\n",
       "      <td>319.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>64.32</td>\n",
       "      <td>329.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>31</td>\n",
       "      <td>63.35</td>\n",
       "      <td>339.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32</td>\n",
       "      <td>62.4</td>\n",
       "      <td>349.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>33</td>\n",
       "      <td>61.45</td>\n",
       "      <td>357.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>60.53</td>\n",
       "      <td>367.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>35</td>\n",
       "      <td>59.61</td>\n",
       "      <td>377.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>36</td>\n",
       "      <td>58.71</td>\n",
       "      <td>386.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>37</td>\n",
       "      <td>57.83</td>\n",
       "      <td>395.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>38</td>\n",
       "      <td>56.95</td>\n",
       "      <td>404.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>39</td>\n",
       "      <td>56.09</td>\n",
       "      <td>413.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>40</td>\n",
       "      <td>55.25</td>\n",
       "      <td>423.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>41</td>\n",
       "      <td>54.41</td>\n",
       "      <td>431.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42</td>\n",
       "      <td>53.59</td>\n",
       "      <td>439.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>52.78</td>\n",
       "      <td>447.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44</td>\n",
       "      <td>51.98</td>\n",
       "      <td>456.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45</td>\n",
       "      <td>51.2</td>\n",
       "      <td>463.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46</td>\n",
       "      <td>50.43</td>\n",
       "      <td>470.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>47</td>\n",
       "      <td>49.66</td>\n",
       "      <td>479.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48</td>\n",
       "      <td>48.91</td>\n",
       "      <td>486.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>49</td>\n",
       "      <td>48.18</td>\n",
       "      <td>493.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>50</td>\n",
       "      <td>47.45</td>\n",
       "      <td>501.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>51</td>\n",
       "      <td>46.73</td>\n",
       "      <td>508.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>52</td>\n",
       "      <td>46.03</td>\n",
       "      <td>516.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>53</td>\n",
       "      <td>45.33</td>\n",
       "      <td>523.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>54</td>\n",
       "      <td>44.65</td>\n",
       "      <td>530.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>55</td>\n",
       "      <td>43.97</td>\n",
       "      <td>536.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>56</td>\n",
       "      <td>43.31</td>\n",
       "      <td>543.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>57</td>\n",
       "      <td>42.65</td>\n",
       "      <td>549.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>58</td>\n",
       "      <td>42.01</td>\n",
       "      <td>555.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>59</td>\n",
       "      <td>41.38</td>\n",
       "      <td>562.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>40.75</td>\n",
       "      <td>568.68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    time active  CLV_eqpdays\n",
       "0      1  100.0       -52.71\n",
       "1      2  98.49       -35.32\n",
       "2      3   97.0       -18.98\n",
       "3      4  95.54        -1.10\n",
       "4      5   94.1        13.88\n",
       "5      6  92.67        28.51\n",
       "6      7  91.28        43.40\n",
       "7      8   89.9        59.12\n",
       "8      9  88.54        71.63\n",
       "9     10   87.2        85.53\n",
       "10    11  85.89       100.73\n",
       "11    12  84.59       114.53\n",
       "12    13  83.31       127.41\n",
       "13    14  82.05       141.63\n",
       "14    15  80.81       155.00\n",
       "15    16  79.59       169.62\n",
       "16    17  78.39       181.87\n",
       "17    18  77.21       193.84\n",
       "18    19  76.04       206.02\n",
       "19    20  74.89       218.88\n",
       "20    21  73.76       229.11\n",
       "21    22  72.65       240.48\n",
       "22    23  71.55       252.92\n",
       "23    24  70.47       264.20\n",
       "24    25  69.41       274.73\n",
       "25    26  68.36       286.37\n",
       "26    27  67.33       297.30\n",
       "27    28  66.31       309.26\n",
       "28    29  65.31       319.28\n",
       "29    30  64.32       329.07\n",
       "30    31  63.35       339.04\n",
       "31    32   62.4       349.56\n",
       "32    33  61.45       357.93\n",
       "33    34  60.53       367.22\n",
       "34    35  59.61       377.40\n",
       "35    36  58.71       386.63\n",
       "36    37  57.83       395.24\n",
       "37    38  56.95       404.76\n",
       "38    39  56.09       413.70\n",
       "39    40  55.25       423.49\n",
       "40    41  54.41       431.68\n",
       "41    42  53.59       439.69\n",
       "42    43  52.78       447.84\n",
       "43    44  51.98       456.45\n",
       "44    45   51.2       463.29\n",
       "45    46  50.43       470.90\n",
       "46    47  49.66       479.22\n",
       "47    48  48.91       486.77\n",
       "48    49  48.18       493.82\n",
       "49    50  47.45       501.60\n",
       "50    51  46.73       508.92\n",
       "51    52  46.03       516.92\n",
       "52    53  45.33       523.62\n",
       "53    54  44.65       530.18\n",
       "54    55  43.97       536.84\n",
       "55    56  43.31       543.88\n",
       "56    57  42.65       549.48\n",
       "57    58  42.01       555.70\n",
       "58    59  41.38       562.51\n",
       "59    60  40.75       568.68"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time = np.array(range(0, nr_months)) + 1\n",
    "growth = np.power(1 + annual_growth, range(0, nr_years))\n",
    "growth = np.repeat(growth, 12, axis=0)\n",
    "revenues = np.repeat(revenue[[\"revenue\"]].values, nr_years, axis=1)\n",
    "revenues = np.reshape(revenues, nr_months, order=\"F\") * growth\n",
    "\n",
    "revenues[0] -= 100  # reduce the first month's revenue by $10\n",
    "\n",
    "service = cost_service * revenues\n",
    "marketing = revenues * marketing_cost\n",
    "profit = revenues - service - marketing\n",
    "\n",
    "active = np.ones(nr_months)\n",
    "active[1:] = (1 - monthly_churn) ** (time[1:] - 1)\n",
    "\n",
    "exp_profit = active * profit\n",
    "PV_exp_profit = exp_profit / np.power(1 + monthly_discount_rate, time)\n",
    "CLV = np.cumsum(PV_exp_profit)\n",
    "\n",
    "s_mobile = pd.DataFrame({\"time\": time, \"active\": (100 * active).round(2).astype(str), \"CLV_eqpdays\": CLV})\n",
    "s_mobile.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>incentive</th>\n",
       "      <th>CLV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>no</td>\n",
       "      <td>11783953.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>yes</td>\n",
       "      <td>13371576.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  incentive          CLV\n",
       "0        no  11783953.14\n",
       "1       yes  13371576.99"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eqpdays_comparison = pd.DataFrame({\n",
    "    'incentive': ['no', 'yes'],\n",
    "    \"CLV\": [613.46 * 19209,696.11 *19209]\n",
    "})\n",
    "eqpdays_comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(eqpdays_comparison['incentive'], eqpdays_comparison['CLV'], color=['blue', 'orange'])\n",
    "plt.title('CLV Comparison with and without Incentive(eqpdays)')\n",
    "plt.xlabel('Incentive')\n",
    "plt.ylabel('Customer Lifetime Value (CLV)')\n",
    "plt.xticks(['no', 'yes'], ['No Incentive', 'With Incentive'])\n",
    "plt.ylim(0, max(eqpdays_comparison['CLV']) + 50) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "revenue = pd.DataFrame(\n",
    "    {\n",
    "        \"month\": rsm.months_abb(),\n",
    "        \"revenue\": [\n",
    "            23,\n",
    "            26,\n",
    "            25,\n",
    "            28,\n",
    "            24,\n",
    "            24,\n",
    "            25,\n",
    "            27,\n",
    "            22,\n",
    "            25,\n",
    "            28,\n",
    "            26,\n",
    "        ],\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "annual_growth = 0.08\n",
    "annual_discount_rate = 0.1\n",
    "monthly_discount_rate = (1 + annual_discount_rate) ** (1 / 12) - 1\n",
    "monthly_churn = 0.0243\n",
    "annual_churn = 1 - (1 - monthly_churn) ** 12\n",
    "cost_service = 0.30\n",
    "marketing_cost = 0.01\n",
    "nr_years = 5\n",
    "nr_months = 5 * 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>active</th>\n",
       "      <th>CLV_ratcall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>15.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>97.57</td>\n",
       "      <td>32.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>95.2</td>\n",
       "      <td>49.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>92.89</td>\n",
       "      <td>66.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>90.63</td>\n",
       "      <td>80.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>88.43</td>\n",
       "      <td>94.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>86.28</td>\n",
       "      <td>108.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>84.18</td>\n",
       "      <td>123.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>82.14</td>\n",
       "      <td>135.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>80.14</td>\n",
       "      <td>147.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>78.19</td>\n",
       "      <td>161.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>76.29</td>\n",
       "      <td>174.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>74.44</td>\n",
       "      <td>185.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>72.63</td>\n",
       "      <td>198.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>70.86</td>\n",
       "      <td>210.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>69.14</td>\n",
       "      <td>222.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>67.46</td>\n",
       "      <td>233.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>65.82</td>\n",
       "      <td>243.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>64.22</td>\n",
       "      <td>253.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>62.66</td>\n",
       "      <td>264.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>61.14</td>\n",
       "      <td>273.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>59.65</td>\n",
       "      <td>282.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>58.2</td>\n",
       "      <td>292.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>56.79</td>\n",
       "      <td>301.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>55.41</td>\n",
       "      <td>309.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>54.06</td>\n",
       "      <td>319.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>52.75</td>\n",
       "      <td>327.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>51.47</td>\n",
       "      <td>337.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>50.22</td>\n",
       "      <td>344.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>49.0</td>\n",
       "      <td>352.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>31</td>\n",
       "      <td>47.81</td>\n",
       "      <td>359.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32</td>\n",
       "      <td>46.65</td>\n",
       "      <td>367.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>33</td>\n",
       "      <td>45.51</td>\n",
       "      <td>373.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>44.41</td>\n",
       "      <td>380.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>35</td>\n",
       "      <td>43.33</td>\n",
       "      <td>387.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>36</td>\n",
       "      <td>42.27</td>\n",
       "      <td>394.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>37</td>\n",
       "      <td>41.25</td>\n",
       "      <td>400.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>38</td>\n",
       "      <td>40.24</td>\n",
       "      <td>407.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>39</td>\n",
       "      <td>39.27</td>\n",
       "      <td>413.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>40</td>\n",
       "      <td>38.31</td>\n",
       "      <td>420.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>41</td>\n",
       "      <td>37.38</td>\n",
       "      <td>426.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42</td>\n",
       "      <td>36.47</td>\n",
       "      <td>431.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>35.59</td>\n",
       "      <td>437.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44</td>\n",
       "      <td>34.72</td>\n",
       "      <td>442.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45</td>\n",
       "      <td>33.88</td>\n",
       "      <td>447.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46</td>\n",
       "      <td>33.05</td>\n",
       "      <td>452.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>47</td>\n",
       "      <td>32.25</td>\n",
       "      <td>457.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48</td>\n",
       "      <td>31.47</td>\n",
       "      <td>462.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>49</td>\n",
       "      <td>30.7</td>\n",
       "      <td>467.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>50</td>\n",
       "      <td>29.96</td>\n",
       "      <td>472.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>51</td>\n",
       "      <td>29.23</td>\n",
       "      <td>476.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>52</td>\n",
       "      <td>28.52</td>\n",
       "      <td>481.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>53</td>\n",
       "      <td>27.83</td>\n",
       "      <td>485.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>54</td>\n",
       "      <td>27.15</td>\n",
       "      <td>489.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>55</td>\n",
       "      <td>26.49</td>\n",
       "      <td>493.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>56</td>\n",
       "      <td>25.85</td>\n",
       "      <td>497.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>57</td>\n",
       "      <td>25.22</td>\n",
       "      <td>501.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>58</td>\n",
       "      <td>24.61</td>\n",
       "      <td>504.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>59</td>\n",
       "      <td>24.01</td>\n",
       "      <td>508.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>23.42</td>\n",
       "      <td>512.37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    time active  CLV_ratcall\n",
       "0      1  100.0        15.74\n",
       "1      2  97.57        32.97\n",
       "2      3   95.2        49.01\n",
       "3      4  92.89        66.39\n",
       "4      5  90.63        80.82\n",
       "5      6  88.43        94.78\n",
       "6      7  86.28       108.86\n",
       "7      8  84.18       123.57\n",
       "8      9  82.14       135.18\n",
       "9     10  80.14       147.95\n",
       "10    11  78.19       161.79\n",
       "11    12  76.29       174.24\n",
       "12    13  74.44       185.74\n",
       "13    14  72.63       198.33\n",
       "14    15  70.86       210.05\n",
       "15    16  69.14       222.76\n",
       "16    17  67.46       233.30\n",
       "17    18  65.82       243.50\n",
       "18    19  64.22       253.79\n",
       "19    20  62.66       264.55\n",
       "20    21  61.14       273.03\n",
       "21    22  59.65       282.36\n",
       "22    23   58.2       292.48\n",
       "23    24  56.79       301.57\n",
       "24    25  55.41       309.98\n",
       "25    26  54.06       319.19\n",
       "26    27  52.75       327.75\n",
       "27    28  51.47       337.04\n",
       "28    29  50.22       344.74\n",
       "29    30   49.0       352.20\n",
       "30    31  47.81       359.72\n",
       "31    32  46.65       367.58\n",
       "32    33  45.51       373.78\n",
       "33    34  44.41       380.60\n",
       "34    35  43.33       387.99\n",
       "35    36  42.27       394.64\n",
       "36    37  41.25       400.79\n",
       "37    38  40.24       407.51\n",
       "38    39  39.27       413.77\n",
       "39    40  38.31       420.56\n",
       "40    41  37.38       426.19\n",
       "41    42  36.47       431.64\n",
       "42    43  35.59       437.13\n",
       "43    44  34.72       442.88\n",
       "44    45  33.88       447.41\n",
       "45    46  33.05       452.40\n",
       "46    47  32.25       457.80\n",
       "47    48  31.47       462.66\n",
       "48    49   30.7       467.15\n",
       "49    50  29.96       472.06\n",
       "50    51  29.23       476.64\n",
       "51    52  28.52       481.60\n",
       "52    53  27.83       485.71\n",
       "53    54  27.15       489.70\n",
       "54    55  26.49       493.71\n",
       "55    56  25.85       497.91\n",
       "56    57  25.22       501.22\n",
       "57    58  24.61       504.87\n",
       "58    59  24.01       508.82\n",
       "59    60  23.42       512.37"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time = np.array(range(0, nr_months)) + 1\n",
    "growth = np.power(1 + annual_growth, range(0, nr_years))\n",
    "growth = np.repeat(growth, 12, axis=0)\n",
    "revenues = np.repeat(revenue[[\"revenue\"]].values, nr_years, axis=1)\n",
    "revenues = np.reshape(revenues, nr_months, order=\"F\") * growth\n",
    "service = cost_service * revenues\n",
    "marketing = revenues * marketing_cost\n",
    "profit = revenues - service - marketing\n",
    "\n",
    "active = np.ones(nr_months)\n",
    "active[1:] = (1 - monthly_churn) ** (time[1:] - 1)\n",
    "\n",
    "exp_profit = active * profit\n",
    "PV_exp_profit = exp_profit / np.power(1 + monthly_discount_rate, time)\n",
    "CLV = np.cumsum(PV_exp_profit)\n",
    "\n",
    "s_mobile = pd.DataFrame({\"time\": time, \"active\": (100 * active).round(2).astype(str), \"CLV_ratcall\": CLV})\n",
    "s_mobile.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "revenue = pd.DataFrame(\n",
    "    {\n",
    "        \"month\": rsm.months_abb(),\n",
    "        \"revenue\": [  # increase the revenue for 10%\n",
    "            27.6,\n",
    "            31.2,\n",
    "            30.0,\n",
    "            33.6,\n",
    "            28.8,\n",
    "            28.8,\n",
    "            30.0,\n",
    "            32.4,\n",
    "            26.4,\n",
    "            30.0,\n",
    "            33.6,\n",
    "            31.2,\n",
    "        ],\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "annual_growth = 0.08\n",
    "annual_discount_rate = 0.1\n",
    "monthly_discount_rate = (1 + annual_discount_rate) ** (1 / 12) - 1\n",
    "monthly_churn = 0.0127\n",
    "annual_churn = 1 - (1 - monthly_churn) ** 12\n",
    "cost_service = 0.35  #because the costimise surveies,cost increase\n",
    "marketing_cost = 0.01  \n",
    "nr_years = 5\n",
    "nr_months = 5 * 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>active</th>\n",
       "      <th>CLV_ratcall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>17.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>98.73</td>\n",
       "      <td>36.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>97.48</td>\n",
       "      <td>55.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>96.24</td>\n",
       "      <td>75.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>95.02</td>\n",
       "      <td>92.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>93.81</td>\n",
       "      <td>108.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>92.62</td>\n",
       "      <td>125.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>91.44</td>\n",
       "      <td>143.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>90.28</td>\n",
       "      <td>157.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>89.13</td>\n",
       "      <td>173.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>88.0</td>\n",
       "      <td>190.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>86.88</td>\n",
       "      <td>206.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>85.78</td>\n",
       "      <td>221.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>84.69</td>\n",
       "      <td>237.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>83.62</td>\n",
       "      <td>252.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>82.55</td>\n",
       "      <td>269.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>81.51</td>\n",
       "      <td>283.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>80.47</td>\n",
       "      <td>297.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>79.45</td>\n",
       "      <td>311.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>78.44</td>\n",
       "      <td>326.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>77.44</td>\n",
       "      <td>338.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>76.46</td>\n",
       "      <td>352.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>75.49</td>\n",
       "      <td>366.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>74.53</td>\n",
       "      <td>380.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>73.58</td>\n",
       "      <td>392.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>72.65</td>\n",
       "      <td>406.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>71.73</td>\n",
       "      <td>419.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>70.82</td>\n",
       "      <td>433.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>69.92</td>\n",
       "      <td>445.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>69.03</td>\n",
       "      <td>457.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>31</td>\n",
       "      <td>68.15</td>\n",
       "      <td>469.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32</td>\n",
       "      <td>67.29</td>\n",
       "      <td>481.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>33</td>\n",
       "      <td>66.43</td>\n",
       "      <td>491.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>65.59</td>\n",
       "      <td>502.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>35</td>\n",
       "      <td>64.75</td>\n",
       "      <td>515.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>36</td>\n",
       "      <td>63.93</td>\n",
       "      <td>526.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>37</td>\n",
       "      <td>63.12</td>\n",
       "      <td>536.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>38</td>\n",
       "      <td>62.32</td>\n",
       "      <td>548.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>39</td>\n",
       "      <td>61.53</td>\n",
       "      <td>559.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>40</td>\n",
       "      <td>60.75</td>\n",
       "      <td>571.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>41</td>\n",
       "      <td>59.97</td>\n",
       "      <td>581.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42</td>\n",
       "      <td>59.21</td>\n",
       "      <td>591.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>58.46</td>\n",
       "      <td>601.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44</td>\n",
       "      <td>57.72</td>\n",
       "      <td>611.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45</td>\n",
       "      <td>56.99</td>\n",
       "      <td>620.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46</td>\n",
       "      <td>56.26</td>\n",
       "      <td>629.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>47</td>\n",
       "      <td>55.55</td>\n",
       "      <td>640.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48</td>\n",
       "      <td>54.84</td>\n",
       "      <td>649.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>49</td>\n",
       "      <td>54.15</td>\n",
       "      <td>658.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>50</td>\n",
       "      <td>53.46</td>\n",
       "      <td>668.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>51</td>\n",
       "      <td>52.78</td>\n",
       "      <td>677.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>52</td>\n",
       "      <td>52.11</td>\n",
       "      <td>687.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>53</td>\n",
       "      <td>51.45</td>\n",
       "      <td>695.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>54</td>\n",
       "      <td>50.79</td>\n",
       "      <td>704.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>55</td>\n",
       "      <td>50.15</td>\n",
       "      <td>712.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>56</td>\n",
       "      <td>49.51</td>\n",
       "      <td>721.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>57</td>\n",
       "      <td>48.88</td>\n",
       "      <td>728.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>58</td>\n",
       "      <td>48.26</td>\n",
       "      <td>736.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>59</td>\n",
       "      <td>47.65</td>\n",
       "      <td>745.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>47.04</td>\n",
       "      <td>753.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    time active  CLV_ratcall\n",
       "0      1  100.0        17.52\n",
       "1      2  98.73        36.93\n",
       "2      3  97.48        55.20\n",
       "3      4  96.24        75.25\n",
       "4      5  95.02        92.08\n",
       "5      6  93.81       108.57\n",
       "6      7  92.62       125.39\n",
       "7      8  91.44       143.18\n",
       "8      9  90.28       157.38\n",
       "9     10  89.13       173.19\n",
       "10    11   88.0       190.53\n",
       "11    12  86.88       206.30\n",
       "12    13  85.78       221.06\n",
       "13    14  84.69       237.41\n",
       "14    15  83.62       252.80\n",
       "15    16  82.55       269.68\n",
       "16    17  81.51       283.86\n",
       "17    18  80.47       297.74\n",
       "18    19  79.45       311.91\n",
       "19    20  78.44       326.89\n",
       "20    21  77.44       338.86\n",
       "21    22  76.46       352.17\n",
       "22    23  75.49       366.77\n",
       "23    24  74.53       380.06\n",
       "24    25  73.58       392.49\n",
       "25    26  72.65       406.25\n",
       "26    27  71.73       419.21\n",
       "27    28  70.82       433.43\n",
       "28    29  69.92       445.37\n",
       "29    30  69.03       457.07\n",
       "30    31  68.15       469.00\n",
       "31    32  67.29       481.62\n",
       "32    33  66.43       491.69\n",
       "33    34  65.59       502.90\n",
       "34    35  64.75       515.20\n",
       "35    36  63.93       526.39\n",
       "36    37  63.12       536.86\n",
       "37    38  62.32       548.45\n",
       "38    39  61.53       559.37\n",
       "39    40  60.75       571.35\n",
       "40    41  59.97       581.40\n",
       "41    42  59.21       591.25\n",
       "42    43  58.46       601.30\n",
       "43    44  57.72       611.93\n",
       "44    45  56.99       620.41\n",
       "45    46  56.26       629.86\n",
       "46    47  55.55       640.21\n",
       "47    48  54.84       649.64\n",
       "48    49  54.15       658.45\n",
       "49    50  53.46       668.22\n",
       "50    51  52.78       677.41\n",
       "51    52  52.11       687.50\n",
       "52    53  51.45       695.97\n",
       "53    54  50.79       704.26\n",
       "54    55  50.15       712.72\n",
       "55    56  49.51       721.68\n",
       "56    57  48.88       728.82\n",
       "57    58  48.26       736.78\n",
       "58    59  47.65       745.50\n",
       "59    60  47.04       753.44"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time = np.array(range(0, nr_months)) + 1\n",
    "growth = np.power(1 + annual_growth, range(0, nr_years))\n",
    "growth = np.repeat(growth, 12, axis=0)\n",
    "revenues = np.repeat(revenue[[\"revenue\"]].values, nr_years, axis=1)\n",
    "revenues = np.reshape(revenues, nr_months, order=\"F\") * growth\n",
    "service = cost_service * revenues\n",
    "marketing = revenues * marketing_cost\n",
    "profit = revenues - service - marketing\n",
    "\n",
    "active = np.ones(nr_months)\n",
    "active[1:] = (1 - monthly_churn) ** (time[1:] - 1)\n",
    "\n",
    "exp_profit = active * profit\n",
    "PV_exp_profit = exp_profit / np.power(1 + monthly_discount_rate, time)\n",
    "CLV = np.cumsum(PV_exp_profit)\n",
    "\n",
    "s_mobile = pd.DataFrame({\"time\": time, \"active\": (100 * active).round(2).astype(str), \"CLV_ratcall\": CLV})\n",
    "s_mobile.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>incentive</th>\n",
       "      <th>CLV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>no</td>\n",
       "      <td>2087907.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>yes</td>\n",
       "      <td>3070268.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  incentive         CLV\n",
       "0        no  2087907.75\n",
       "1       yes  3070268.00"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "overage_comparison = pd.DataFrame({\n",
    "    'incentive': ['no', 'yes'],\n",
    "    \"CLV\": [512.37*4075,753.44 *4075]\n",
    "})\n",
    "overage_comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(overage_comparison['incentive'], overage_comparison['CLV'], color=['blue', 'orange'])\n",
    "plt.title('CLV Comparison with and without Incentive(overage)')\n",
    "plt.xlabel('Incentive')\n",
    "plt.ylabel('Customer Lifetime Value (CLV)')\n",
    "plt.xticks(['no', 'yes'], ['No Incentive', 'With Incentive'])\n",
    "plt.ylim(0, max(overage_comparison['CLV']) + 50) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chatgpt -- Please see the PDF"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
